REPORT  zimm_fiscalidade_gemco.
*************************************************************************
***                                                                     *
***      *********************************************************      *
***      *                +---------------------+                *      *
***      *                | G r u p o | A S S A |                *      *
***      *                +---------------------+                *      *
***      *********************************************************      *
***                                                                     *
*************************************************************************
***---------------------------------------------------------------------*
***** Application data                                                  *
***---------------------------------------------------------------------*
*** Name: ZIMM_FISCALIDADE_GEMCO                                        *
*** Title: Interface de fiscalidade para sistema Gemco                  *
*** Developer: Fabio Vicente Baptista                                   *
*** Date: 26/12/2012                                                    *
***                                                                     *
*** Objectives: Interface de fiscalidade para sistema Gemco             *
***                                                                     *
*** Technical Specification: <Code/Description>                         *
***---------------------------------------------------------------------+
***** History of changes                                                |
***---+------------+-----------------+----------------------------------+
***Seq|Date        |Developer        |Code/Description change or error  |
***---+------------+-----------------+----------------------------------+
***001| 26/12/2012 |Fabio V. Baptista|ECDK900699 - Desenv. Inicial      |
***---+------------+-----------------+----------------------------------+
***** Selection texts (pt-BR)                                           |
***--------+------------------------------------------------------------+
*Name    |Text                                                        |
*--------+------------------------------------------------------------+
*P_LOG   |Arquivo log de processamento                                |
*--------+------------------------------------------------------------+
*** Texts (pt-BR)                                                     |
*---+-----------------------------------------------------------------+
*Seq|Text                                                             |
*---+-----------------------------------------------------------------+
*E01|Extensão inválida                                                |
*---+-----------------------------------------------------------------+

*   Include para Busca dos parâmetros de HARDCODE
INCLUDE zexx_hardcode.

TABLES: konh.

**********************************************************************
TYPES:

       BEGIN OF ty_txpca003,
         ncm       TYPE ztsdd_txpca003-ncm      ,
         rate      TYPE ztsdd_txpca003-rate     ,
         validfrom TYPE ztsdd_txpca003-validfrom,
       END OF  ty_txpca003,

       BEGIN OF ty_txpca004,
         nbmcode   TYPE ztsdd_txpca004-nbmcode  ,
         shipfrom  TYPE ztsdd_txpca004-shipfrom ,
         shipto    TYPE ztsdd_txpca004-shipto   ,
         validfrom TYPE ztsdd_txpca004-validfrom,
         knumh     TYPE ztsdd_txpca004-knumh    ,
       END OF  ty_txpca004,

       BEGIN OF ty_txpca004_nbm,
         nbmcode   TYPE j_1btxst3-value,
         shipfrom  TYPE ztsdd_txpca004-shipfrom ,
         shipto    TYPE ztsdd_txpca004-shipto   ,
         validfrom TYPE ztsdd_txpca004-validfrom,
         knumh     TYPE ztsdd_txpca004-knumh    ,
       END OF ty_txpca004_nbm,

       BEGIN OF ty_konh,
         knumh   TYPE konh-knumh  ,
         kotabnr TYPE konh-kotabnr,
         kappl   TYPE konh-kappl  ,
         kschl   TYPE konh-kschl  ,
         vakey   TYPE vakey, "konh-vakey  ,
         datab   TYPE konh-datab  ,
         datbi   TYPE konh-datbi  ,
       END OF ty_konh,

       BEGIN OF ty_konh_aux,
         knumh TYPE cdhdr-objectid,
       END OF ty_konh_aux,

       BEGIN OF ty_a346,
         kappl    TYPE a346-kappl,
         kschl    TYPE a346-kschl,
         aland    TYPE a346-aland,
         dynkey1  TYPE a346-dynkey1,
         dynkey2  TYPE a346-dynkey2,
         dynkey3  TYPE a346-dynkey3,
         taxgroup TYPE a346-taxgroup,
         datbi    TYPE a346-datbi,
         datab    TYPE a346-datab,
         knumh    TYPE a346-knumh,
         datab_aux TYPE j_1btxst3-validfrom,
         nbmcode  TYPE j_1btxip1-nbmcode,
      END OF ty_a346,

       BEGIN OF ty_a346_aux,
         kappl    TYPE a346-kappl,
         kschl    TYPE a346-kschl,
         aland    TYPE a346-aland,
         dynkey1  TYPE j_1btxip1-nbmcode,
         dynkey2  TYPE a346-dynkey2,
         dynkey3  TYPE a346-dynkey3,
         taxgroup TYPE a346-taxgroup,
         datbi    TYPE j_1btxcof-validfrom,
         datab    TYPE j_1btxcof-validto,
         knumh    TYPE cdhdr-objectid, " Para utilizar mesmo tipo
         datab_aux TYPE j_1btxst3-validfrom,
      END OF ty_a346_aux,

       BEGIN OF ty_a346_tmp,
         kappl    TYPE a346-kappl,
         kschl    TYPE a346-kschl,
         aland    TYPE a346-aland,
         dynkey1  TYPE a346-dynkey1,
         dynkey2  TYPE a346-dynkey2,
         dynkey3  TYPE a346-dynkey3,
         taxgroup TYPE a346-taxgroup,
         datbi    TYPE j_1btxcof-validfrom,
         datab    TYPE j_1btxcof-validto,
         knumh    TYPE cdhdr-objectid, " Para utilizar mesmo tipo
      END OF ty_a346_tmp,

      BEGIN OF ty_cdhdr,
        objectclas TYPE cdhdr-objectclas,
        objectid   TYPE cdhdr-objectid  ,
        changenr   TYPE cdhdr-changenr  ,
        udate      TYPE cdhdr-udate     ,
        utime      TYPE cdhdr-utime     ,
        knumh      TYPE konh-knumh      ,
      END OF ty_cdhdr,

      BEGIN OF ty_cdhdr_aux,
        objectclas TYPE cdhdr-objectclas,
        objectid   TYPE a346-knumh      ,
        changenr   TYPE cdhdr-changenr  ,
*        UDATE      type CDHDR-UDATE     ,
        udate      TYPE j_1btxdatf      ,
        utime      TYPE cdhdr-utime     ,
      END OF ty_cdhdr_aux,

      BEGIN OF ty_j_1btxcof,
        country   TYPE j_1btxcof-country  ,
        gruop     TYPE j_1btxcof-gruop    ,
        value     TYPE j_1btxcof-value    ,
        value2    TYPE j_1btxcof-value2   ,
        value3    TYPE j_1btxcof-value3   ,
        validfrom TYPE j_1btxcof-validfrom,
        validto   TYPE j_1btxcof-validto  ,
        rate      TYPE j_1btxcof-rate     ,
      END OF ty_j_1btxcof,

      BEGIN OF ty_j_1btxpis,
        country   TYPE j_1btxpis-country,
        gruop     TYPE j_1btxpis-gruop,
        value     TYPE j_1btxpis-value,
        value2    TYPE j_1btxpis-value2,
        value3    TYPE j_1btxpis-value3,
        validfrom TYPE j_1btxpis-validfrom,
        validto   TYPE j_1btxpis-validto,
        rate      TYPE j_1btxpis-rate,
      END OF ty_j_1btxpis,

      BEGIN OF ty_txpca001,
        pisknumh  TYPE ztsdd_txpca001-pisknumh,
        pis       TYPE ztsdd_txpca001-pis,
        cofknumh  TYPE ztsdd_txpca001-cofknumh,
        cofins    TYPE ztsdd_txpca001-cofins,
        validfrom TYPE ztsdd_txpca001-validfrom,
      END OF ty_txpca001,

      BEGIN OF ty_cdpos,
        objectclas TYPE cdpos-objectclas,
        objectid   TYPE cdpos-objectid,
        changenr   TYPE cdpos-changenr,
        tabname    TYPE cdpos-tabname,
        tabkey     TYPE cdpos-tabkey,
        fname      TYPE cdpos-fname,
        chngind    TYPE cdpos-chngind,
        value_new  TYPE cdpos-value_new,
      END OF ty_cdpos,

      BEGIN OF ty_cdpos_aux,
        objectclas TYPE cdpos-objectclas,
        objectid   TYPE a382-knumh,      " Para ter mesmo tipo do 'for all entries'.
        changenr   TYPE cdpos-changenr,
        tabname    TYPE cdpos-tabname,
        tabkey     TYPE cdpos-tabkey,
        fname      TYPE cdpos-fname,
        chngind    TYPE cdpos-chngind,
        value_new  TYPE cdpos-value_new,
      END OF ty_cdpos_aux,

      BEGIN OF ty_txpca002,
        shipfrom  TYPE ztsdd_txpca002-shipfrom,
        shipto    TYPE ztsdd_txpca002-shipto,
        rate      TYPE ztsdd_txpca002-rate,
        validfrom TYPE ztsdd_txpca002-validfrom,
      END OF ty_txpca002,

*      BEGIN OF TY_TXPCA004,
*        NBMCODE   TYPE ZTSDD_TXPCA004-SHIPFROM,
*        SHIPTO    TYPE ZTSDD_TXPCA004-SHIPTO,
*        VALIDFROM TYPE ZTSDD_TXPCA004-VALIDFROM,
*        RATE      TYPE ZTSDD_TXPCA004-RATE,
*      END OF TY_TXPCA004,

      BEGIN OF ty_a382,
        kappl     TYPE a382-kappl   ,
        kschl     TYPE a382-kschl   ,
        aland     TYPE a382-aland   ,
        doctyp    TYPE a382-doctyp  ,
        txreg_sf  TYPE a382-txreg_sf,
        txreg_st  TYPE a382-txreg_st,
        dynkey1   TYPE a382-dynkey1 ,
        dynkey2   TYPE a382-dynkey2 ,
        dynkey3   TYPE a382-dynkey3 ,
        taxgroup  TYPE a382-taxgroup,
        datbi     TYPE a382-datbi   ,
        datab     TYPE a382-datab   ,
        knumh     TYPE a382-knumh   ,
        datab_aux TYPE j_1btxic1-validfrom,
        datbi_aux TYPE j_1btxic3-validto,
      END OF ty_a382,

      BEGIN OF ty_j_1btxic1,
        land1     TYPE j_1btxic1-land1,
        shipfrom  TYPE j_1btxic1-shipfrom,
        shipto    TYPE j_1btxic1-shipto,
        validfrom TYPE j_1btxic1-validfrom,
        rate      TYPE j_1btxic1-rate,
        rate_f    TYPE j_1btxic1-rate_f,
     END OF ty_j_1btxic1,

     BEGIN OF ty_j_1btxip1,
       nbmcode   TYPE j_1btxip1-nbmcode,
       validfrom TYPE j_1btxip1-validfrom,
       rate      TYPE j_1btxip1-rate,
     END OF ty_j_1btxip1,

     BEGIN OF ty_t604n,
       spras TYPE t604n-spras,
       land1 TYPE t604n-land1,
       steuc TYPE t604n-steuc,
       text1 TYPE t604n-text1,
*       TEXT2 TYPE T604N-TEXT2,
*       TEXT3 TYPE T604N-TEXT3,
*       TEXT4 TYPE T604N-TEXT4,
*       TEXT5 TYPE T604N-TEXT5,
     END OF ty_t604n,

     BEGIN OF ty_a348,
       kappl    TYPE a348-kappl,
       kschl    TYPE a348-kschl,
       aland    TYPE a348-aland,
       txreg_sf TYPE a348-txreg_sf,
       txreg_st TYPE a348-txreg_st,
       xsubt    TYPE a348-xsubt,
       dynkey1  TYPE a348-dynkey1,
       dynkey2  TYPE a348-dynkey2,
       dynkey3  TYPE a348-dynkey3,
       taxgroup TYPE a348-taxgroup,
       datbi    TYPE a348-datbi,
       datab    TYPE a348-datab,
       knumh    TYPE a348-knumh,
       datab_aux TYPE j_1btxst3-validfrom,
    END OF ty_a348,

    BEGIN OF ty_j_1btxst3,
      land1     TYPE j_1btxst3-land1    ,
      shipfrom  TYPE j_1btxst3-shipfrom ,
      shipto    TYPE j_1btxst3-shipto   ,
      gruop     TYPE j_1btxst3-gruop    ,
      value     TYPE j_1btxst3-value    ,
      value2    TYPE j_1btxst3-value2   ,
      value3    TYPE j_1btxst3-value3   ,
      stgrp     TYPE j_1btxst3-stgrp    ,
      validfrom TYPE j_1btxst3-validfrom,
      validto   TYPE j_1btxst3-validto  ,
      rate      TYPE j_1btxst3-rate     ,
    END OF ty_j_1btxst3,

    BEGIN OF ty_j_1btxic3,
      land1     TYPE j_1btxic3-land1,
      shipfrom  TYPE j_1btxic3-shipfrom,
      shipto    TYPE j_1btxic3-shipto,
      gruop     TYPE j_1btxic3-gruop,
      value     TYPE j_1btxic3-value,
      value2    TYPE j_1btxic3-value2,
      value3    TYPE j_1btxic3-value3,
      validfrom TYPE j_1btxic3-validfrom,
      validto   TYPE j_1btxic3-validto,
      rate      TYPE j_1btxic3-rate,
      base      TYPE j_1btxic3-base,
      taxlaw    TYPE j_1btxic3-taxlaw,
    END OF ty_j_1btxic3,

    BEGIN OF ty_j_1batl1,
      taxlaw TYPE j_1batl1-taxlaw,
      taxsit TYPE j_1batl1-taxsit,
    END OF ty_j_1batl1,

    BEGIN OF ty_erro,
*      SHIPFROM TYPE J_1BTXST3-SHIPFROM,
*      SHIPTO   TYPE J_1BTXST3-SHIPTO,
*      GRUOP    TYPE J_1BTXST3-GRUOP,
*      VALUE    TYPE J_1BTXST3-VALUE,
*      text     type AUSLT,
      text     TYPE so_text255,
    END OF ty_erro,

    BEGIN OF ty_range_email,
      sign      TYPE c,
      option(2) TYPE c,
      low(30)   TYPE c,
      high(30)  TYPE c,
    END OF ty_range_email.

**********************************************************************
DATA:
      tg_konh         TYPE TABLE OF ty_konh        ,
*      tg_konh_icms    type table of ty_konh       ,
      tg_konh_all     TYPE TABLE OF ty_konh        ,
      tg_konh_ipi     TYPE TABLE OF ty_konh        ,
      tg_konh_aux     TYPE TABLE OF ty_konh_aux    ,
*      tg_konh_002     type table of ty_konh      ,
      tg_a346         TYPE TABLE OF ty_a346        ,
      tg_a346_aux     TYPE TABLE OF ty_a346_aux    ,
      tg_a346_cofins  TYPE TABLE OF ty_a346        ,
      tg_a346_tmp_cof TYPE TABLE OF ty_a346_tmp    ,
      tg_a346_tmp_pis TYPE TABLE OF ty_a346_tmp    ,
      tg_a346_pis     TYPE TABLE OF ty_a346        ,
      tg_a346_ipi     TYPE TABLE OF ty_a346        ,
      tg_j_1btxpis    TYPE TABLE OF ty_j_1btxpis   ,
      tg_cdhdr        TYPE TABLE OF ty_cdhdr       ,
      tg_cdhdr_tmp    TYPE TABLE OF ty_cdhdr       ,
*      TG_CDHDR        type table of cdhdr        ,
      tg_cdhdr_aux    TYPE TABLE OF ty_cdhdr_aux   ,
      tg_j_1btxcof    TYPE TABLE OF ty_j_1btxcof   ,
      tg_txpca001     TYPE TABLE OF ztsdd_txpca001 ,
      tg_txpca002     TYPE TABLE OF ztsdd_txpca002 ,
      tg_txpca002_tmp  TYPE TABLE OF ztsdd_txpca002 ,
      tg_txpca002_aux  TYPE TABLE OF ty_txpca002    ,
      tg_txpca003      TYPE TABLE OF ztsdd_txpca003 ,
      tg_txpca003_tmp  TYPE TABLE OF ztsdd_txpca003 ,
      tg_txpca003_aux  TYPE TABLE OF ty_txpca003    ,
      tg_txpca004      TYPE TABLE OF ztsdd_txpca004 ,
      tg_txpca004_tmp  TYPE TABLE OF ztsdd_txpca004 ,
      tg_txpca004_new  TYPE TABLE OF ztsdd_txpca004 ,
      tg_txpca004_aux  TYPE TABLE OF ty_txpca004    ,
      tg_txpca004_nbm  TYPE TABLE OF ty_txpca004_nbm,
      tg_cdpos         TYPE TABLE OF ty_cdpos      ,
      tg_cdpos_aux     TYPE TABLE OF ty_cdpos_aux  ,
      tg_a382          TYPE TABLE OF ty_a382       ,
      tg_a382_tmp      TYPE TABLE OF ty_a382       ,
      tg_j_1btxic1     TYPE TABLE OF ty_j_1btxic1  ,
      tg_j_1btxic1_tmp TYPE TABLE OF ty_j_1btxic1  ,
      tg_j_1btxip1     TYPE TABLE OF ty_j_1btxip1  ,
      tg_t604n         TYPE TABLE OF ty_t604n      ,
      tg_a348          TYPE TABLE OF ty_a348       ,
      tg_a348_tmp      TYPE TABLE OF ty_a348       ,
      tg_j_1btxst3     TYPE TABLE OF ty_j_1btxst3  ,
      tg_j_1btxst3_tmp TYPE TABLE OF ty_j_1btxst3  ,
      tg_j_1btxic3     TYPE TABLE OF ty_j_1btxic3  ,
      tg_j_1btxic3_tmp TYPE TABLE OF ty_j_1btxic3  ,
*      TG_J_1BTXIC3_FROM TYPE TABLE OF TY_J_1BTXIC3  ,
      tg_j_1btxic3_to   TYPE TABLE OF ty_j_1btxic3  ,
      tg_j_1batl1      TYPE TABLE OF ty_j_1batl1   ,
      tg_j_1batl1_aux  TYPE TABLE OF ty_j_1batl1   ,
      tg_erro          TYPE TABLE OF ty_erro       ,
*      TG_ERRO_Z02      type table of TY_ERRO_Z01   ,
*      TG_ERRO_Z05      type table of TY_ERRO_Z01   ,
      tg_header        TYPE TABLE OF solisti1      ,
      tg_content       TYPE TABLE OF solisti1      ,
      tg_object_para   TYPE TABLE OF soparai1      ,
      tg_object_parb   TYPE TABLE OF soparbi1      ,
      tg_receivers     TYPE TABLE OF somlreci1     .

**********************************************************************
* Estruturas
*data: EG_CDHDR     type ty_cdhdr      ,
DATA:
      eg_konh         TYPE ty_konh       ,
      eg_konh_aux     TYPE ty_konh_aux   ,
*      EG_CDHDR        type cdhdr         ,
      eg_cdhdr        TYPE ty_cdhdr      ,
      eg_cdhdr_tmp    TYPE ty_cdhdr      ,
      eg_cdhdr_aux    TYPE ty_cdhdr_aux  ,
      eg_a346         TYPE ty_a346       ,
      eg_a346_aux     TYPE ty_a346_aux   ,
      eg_a346_tmp_cof TYPE ty_a346_tmp   ,
      eg_a346_tmp_pis TYPE ty_a346_tmp   ,
      eg_j_1btxpis    TYPE ty_j_1btxpis  ,
*      eg_TXPCA001     TYPE TY_TXPCA001 .
      eg_j_1btxcof    TYPE ty_j_1btxcof   ,
      eg_txpca001     TYPE ztsdd_txpca001 ,
      eg_txpca002     TYPE ztsdd_txpca002 ,
      eg_txpca002_aux TYPE ty_txpca002    ,
      eg_txpca003     TYPE ztsdd_txpca003 ,
      eg_txpca003_aux TYPE ty_txpca003    ,
      eg_txpca004     TYPE ztsdd_txpca004 ,
      eg_txpca004_old TYPE ztsdd_txpca004 ,
      eg_txpca004_aux TYPE ty_txpca004    ,
      eg_txpca004_nbm   TYPE ty_txpca004_nbm,
      eg_cdpos          TYPE ty_cdpos       ,
      eg_a382           TYPE ty_a382        ,
      eg_a382_tmp       TYPE ty_a382        ,
      eg_j_1btxic1      TYPE ty_j_1btxic1   ,
      eg_j_1btxic1_to   TYPE ty_j_1btxic1   ,
      eg_j_1btxip1      TYPE ty_j_1btxip1   ,
      eg_t604n          TYPE ty_t604n       ,
      eg_a348           TYPE ty_a348        ,
      eg_a348_tmp       TYPE ty_a348        ,
      eg_j_1btxst3      TYPE ty_j_1btxst3   ,
      eg_j_1btxic3      TYPE ty_j_1btxic3   ,
      eg_j_1btxic3_from TYPE ty_j_1btxic3   ,
      eg_j_1btxic3_44   TYPE ty_j_1btxic3   ,
      eg_j_1btxic3_45   TYPE ty_j_1btxic3   ,
      eg_j_1btxic3_85   TYPE ty_j_1btxic3   ,
      eg_j_1batl1       TYPE ty_j_1batl1    ,
      eg_j_1batl1_85    TYPE ty_j_1batl1    ,
      eg_erro           TYPE ty_erro        ,
      eg_header         TYPE solisti1       ,
      eg_content        TYPE solisti1       ,
      eg_doc_data       TYPE sodocchgi1     ,
      eg_range_email    TYPE ty_range_email ,
      eg_receivers      TYPE somlreci1      .

**********************************************************************
* Variáveis
DATA: vg_udate(8)  TYPE c,
      vg_rate      TYPE j_1btxrate,
      vg_red1      TYPE j_1btxbase,
      vg_rate_4445      TYPE j_1btxrate,
      vg_red1_4445      TYPE j_1btxbase,
      vg_nbmcode   TYPE steuc,
      vg_taxsit    TYPE j_1btaxsit,
      vg_taxsit1   TYPE j_1btaxsit,
      vg_change    TYPE ztsdd_txpca002-change_ind,
      vg_knumh_pis TYPE knumh,
      vg_knumh_cof TYPE knumh,
      vg_datab     TYPE j_1btxpis-validfrom,
      vg_datbi     TYPE j_1btxpis-validfrom,
      vg_validfrom TYPE j_1btxic3-validfrom.

**********************************************************************
* Ranges
DATA: rg_mm_tx_000_001_piscofins    TYPE RANGE OF kscha    ,
      rg_mm_tx_000_002_cofins       TYPE RANGE OF kscha    ,
      rg_mm_tx_000_003_pis          TYPE RANGE OF kscha    ,
      rg_mm_tx_000_004_icm1         TYPE RANGE OF kscha    ,
      rg_mm_tx_000_005_ipi          TYPE RANGE OF kscha    ,
      rg_mm_tx_000_006_regra_icmsst TYPE RANGE OF kscha    ,
      rg_mm_tx_000_007_regra_icms   TYPE RANGE OF kscha    ,
      rg_mm_tx_000_009_tabname      TYPE RANGE OF tabname  ,
      rg_mm_tx_000_010_fname        TYPE RANGE OF fieldname,
      rg_mm_tx_000_011_chngind      TYPE RANGE OF cdchngind,
      rg_mm_tx_000_012_email        TYPE RANGE OF e_email  ,
      rg_mm_tx_000_013_icms_venda   TYPE RANGE OF kscha    .

**********************************************************************
* Variáveis
DATA: vg_status TYPE cdchngindh.

FIELD-SYMBOLS: <field> TYPE char50.
**********************************************************************
CONSTANTS:
  c_1     TYPE cdchngindh  VALUE '1'     ,
  c_5     TYPE zesd_status VALUE '5'     ,
  c_6     TYPE j_1btaxsit  VALUE '6'     ,
  c_9     TYPE j_1btaxsit  VALUE '9'     ,
  c_44    TYPE j_1btxgrp   VALUE '44'    ,
  c_45    TYPE j_1btxgrp   VALUE '45'    ,
  c_85    TYPE j_1btxgrp   VALUE '85'    ,
  c_87    TYPE j_1btxgrp   VALUE '87'    ,
  c_97    TYPE j_1btxgrp   VALUE '97'    ,
  c_98    TYPE j_1btxgrp   VALUE '98'    ,
  c_346   TYPE kotabnr     VALUE '346'   ,
  c_348   TYPE kotabnr     VALUE '348'   ,
  c_382   TYPE kotabnr     VALUE '382'   ,
  c_1065  TYPE so_doc_siz  VALUE '1065'  ,
  c_a     TYPE cdchngindh  VALUE 'A'     ,
  c_b     TYPE c           VALUE 'B'     ,
  c_br    TYPE aland       VALUE 'BR'    ,
  c_c     TYPE c           VALUE 'C'     ,
  c_conda TYPE cdobjectcl  VALUE 'COND_A',
  c_d     TYPE cdchngindh  VALUE 'D'     ,
  c_e     TYPE c           VALUE 'E'     ,
  c_g     TYPE c           VALUE 'G'     ,
  c_h     TYPE c           VALUE 'H'     ,
  c_i     TYPE c           VALUE 'I'     ,
  c_mailfromsap TYPE so_obj_nam VALUE 'MAILFROMSAP',
  c_p      TYPE spras       VALUE 'P'     ,
  c_raw    TYPE soodk-objtp VALUE 'RAW'   ,
  c_tx     TYPE kappl       VALUE 'TX'    ,
  c_u      TYPE zesd_status VALUE 'U'     ,
  c_v      TYPE kappl       VALUE 'V'     ,
  c_x      TYPE j_1bdynkey1 VALUE 'X'     ,   " DYNKEY tem tamanho 20
  c_xemail TYPE so_text001  VALUE 'X'     ,   " Email tem tamanho 1
  c_z01(3) TYPE c           VALUE 'Z01'   ,
  c_z02(3) TYPE c           VALUE 'Z02'   ,
  c_z03(3) TYPE c           VALUE 'Z03'   ,
  c_z04(3) TYPE c           VALUE 'Z04'   ,
  c_z05(3) TYPE c           VALUE 'Z05'   ,
  c_z06(3) TYPE c           VALUE 'Z06'   ,
  c_z07(3) TYPE c           VALUE 'Z07'   ,
  c_z08(3) TYPE c           VALUE 'Z08'   ,
  c_z09(3) TYPE c           VALUE 'Z09'   ,
  c_z10(3) TYPE c           VALUE 'Z10'   ,
  c_z11(3) TYPE c           VALUE 'Z11'   ,
  c_z12(3) TYPE c           VALUE 'Z12'   ,
  c_z13(3) TYPE c           VALUE 'Z13'   ,
  c_z14(3) TYPE c           VALUE 'Z14'   ,
  c_z15(3) TYPE c           VALUE 'Z15'   ,
  c_z16(3) TYPE c           VALUE 'Z16'   ,
  c_z17(3) TYPE c           VALUE 'Z17'   ,
  c_z21(3) TYPE c           VALUE 'Z21'   .

**********************************************************************
INITIALIZATION.

*Seleciona valores hardcode
  get_hard 'MM_TX_000_001_PISCOFINS'    'KSCHA'     rg_mm_tx_000_001_piscofins   .
  get_hard 'MM_TX_000_002_COFINS'       'KSCHA'     rg_mm_tx_000_002_cofins      .
  get_hard 'MM_TX_000_003_PIS'          'KSCHA'     rg_mm_tx_000_003_pis         .
  get_hard 'MM_TX_000_004_ICM1'         'KSCHA'     rg_mm_tx_000_004_icm1        .
  get_hard 'MM_TX_000_006_REGRA_ICMSST' 'KSCHA'     rg_mm_tx_000_006_regra_icmsst.
  get_hard 'MM_TX_000_007_REGRA_ICMS'   'KSCHA'     rg_mm_tx_000_007_regra_icms  .
  get_hard 'MM_TX_000_009_TABNAME'      'TABNAME'   rg_mm_tx_000_009_tabname     .
  get_hard 'MM_TX_000_010_FNAME'        'FIELDNAME' rg_mm_tx_000_010_fname       .
  get_hard 'MM_TX_000_011_CHNGIND'      'CDCHNGIND' rg_mm_tx_000_011_chngind     .
  get_hard 'MM_TX_000_012_EMAIL'        'KSCHA'     rg_mm_tx_000_012_email       .
  get_hard 'MM_TX_000_013_ICMS_VENDA'   'KSCHA'     rg_mm_tx_000_013_icms_venda  .

  get_hard 'MM_TX_000_005_IPI'          'KSCHA'     rg_mm_tx_000_005_ipi.

**********************************************************************
*  SELECT-OPTIONS: s_data FOR konh-erdat OBLIGATORY. MRO
  PARAMETERS: p_data TYPE konh-erdat OBLIGATORY.

**********************************************************************
START-OF-SELECTION.

* Reprocessamento - Seleção 1
  PERFORM: f_reprocessamento ,
           f_direito_fiscal  ,        " J_1BTXST3
           f_juros_icms      ,        " J_1BTXIC3
           f_calculo_icms    ,        " J_1BTXIC1
           f_lei_fiscal_icms ,        " J_1BATL1

* Mantém somente letra em branco, COM rate.
           f_separa_rate_valor USING '',       " Letra

* Separa somente os dados necessários para este processamento.
           f_separa_ranges USING " ''           " Rate
                                  c_45,        " Gruop da J_1BTXIC3
* Processa somente quem tem letra = 'branco' para demais letras.
           f_regras_branco,
*           F_DEFINE_REGRAS       ,

* Mantém somente letra em branco, SEM rate.
           f_separa_rate_branco USING '',       " Letra
*           F_SEPARA_RANGES USING C_45,        " J_1BTXIC3

           f_regras_branco_norate,

* Reprocessa letras 'B', 'C' ou 'D'.
* Mantém somente letra em branco, COM rate.
           f_separa_letras USING c_b c_c c_d,       " Letra

* Separa somente os dados necessários para este processamento.
*           F_SEPARA_RANGES USING C_45,        " Gruop da J_1BTXIC3

* Reprocessa letras B, C e D.
*           f_reprocessa_bcd,
           f_regras_branco_norate,

* Reprocessa letras 'G' ou 'H'.
* Mantém somente letra 'G'.
           f_separa_letras USING c_g c_g c_h,       " Letra

* Separa somente os dados necessários para este processamento.
*           F_SEPARA_RANGES USING C_45,        " Gruop da J_1BTXIC3

* Reprocessa letras G e H.
           f_reprocessa_gh.

* Reprocessa letras 'A'.
* Mantém somente letra A.
  PERFORM f_separa_letras USING c_a c_a c_e.       " Letra

* Reprocessa letras 'A'.
  PERFORM f_reproc_regras_ae.

* Processamento - Seleção 2
  PERFORM: f_busca_condicoes,
           f_pis_cofins     ,  " KOTABNR = '346', VAKEY = '*87'
           f_icms           ,  " KOTABNR = '382', VAKEY = '*98'
           f_icms_ipi       ,  " KOTABNR = '346', VAKEY = '*97'
           f_mva_icms       ,  " KOTABNR = '348',
           f_icms_compra    ,  " KOTABNR = '382', VAKEY = '*45'
           f_icms_venda     ,  " KOTABNR = '382', VAKEY = '*45'
           f_grava_tab_004  ,
           f_envia_erros    .

*PERFORM: F_PIS_COFINS_OLD.
*&---------------------------------------------------------------------*
*&      Form  F_PIS_COFINS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_pis_cofins_old.

  CLEAR: tg_txpca001.

  LOOP AT tg_konh INTO eg_konh WHERE kotabnr = c_346
                                 AND kschl IN rg_mm_tx_000_001_piscofins
                                 AND vakey CP '*87'.
    eg_konh_aux-knumh = eg_konh-knumh.
    APPEND: eg_konh     TO tg_konh_all.  " Formato de OBJECTID
    APPEND: eg_konh_aux TO tg_konh_aux.  " Formato original
  ENDLOOP.
  CLEAR: eg_konh, eg_konh_aux.

  CHECK: NOT tg_konh_all[] IS INITIAL.

*  IF SY-SUBRC EQ 0.

  SELECT kappl
         kschl
         aland
         dynkey1
         dynkey2
         dynkey3
         taxgroup
         datbi
         datab
         knumh
    FROM a346
    INTO TABLE tg_a346
    FOR ALL ENTRIES IN tg_konh_all
      WHERE kappl = c_tx
        AND kschl IN rg_mm_tx_000_001_piscofins
        AND aland    = c_br
        AND dynkey1  = c_x
        AND dynkey2  = c_x
        AND dynkey3  = c_x
        AND taxgroup = c_87
        AND knumh = tg_konh_all-knumh.

  IF sy-subrc EQ 0.

*    TG_A346_AUX[] = tg_a346[].  " Para busca na J_1BTXCOF
*    tg_konh_AUX[] = tg_konh_ALL[].

*      PERFORM: F_SELECT_CDHDR TABLES TG_CDHDR
*                              using  'TG_A346_AUX[]'.

    PERFORM: f_busca_modificacao.          " Tabela CDHDR
    CHECK NOT tg_cdhdr[] IS INITIAL.

*        TG_CDHDR_AUX[] = TG_CDHDR[].
    SORT: tg_cdhdr BY objectid ASCENDING.

    LOOP AT tg_cdhdr INTO eg_cdhdr.
*          PERFORM: F_EXIT_OUTPUT USING    EG_CDHDR-udate
*                                 CHANGING VG_udate.
      eg_cdhdr_aux-objectclas = eg_cdhdr-objectclas.
      eg_cdhdr_aux-objectid   = eg_cdhdr-objectid  .
      eg_cdhdr_aux-changenr   = eg_cdhdr-changenr  .
*          EG_CDHDR_aux-UDATE      = EG_CDHDR-UDATE     .
      eg_cdhdr_aux-utime      = eg_cdhdr-utime     .
*      PERFORM: F_EXIT_INPUT USING    EG_CDHDR-udate
**                                CHANGING VG_udate.
*                            CHANGING EG_CDHDR_aux-udate.

      APPEND: eg_cdhdr_aux TO tg_cdhdr_aux.
    ENDLOOP.
    CLEAR: eg_cdhdr.

    SELECT kappl
           kschl
           aland
           dynkey1
           dynkey2
           dynkey3
           taxgroup
           datbi
           datab
           knumh
      FROM a346
      INTO TABLE tg_a346_cofins
      FOR ALL ENTRIES IN tg_cdhdr_aux
        WHERE kschl IN rg_mm_tx_000_002_cofins
          AND dynkey1  = c_x
          AND dynkey2  = c_x
          AND dynkey3  = c_x
          AND taxgroup = c_87
          AND knumh = tg_cdhdr_aux-objectid.

    IF sy-subrc EQ 0.

      SELECT mandt      pisknumh
             pis        cofknumh
             cofins     validfrom
             udate      utime
             change_ind status
             data       filename
             status1    data1
             filename1
        FROM ztsdd_txpca001
        INTO TABLE tg_txpca001
          FOR ALL ENTRIES IN tg_a346_cofins
          WHERE pisknumh = tg_a346_cofins-knumh.

*          tg_A346_AUX[] = tg_A346_cofins[].

      PERFORM: f_ajusta_a346.

      SORT: tg_a346_tmp_cof BY taxgroup ASCENDING.

      SELECT country
             gruop
             value
             value2
             value3
             validfrom
             validto
             rate
        FROM j_1btxcof
        INTO TABLE tg_j_1btxcof
        FOR ALL ENTRIES IN tg_a346_tmp_cof
          WHERE country   = c_br
            AND gruop     = tg_a346_tmp_cof-taxgroup
*            and value     = Tg_a346_TMP-DYNKEY1
*            and value2    = Tg_a346_TMP-DYNKEY2
*            and value3    = Tg_a346_TMP-DYNKEY3
            AND value     = space
            AND value2    = space
            AND value3    = space
            AND validfrom = tg_a346_tmp_cof-datab
            AND validto   = tg_a346_tmp_cof-datbi.

      IF sy-subrc EQ 0.

        SORT: tg_j_1btxcof BY gruop     ASCENDING
                              value     ASCENDING
                              value2    ASCENDING
                              value3    ASCENDING
                              validfrom ASCENDING
                              validto   ASCENDING.

        SELECT kappl
               kschl
               aland
               dynkey1
               dynkey2
               dynkey3
               taxgroup
               datbi
               datab
               knumh
          FROM a346
          INTO TABLE tg_a346_pis
            FOR ALL ENTRIES IN tg_cdhdr_aux
            WHERE kschl IN rg_mm_tx_000_003_pis
              AND dynkey1  = c_x
              AND dynkey2  = c_x
              AND dynkey3  = c_x
              AND taxgroup = c_87
              AND knumh = tg_cdhdr_aux-objectid.

        IF sy-subrc EQ 0.

          tg_a346_tmp_pis[] = tg_a346_pis[].

          PERFORM: f_ajusta_a346_pis.

          SELECT country
                 gruop
                 value
                 value2
                 value3
                 validfrom
                 validto
                 rate
            FROM j_1btxpis
              INTO TABLE tg_j_1btxpis
              FOR ALL ENTRIES IN tg_a346_tmp_pis
              WHERE country   = c_br
              AND gruop     = tg_a346_tmp_pis-taxgroup
              AND value     = space
              AND value2    = space
              AND value3    = space
              AND validfrom = tg_a346_tmp_pis-datab
              AND validto   = tg_a346_tmp_pis-datbi.

          IF sy-subrc EQ 0.

            SELECT mandt      pisknumh
                   pis        cofknumh
                   cofins     validfrom
                   udate      utime
                   change_ind status
                   data       filename
                   status1    data1
                   filename1
              FROM ztsdd_txpca001
              APPENDING TABLE tg_txpca001
                FOR ALL ENTRIES IN tg_a346_pis
                WHERE pisknumh = tg_a346_pis-knumh.
          ENDIF.

* Atualiza tabela 'ZTSDD_TXPCA001' com status '1'.
          LOOP AT tg_txpca001 INTO eg_txpca001.

* TG_A346_TMP se refere ao COFINS.
            READ TABLE tg_a346_tmp_cof INTO eg_a346_tmp_cof
                 WITH KEY knumh = eg_txpca001-pisknumh BINARY SEARCH.
            IF sy-subrc EQ 0.
              READ TABLE tg_j_1btxcof INTO eg_j_1btxcof
                   WITH KEY gruop = eg_a346_tmp_cof-taxgroup
                        validfrom = eg_a346_tmp_cof-datab
                        validto   = eg_a346_tmp_cof-datbi BINARY SEARCH.
            ENDIF.

            READ TABLE tg_a346_pis INTO eg_a346 WITH KEY knumh = eg_txpca001-pisknumh BINARY SEARCH.
            IF sy-subrc EQ 0.
              READ TABLE tg_j_1btxpis INTO eg_j_1btxpis
                   WITH KEY gruop = eg_a346-taxgroup BINARY SEARCH.
              IF sy-subrc EQ 0.

                PERFORM: f_atualiza_pis USING eg_txpca001-pisknumh   " PISKNUMH
                                              eg_j_1btxpis-rate      " PIS
                                              eg_txpca001-cofknumh   " COFKNUMH
                                              eg_txpca001-cofins     " COFINS
                                              eg_txpca001-validfrom  " VALIDFROM
                                              eg_txpca001-udate      " UDATE
                                              eg_txpca001-utime      " UTIME
                                              c_u                    " CHANGE_IND
                                              c_1                    " STATUS
                                              eg_txpca001-data       " DATA
                                              eg_txpca001-filename   " FILENAME
                                              eg_txpca001-status1    " STATUS1
                                              eg_txpca001-data1      " DATA1
                                              eg_txpca001-filename1. " FILENAME1
              ENDIF.
            ENDIF.
          ENDLOOP.
          CLEAR: eg_txpca001.

          PERFORM: f_unir_a346.

*IGNORAR A346.
*Usar período da PIS.

          LOOP AT tg_a346 INTO eg_a346.

            PERFORM: f_date_to_char CHANGING eg_a346-datab.
            PERFORM: f_date_to_char CHANGING eg_a346-datbi.
            vg_datab = eg_a346-datab.
            vg_datbi = eg_a346-datbi.

* Insere registro na tabela 'ZTSDD_TXPCA001' com tipo de modificação 'CHANGE_IND' =  'I'.
            CLEAR: eg_j_1btxpis, eg_a346_tmp_pis.
            LOOP AT tg_j_1btxpis INTO eg_j_1btxpis WHERE validfrom = vg_datab
                                                       AND validto = vg_datbi.

              READ TABLE tg_a346_tmp_pis INTO eg_a346_tmp_pis
                   WITH KEY taxgroup = eg_j_1btxpis-gruop BINARY SEARCH.
*              IF sy-subrc eq 0.
*                perform: f_date_to_char CHANGING EG_A346_TMP_PIS-datab.
*                perform: f_date_to_char CHANGING EG_A346_TMP_PIS-datbi.
*              ENDIF.
            ENDLOOP.

            CLEAR: eg_j_1btxcof, eg_a346_tmp_cof.
            LOOP AT tg_j_1btxcof INTO eg_j_1btxcof WHERE validfrom = vg_datab
                                                       AND validto = vg_datbi.
              READ TABLE tg_a346_tmp_cof INTO eg_a346_tmp_cof
                   WITH KEY taxgroup = eg_j_1btxcof-gruop BINARY SEARCH.
            ENDLOOP.

*                read table tg_J_1BTXCOF into Eg_J_1BTXCOF
*                     WITH KEY GRUOP     = Eg_a346_TMP_COF-taxgroup
**                              value     = Eg_a346_TMP-DYNKEY1 " Retirado para teste
**                              value2    = Eg_a346_TMP-DYNKEY2
**                              value3    = Eg_a346_TMP-DYNKEY3
*                              VALIDFROM = Eg_a346_TMP-datAB
*                              VALIDTO   = Eg_a346_TMP-datBI BINARY SEARCH.
*
*                read table TG_CDHDR into EG_CDHDR
*                     WITH KEY OBJECTID = EG_A346_TMP-knumh BINARY SEARCH.

            vg_knumh_pis = eg_a346_tmp_pis-knumh.
            vg_knumh_cof = eg_a346_tmp_cof-knumh.
            PERFORM: f_atualiza_pis USING vg_knumh_pis           " PISKNUMH
                                          eg_j_1btxpis-rate      " PIS
                                          vg_knumh_cof           " COFKNUMH
                                          eg_j_1btxcof-rate      " COFINS
                                          eg_j_1btxpis-validfrom " VALIDFROM
                                          eg_cdhdr-udate         " UDATE
                                          eg_cdhdr-utime         " UTIME
                                          c_i                    " CHANGE_IND Se não existir
                                          c_1                    " STATUS
                                          eg_txpca001-data       " DATA
                                          eg_txpca001-filename   " FILENAME
                                          eg_txpca001-status1    " STATUS1
                                          eg_txpca001-data1      " DATA1
                                          eg_txpca001-filename1. " FILENAME1

            CLEAR: eg_j_1btxpis, eg_j_1btxcof.

          ENDLOOP.


        ENDIF.

      ENDIF.

    ENDIF.

  ENDIF.

*  ENDIF.

ENDFORM.                    " F_PIS_COFINS_OLD
*&---------------------------------------------------------------------*
*&      Form  F_DATE_TO_CHAR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_date_to_char
*  USING P_DATE TYPE DATS
                 CHANGING p_char .

  DATA: vl_dats(10) TYPE c.


* Converte formato data AAAAMMDD para DD.MM.AAAA para conversão invertida a seguir
  CALL FUNCTION 'CONVERSION_EXIT_BEGDA_OUTPUT'
    EXPORTING
*     INPUT  = P_DATE
      input  = p_char
    IMPORTING
      output = vl_dats.

* Converte data invertida.
  CALL FUNCTION 'CONVERSION_EXIT_INVDT_INPUT'
    EXPORTING
      input  = vl_dats
    IMPORTING
*     output = eg_a346_aux-datbi.
      output = p_char.

ENDFORM.                    " F_DATE_TO_CHAR
*&---------------------------------------------------------------------*
*&      Form  F_ATUALIZA_PIS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_STATUS  text
*      -->P_CHANGE  text
*----------------------------------------------------------------------*
FORM f_atualiza_pis  USING p_pisknumh   TYPE ztsdd_txpca001-pisknumh
                           p_pis        TYPE ztsdd_txpca001-pis
                           p_cofknumh   TYPE ztsdd_txpca001-cofknumh
                           p_cofins     TYPE ztsdd_txpca001-cofins
                           p_validfrom  TYPE ztsdd_txpca001-validfrom
                           p_udate      TYPE ztsdd_txpca001-udate
                           p_utime      TYPE ztsdd_txpca001-utime
                           p_change    TYPE ztsdd_txpca001-change_ind
                           p_status    TYPE ztsdd_txpca001-status
                           p_data      TYPE ztsdd_txpca001-data
                           p_filename  TYPE ztsdd_txpca001-filename
                           p_status1   TYPE ztsdd_txpca001-status1
                           p_data1     TYPE ztsdd_txpca001-data1
                           p_filename1 TYPE ztsdd_txpca001-filename1.

  eg_txpca001-pisknumh   = p_pisknumh.
  eg_txpca001-pis        = p_pis.
  eg_txpca001-cofknumh   = p_cofknumh.
  eg_txpca001-cofins     = p_cofins.
  eg_txpca001-validfrom  = p_validfrom.
  eg_txpca001-udate      = p_udate.
  eg_txpca001-utime      = p_utime.
  eg_txpca001-change_ind = p_change.
*  eg_txpca001-status     = p_status. MRO
  eg_txpca001-status     = space. "MRO
  eg_txpca001-data       = p_data.
  eg_txpca001-filename   = p_filename.
  eg_txpca001-status1    = p_status.
  eg_txpca001-data1      = p_data1.
  eg_txpca001-filename1  = p_filename1.

  MODIFY ztsdd_txpca001 FROM eg_txpca001.

ENDFORM.                    " F_ATUALIZA_PIS
*&---------------------------------------------------------------------*
*&      Form  F_ICMS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_icms .

  CLEAR: tg_cdhdr   ,
         tg_cdpos   ,
         tg_konh_aux,
         tg_konh_all.

  LOOP AT tg_konh INTO eg_konh WHERE kotabnr = c_382
                                 AND kappl   = c_tx
                                 AND kschl IN rg_mm_tx_000_004_icm1
                                 AND vakey CP '*98'.
    eg_konh_aux-knumh = eg_konh-knumh.
    APPEND: eg_konh     TO tg_konh_all.  " Formato de OBJECTID
    APPEND: eg_konh_aux TO tg_konh_aux.  " Formato original
  ENDLOOP.
  CLEAR: eg_konh.

  CHECK: NOT tg_konh_aux[] IS INITIAL.

  PERFORM: f_busca_modificacao.               " Select na tabela CDHDR
  CHECK NOT tg_cdhdr[] IS INITIAL.

  PERFORM: f_busca_modif_itens,               " Select na tabela CDPOS
           f_separa_changenr.               "

* tg_konh_002 é a KONH que servirá como for all entries na ZTSDD_TXPCA002

  LOOP AT tg_konh_all INTO eg_konh.
    eg_txpca002_aux-shipfrom  = eg_konh-vakey+4(3).
    eg_txpca002_aux-shipto    = eg_konh-vakey+7(3).
    PERFORM: f_date_to_char CHANGING eg_konh-datab.
    eg_txpca002_aux-validfrom = eg_konh-datab.
    APPEND: eg_txpca002_aux TO tg_txpca002_aux.
  ENDLOOP.
  CLEAR: eg_konh.

  SELECT mandt
         shipfrom
         shipto
         rate
         icmskhumh
         validfrom
         udate
         utime
         change_ind
         status
         data
         filename
         status1
         data1
         filename1
    FROM  ztsdd_txpca002
    INTO TABLE tg_txpca002
      FOR ALL ENTRIES IN tg_txpca002_aux
        WHERE shipfrom  =  tg_txpca002_aux-shipfrom
          AND shipto    =  tg_txpca002_aux-shipto
          AND validfrom >= tg_txpca002_aux-validfrom.
  IF sy-subrc EQ 0.

    tg_txpca002_tmp[] = tg_txpca002[].

* Rotina só interessa se o registro não estiver deletado (CHANGE_IND = 'D').
    DELETE tg_txpca002_tmp WHERE change_ind = c_d.
    IF NOT tg_txpca002_tmp[] IS INITIAL.

      SORT: tg_txpca002_tmp BY shipfrom ASCENDING
                               shipto   ASCENDING
                               validfrom ASCENDING.
      LOOP AT tg_cdpos INTO eg_cdpos.
        READ TABLE tg_konh_all INTO eg_konh WITH KEY knumh = eg_cdpos-objectid BINARY SEARCH.
        IF sy-subrc EQ 0.
          PERFORM: f_date_to_char CHANGING eg_konh-datab.
          LOOP AT tg_txpca002_tmp INTO eg_txpca002 WHERE shipfrom  = eg_konh-vakey+4(3)
                                                     AND shipto    = eg_konh-vakey+7(3)
                                                     AND validfrom = eg_konh-datab.

* ZTSDD_TXPCA002 - Marcar como eliminado.
            PERFORM: f_atualiza_icms_cruzado USING eg_txpca002-shipfrom   " SHIPFROM
                                                   eg_txpca002-shipto     " SHIPTO
                                                   eg_txpca002-rate       " RATE
                                                   eg_txpca002-icmskhumh  " ICMSKHUMH
                                                   eg_txpca002-validfrom  " VALIDFROM
                                                   sy-datum               " UDATE
                                                   sy-uzeit               " UTIME
                                                   c_d                    " CHANGE_IND
                                                   eg_txpca002-status     " STATUS
                                                   eg_txpca002-data       " DATA
                                                   eg_txpca002-filename   " FILENAME
                                                   eg_txpca002-status1    " STATUS1
                                                   eg_txpca002-data1      " DATA1
                                                   eg_txpca002-filename1. " FILENAME1
            CLEAR: eg_j_1btxpis.
          ENDLOOP.
          CLEAR: eg_txpca002.
        ENDIF.
      ENDLOOP.
      CLEAR: eg_cdpos.
    ENDIF.
  ENDIF.

*  tg_cdpos_aux[] = tg_cdpos[].

  PERFORM: f_ajusta_cdhdr.

  CHECK: tg_cdhdr_tmp[] IS NOT INITIAL.

  SELECT kappl
         kschl
         aland
         doctyp
         txreg_sf
         txreg_st
         dynkey1
         dynkey2
         dynkey3
         taxgroup
         datbi
         datab
         knumh
      FROM a382
      INTO TABLE tg_a382
      FOR ALL ENTRIES IN tg_cdhdr_tmp
        WHERE   kappl    = c_tx
          AND   kschl IN rg_mm_tx_000_004_icm1
*          AND ( KSCHL IN rG_mm_TX_000_001_PISCOFINS
*          OR    KSCHL IN rG_mm_TX_000_002_COFINS )
          AND   aland    = c_br
          AND   dynkey1  = c_x
          AND   dynkey2  = c_x
          AND   dynkey3  = c_x
          AND   taxgroup = c_98
          AND   knumh    = tg_cdhdr_tmp-knumh.

  IF sy-subrc EQ 0.

    SORT: tg_a382 BY knumh ASCENDING.

    PERFORM: f_ajusta_a382,
             f_calc_icms.

    IF NOT tg_j_1btxic1[] IS INITIAL.

*      SELECT MANDT
*             SHIPTO
*             SHIPFROM
*             RATE
*             ICMSKHUMH
*             VALIDFROM
*             UDATE
*             UTIME
*             CHANGE_IND
*             STATUS
*             DATA
*             FILENAME
*             STATUS1
*             DATA1
*             FILENAME1
*        from  ZTSDD_TXPCA002
*        into table tg_TXPCA002
*          for all entries in tg_J_1BTXIC1
*          where SHIPTO   = tg_J_1BTXIC1-SHIPTO
*            AND SHIPFROM = tg_J_1BTXIC1-SHIPFROM
*            AND rate     = tg_J_1BTXIC1-rate.

*      IF sy-subrc eq 0.

*        LOOP AT tg_TXPCA002 INTO Eg_TXPCA002.
      LOOP AT tg_j_1btxic1 INTO eg_j_1btxic1.
        LOOP AT tg_a382 INTO eg_a382 WHERE txreg_sf = eg_j_1btxic1-shipfrom
                                       AND txreg_st = eg_j_1btxic1-shipto.
          CLEAR: eg_txpca002.
          READ TABLE tg_txpca002 INTO eg_txpca002 WITH KEY shipfrom = eg_a382-txreg_sf
                                                           shipto   = eg_a382-txreg_st.
          IF sy-subrc EQ 0.
            vg_change = c_a.
          ELSE.
            vg_change = c_i.
          ENDIF.

          READ TABLE tg_cdhdr_tmp INTO eg_cdhdr
               WITH KEY knumh = eg_a382-knumh BINARY SEARCH.
          IF sy-subrc EQ 0.

* ZTSDD_TXPCA002
            PERFORM: f_atualiza_icms_cruzado USING eg_j_1btxic1-shipfrom  " SHIPFROM
                                                   eg_j_1btxic1-shipto    " SHIPTO
                                                   eg_j_1btxic1-rate      " RATE
                                                   eg_a382-knumh          " ICMSKHUMH
                                                   eg_j_1btxic1-validfrom " VALIDFROM
                                                   eg_cdhdr-udate         " UDATE
                                                   eg_cdhdr-utime         " UTIME
                                                   vg_change              " CHANGE_IND
                                                   eg_txpca002-status     " STATUS
                                                   eg_txpca002-data       " DATA
                                                   eg_txpca002-filename   " FILENAME
                                                   eg_txpca002-status1    " STATUS1
                                                   eg_txpca002-data1      " DATA1
                                                   eg_txpca002-filename1. " FILENAME1

          ENDIF.

        ENDLOOP.
        CLEAR: eg_a382.

      ENDLOOP.
      CLEAR: eg_j_1btxic1.

*        ENDLOOP.
*        CLEAR: Eg_TXPCA002.

*      ENDIF.

    ENDIF.

  ENDIF.

*  ENDIF.

ENDFORM.                    " F_ICMS
*&---------------------------------------------------------------------*
*&      Form  F_SELECT_CDHDR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_TG_CDHDR  text
*      -->P_TG_A346_AUX  text
*----------------------------------------------------------------------*
FORM f_select_cdhdr  TABLES p_table STRUCTURE cdhdr
                                "Introduzir nome correto para <...>
*                              P_TG_A346_AUX STRUCTURE Ty_A346_AUX.
                     USING  p_tabname TYPE any .

*  FIELD-SYMBOLS: <FS_TABNAME> type table.
*
*  assign (P_TABNAME) TO <FS_TABNAME>. " A346
*
*  DATA: TG_TESTE TYPE TABLE OF TY_CDHDR_AUX.
*
*  TG_TESTE[] = <FS_TABNAME>.
*
*      select MANDANT
*             OBJECTCLAS
*             OBJECTID
*             CHANGENR
*             USERNAME
*             UDATE
*             UTIME
*             TCODE
*             PLANCHNGNR
*             ACT_CHNGNO
*             WAS_PLANND
*             CHANGE_IND
*             LANGU
*             VERSION
*        FROM CDHDR
*        INTO TABLE P_TABLE
*          FOR ALL ENTRIES IN TG_TESTE
*          WHERE OBJECTCLAS = c_conda
*            and OBJECTID   = TG_TESTE-knumh
*            and UDATE      in s_data.

ENDFORM.                    " F_SELECT_CDHDR
*&---------------------------------------------------------------------*
*&      Form  F_ATUALIZA_ICMS_CRUZADO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_CHANGE  text
*      -->P_DATUM   text
*      -->P_UZEIT   text
*----------------------------------------------------------------------*
FORM f_atualiza_icms_cruzado  USING p_shipfrom  TYPE j_1btxic1-shipfrom
                                    p_shipto    TYPE j_1btxic1-shipto
                                    p_rate      TYPE j_1btxic1-rate
                                    p_icmskhumh TYPE ztsdd_txpca002-icmskhumh
                                    p_validfrom TYPE j_1btxic1-validfrom
                                    p_datum     TYPE sy-datum
                                    p_uzeit     TYPE sy-uzeit
                                    p_change    TYPE cdchngindh
                                    p_status    TYPE zesd_status
                                    p_data      TYPE ztsdd_txpca002-data
                                    p_filename  TYPE ztsdd_txpca002-filename
                                    p_status1   TYPE ztsdd_txpca002-status1
                                    p_data1     TYPE ztsdd_txpca002-data1
                                    p_filename1 TYPE ztsdd_txpca002-filename1.

  eg_txpca002-mandt      = sy-mandt.
  eg_txpca002-shipfrom   = p_shipfrom.
  eg_txpca002-shipto     = p_shipto.
  eg_txpca002-rate       = p_rate.
  eg_txpca002-icmskhumh  = p_icmskhumh.
  eg_txpca002-validfrom  = p_validfrom.
  eg_txpca002-udate      = p_datum.
  eg_txpca002-utime      = p_uzeit.
  eg_txpca002-change_ind = p_change.
  eg_txpca002-status     = p_status.
  eg_txpca002-data       = p_data.
  eg_txpca002-filename   = p_filename.
  eg_txpca002-status1    = p_status1.
  eg_txpca002-data1      = p_data1.
  eg_txpca002-filename1  = p_filename1.

  MODIFY ztsdd_txpca002 FROM eg_txpca002.

ENDFORM.                    " F_ATUALIZA_ICMS_CRUZADO
*&---------------------------------------------------------------------*
*&      Form  F_ICMS_IPI
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_icms_ipi.

  CLEAR: tg_cdhdr, tg_cdhdr[],
         tg_cdpos, tg_cdpos[],
         tg_konh_all , tg_konh_all[],
         tg_konh_aux , tg_konh_aux[].

* Registros de condição válidos para IPI (J_1BTXIP1)
  LOOP AT tg_konh INTO eg_konh WHERE kotabnr = c_346
                                 AND kappl   = c_tx
                                 AND kschl IN rg_mm_tx_000_005_ipi
                                 AND vakey CP '*97'.
    eg_konh_aux-knumh = eg_konh-knumh.
    APPEND: eg_konh     TO tg_konh_all.  " Formato de OBJECTID
    APPEND: eg_konh_aux TO tg_konh_aux.  " Formato original
  ENDLOOP.
  CLEAR: eg_konh.

  CHECK: NOT tg_konh_aux[] IS INITIAL.

  PERFORM: f_busca_modificacao.               " Select na tabela CDHDR
  CHECK NOT tg_cdhdr[] IS INITIAL.

  PERFORM: f_busca_modif_itens,               " Select na tabela CDPOS
           f_separa_changenr.               "

* tg_konh_002 é a KONH que servirá como for all entries na ZTSDD_TXPCA002

  LOOP AT tg_konh_all INTO eg_konh.
    eg_txpca003_aux-ncm       = eg_konh-vakey+3(20).
    PERFORM: f_date_to_char CHANGING eg_konh-datab.
    eg_txpca003_aux-validfrom = eg_konh-datab.
    APPEND: eg_txpca003_aux TO tg_txpca003_aux.
  ENDLOOP.
  CLEAR: eg_konh.


  SELECT mandt      ncm
         rate       validfrom
         ncm2       text1
         udate      utime
         change_ind status
         data       filename
         status1    data1
         filename1
    FROM  ztsdd_txpca003
    INTO TABLE tg_txpca003
      FOR ALL ENTRIES IN tg_txpca003_aux
      WHERE ncm       = tg_txpca003_aux-ncm
        AND validfrom = tg_txpca003_aux-validfrom.
  IF sy-subrc EQ 0.

    tg_txpca003_tmp[] = tg_txpca003[].

* Rotina só interessa se o registro não estiver deletado (CHANGE_IND = 'D').
    DELETE tg_txpca003_tmp WHERE change_ind = c_d.
    IF NOT tg_txpca003_tmp[] IS INITIAL.

      SORT: tg_txpca003_tmp BY ncm ASCENDING
                         validfrom ASCENDING.

      LOOP AT tg_cdpos INTO eg_cdpos.
        READ TABLE tg_konh_all INTO eg_konh WITH KEY knumh = eg_cdpos-objectid BINARY SEARCH.
        IF sy-subrc EQ 0.
          PERFORM: f_date_to_char CHANGING eg_konh-datab.
          READ TABLE tg_txpca003_tmp INTO eg_txpca003
               WITH KEY ncm = eg_konh-vakey+3(20)
                  validfrom = eg_konh-datab BINARY SEARCH.
          IF sy-subrc EQ 0.

* Atualiza tabela 'ZTSDD_TXPCA003'
            PERFORM: f_atualiza_mercosul USING eg_txpca003-ncm        " NCM
                                               eg_txpca003-rate       " RATE
                                               eg_txpca003-validfrom  " VALIDFROM
                                               eg_txpca003-ncm2       " NCM2
                                               eg_txpca003-text1      " TEXT1
                                               sy-datum               " UDATE
                                               sy-uzeit               " UTIME
                                               c_d                    " CHANGE_IND
                                               eg_txpca003-status     " STATUS
                                               eg_txpca003-data       " DATA
                                               eg_txpca003-filename   " FILENAME
                                               eg_txpca003-status1    " STATUS1
                                               eg_txpca003-data1      " DATA1
                                               eg_txpca003-filename1. " FILENAME1
          ENDIF.
        ENDIF.
      ENDLOOP.
      CLEAR: eg_cdpos.
    ENDIF.

** Se não existir, enviar 'I' para o campo
*  ELSE.
*    PERFORM: F_MONTA_MERCOSUL USING C_I.

  ENDIF.

  SELECT kappl
         kschl
         aland
         dynkey1
         dynkey2
         dynkey3
         taxgroup
         datbi
         datab
         knumh
    FROM a346
    INTO TABLE tg_a346_ipi
    FOR ALL ENTRIES IN tg_konh_all
      WHERE kappl = c_tx
        AND kschl IN rg_mm_tx_000_005_ipi
        AND aland    = c_br
        AND dynkey3  = c_x
        AND taxgroup = c_97
        AND knumh = tg_konh_all-knumh.
  IF sy-subrc EQ 0.

*sort TG_A346_IPI by

    CLEAR: tg_a346_aux, tg_a346_aux[].
*    tg_a346_aux[] = tg_a346_ipi[].

*Ajusta a tabela

    LOOP AT tg_a346_ipi INTO eg_a346.
      eg_a346-nbmcode = eg_a346-dynkey1.
      PERFORM: f_date_to_char CHANGING eg_a346-datab.
      eg_a346-datab_aux = eg_a346-datab.
      MODIFY tg_a346_ipi FROM eg_a346 INDEX sy-tabix.
    ENDLOOP.

    SELECT nbmcode
           validfrom
           rate
      FROM j_1btxip1
      INTO TABLE tg_j_1btxip1
        FOR ALL ENTRIES IN tg_a346_ipi
        WHERE nbmcode   = tg_a346_ipi-nbmcode
          AND validfrom = tg_a346_ipi-datab_aux. " Corrigir.

    IF sy-subrc EQ 0.
      SORT: tg_j_1btxip1 BY nbmcode ASCENDING.
      SELECT spras
             land1
             steuc
             text1
*                     TEXT2
*                     TEXT3
*                     TEXT4
*                     TEXT5
        FROM t604n
        INTO TABLE tg_t604n
          FOR ALL ENTRIES IN tg_j_1btxip1
            WHERE spras = c_p
              AND land1 = c_br
              AND steuc = tg_j_1btxip1-nbmcode.
      IF sy-subrc EQ 0.
        PERFORM: f_monta_mercosul USING c_a. "c_u. " Atualiza ZTSDd_TXPCA003
      ENDIF.
    ENDIF.
  ENDIF.

ENDFORM.                    " F_ICMS_IPI
*&---------------------------------------------------------------------*
*&      Form  F_BUSCA_CONDICOES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_busca_condicoes .

* Dados para geração do ICMS. Cruzadas = J_1BTXIC1.
  SELECT knumh
         kotabnr
         kappl
         kschl
         vakey
         datab
         datbi
    FROM konh
*    into table tg_konh_icms
    INTO TABLE tg_konh
      WHERE ( kotabnr = c_382 OR
              kotabnr = c_346 OR
              kotabnr = c_348 )          " MVA -> ICMS-ST
        AND ( kappl   = c_tx OR
              kappl   = c_v )
        AND ( kschl IN rg_mm_tx_000_001_piscofins OR
              kschl IN rg_mm_tx_000_005_ipi       OR
              kschl IN rg_mm_tx_000_006_regra_icmsst OR
              kschl IN rg_mm_tx_000_007_regra_icms OR
              kschl IN rg_mm_tx_000_013_icms_venda )
        AND ( vakey LIKE '%44' OR
              vakey LIKE '%45' OR
              vakey LIKE '%85' OR   " Para MM_TX_000_013_ICMS_VENDA
              vakey LIKE '%87' OR
              vakey LIKE '%98' OR
              vakey LIKE '%97' )
*        AND datbi   >= s_data-low. MRO
            AND datbi   >= p_data.  "MRO
*         AND datab   >= p_data.  "MRO

* MVA -> ICMS-ST
  SELECT knumh
         kotabnr
         kappl
         kschl
         vakey
         datab
         datbi
    FROM konh
    APPENDING TABLE tg_konh
      WHERE kotabnr = c_348          " MVA -> ICMS-ST
        AND kappl   = c_tx
        AND kschl IN rg_mm_tx_000_006_regra_icmsst
*        AND datbi   >= s_data-low. MRO
        AND datbi   >= p_data. "MRO
*             AND datab   >= p_data.  "MRO

  SORT: tg_konh BY knumh DESCENDING kotabnr kappl kschl vakey.

  DELETE ADJACENT DUPLICATES FROM tg_konh COMPARING kotabnr kappl kschl vakey.

  SORT: tg_konh BY knumh.

ENDFORM.                    " F_BUSCA_CONDICOES
*&---------------------------------------------------------------------*
*&      Form  F_REPROCESSAMENTO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_reprocessamento .

  DELETE FROM ztsdd_txpca003 WHERE udate EQ sy-datum.
  COMMIT WORK.

  DELETE FROM ztsdd_txpca004 WHERE udate EQ sy-datum
                               AND change_ind <> c_d.
  COMMIT WORK.

  SELECT mandt      nbmcode
         shipfrom   shipto
         validfrom  nbmcode2
         letra      rate
         knumh      rate1
         knumh1     base
         rate3      red
         cst        rate2
         base1      rate4
         red1       cst1
         udate      utime
         change_ind status
         data       filename
         status1    data1
    FROM ztsdd_txpca004
    INTO TABLE tg_txpca004
      WHERE status1 = c_5.

ENDFORM.                    " F_REPROCESSAMENTO
*&---------------------------------------------------------------------*
*&      Form  F_ATUALIZA_ICMS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_SHIPTO     text
*      -->P_SHIPFROM   text
*      -->P_RATE       text
*      -->P_KNUMH      text
*      -->P_VALIDFROM  text
*      -->P_DATUM      text
*      -->P_UZEIT      text
*      -->P_CHANGE     text
*      -->P_STATUS     text
*      -->P_STATUS1    text
*----------------------------------------------------------------------*
FORM f_atualiza_icms  USING p_nbmcode   TYPE ztsdd_txpca004-nbmcode
                            p_shipfrom  TYPE j_1btxic1-shipfrom
                            p_shipto    TYPE j_1btxic1-shipto
                            p_validfrom TYPE j_1btxic1-validfrom
                            p_nbmcode2  TYPE ztsdd_txpca004-nbmcode2
                            p_letra     TYPE ztsdd_txpca004-letra
                            p_rate      TYPE j_1btxic1-rate
                            p_knumh1    TYPE ztsdd_txpca004-knumh1
                            p_base      TYPE ztsdd_txpca004-base
                            p_rate3     TYPE ztsdd_txpca004-rate3
                            p_red       TYPE ztsdd_txpca004-red
                            p_cst       TYPE ztsdd_txpca004-cst
                            p_rate2     TYPE ztsdd_txpca004-rate2
                            p_base1     TYPE ztsdd_txpca004-base1
                            p_rate4     TYPE ztsdd_txpca004-rate4
                            p_red1      TYPE ztsdd_txpca004-red1
                            p_cst1      TYPE ztsdd_txpca004-cst1
                            p_knumh     TYPE a382-knumh
                            p_rate1     TYPE ztsdd_txpca004-rate1
                            p_datum     TYPE sy-datum
                            p_uzeit     TYPE sy-uzeit
                            p_change    TYPE cdchngindh
                            p_status    TYPE zesd_status
                            p_status1   TYPE zesd_status.

  eg_txpca004-mandt      = sy-mandt.
  eg_txpca004-nbmcode    = p_nbmcode.
  eg_txpca004-shipfrom   = p_shipfrom.
  eg_txpca004-shipto     = p_shipto.
  eg_txpca004-validfrom  = p_validfrom.
  eg_txpca004-nbmcode2   = p_nbmcode2.
  eg_txpca004-letra      = p_letra.
  eg_txpca004-rate       = p_rate.
  eg_txpca004-knumh1     = p_knumh1.
  eg_txpca004-base       = p_base.
  eg_txpca004-rate3      = p_rate3.
  eg_txpca004-red        = p_red.
  eg_txpca004-cst        = p_cst.
  eg_txpca004-rate2      = p_rate2.
  eg_txpca004-base1      = p_base1.
  eg_txpca004-rate4      = p_rate4.
  eg_txpca004-red1       = p_red1.
  eg_txpca004-cst1       = p_cst1.
  eg_txpca004-knumh      = p_knumh.
  eg_txpca004-rate1      = p_rate1.
  eg_txpca004-udate      = p_data. "p_datum.
  eg_txpca004-utime      = p_uzeit.
  eg_txpca004-change_ind = p_change.
*  eg_txpca004-status     = p_status. "MRO
  eg_txpca004-status     = space. "MRO
*  eg_txpca004-status1    = p_status1. "MRO
  eg_txpca004-status1    = p_status.


*  MODIFY ztsdd_txpca004 FROM eg_txpca004.
*  COMMIT WORK.

*  READ TABLE tg_txpca004_new INTO eg_txpca004_old
*                         WITH KEY nbmcode = eg_txpca004-nbmcode
*                                  shipfrom = eg_txpca004-shipfrom
*                                  shipto = eg_txpca004-shipto
*                                  validfrom = eg_txpca004-validfrom.
*
*  IF sy-subrc = 0.
*    MODIFY tg_txpca004_new FROM eg_txpca004 INDEX sy-tabix.
*  ELSE.
*    APPEND eg_txpca004 TO tg_txpca004_new.
*  ENDIF.

  APPEND eg_txpca004 TO tg_txpca004_new.

*  CLEAR eg_txpca004.

*  IF p_status = '1'.
*
**Verifica se já existe um registro com a mesma chave e com status1 = 2
*    SELECT SINGLE * FROM ztsdd_txpca004
*      INTO eg_txpca004_old
*     WHERE nbmcode   EQ eg_txpca004-nbmcode
*       AND shipfrom  EQ eg_txpca004-shipfrom
*       AND shipto    EQ eg_txpca004-shipto
*       AND validfrom EQ eg_txpca004-validfrom
*       AND status1   EQ '2'.
*
*    IF sy-subrc <> 0.
*      MODIFY ztsdd_txpca004 FROM eg_txpca004.
*    ELSE.
**Verifica se os dados são iguais
*      IF eg_txpca004-nbmcode  = eg_txpca004_old-nbmcode AND
*          eg_txpca004-shipfrom  = eg_txpca004_old-shipfrom  AND
*          eg_txpca004-shipto  = eg_txpca004_old-shipto  AND
*          eg_txpca004-validfrom  = eg_txpca004_old-validfrom AND
*          eg_txpca004-nbmcode2  = eg_txpca004_old-nbmcode2  AND
*          eg_txpca004-letra  = eg_txpca004_old-letra AND
*          eg_txpca004-rate  = eg_txpca004_old-rate  AND
*          eg_txpca004-knumh  = eg_txpca004_old-knumh AND
*          eg_txpca004-rate1  = eg_txpca004_old-rate1 AND
*          eg_txpca004-knumh1  = eg_txpca004_old-knumh1  AND
*          eg_txpca004-base  = eg_txpca004_old-base  AND
*          eg_txpca004-rate3  = eg_txpca004_old-rate3 AND
*          eg_txpca004-red  = eg_txpca004_old-red AND
*          eg_txpca004-cst  = eg_txpca004_old-cst AND
*          eg_txpca004-rate2  = eg_txpca004_old-rate2 AND
*          eg_txpca004-base1  = eg_txpca004_old-base1 AND
*          eg_txpca004-rate4  = eg_txpca004_old-rate4 AND
*          eg_txpca004-red1  = eg_txpca004_old-red1  AND
*          eg_txpca004-cst1  = eg_txpca004_old-cst1.
*
**Não gravar o registro novamente
*      ELSE.
*
*        MODIFY ztsdd_txpca004 FROM eg_txpca004.
*      ENDIF.
*
*    ENDIF.
*  ELSE.
*
*    MODIFY ztsdd_txpca004 FROM eg_txpca004.
*  ENDIF.
*
*  COMMIT WORK.

ENDFORM.                    " F_ATUALIZA_ICMS
*&---------------------------------------------------------------------*
*&      Form  F_ATUALIZA_MERCOSUL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_NBMCODE    text
*      -->P_RATE       text
*      -->P_VALIDFROM  text
*      -->P_TEXT1      text
*      -->P_UDATE      text
*      -->P_UTIME      text
*      -->P_CHANGE     text
*      -->P_DATA       text
*      -->P_STATUS     text
*      -->P_FILENAME   text
*----------------------------------------------------------------------*
FORM f_atualiza_mercosul  USING p_ncm       TYPE steuc
                                p_rate      TYPE j_1btxrate
                                p_validfrom TYPE j_1btxdatf
                                p_ncm2      TYPE steuc
                                p_text1     TYPE bezei60
                                p_udate     TYPE cddatum
                                p_utime     TYPE cduzeit
                                p_change    TYPE cdchngindh
                                p_status    TYPE zesd_status
                                p_data      TYPE cpcretime
                                p_filename  TYPE localfile
                                p_status1   TYPE zesd_status
                                p_data1     TYPE cpcretime
                                p_filename1 TYPE localfile.

  eg_txpca003-mandt      = sy-mandt.
  eg_txpca003-ncm        = p_ncm.
  eg_txpca003-rate       = p_rate.
  eg_txpca003-validfrom  = p_validfrom.
  eg_txpca003-ncm2       = p_ncm2.
  eg_txpca003-text1      = p_text1.
  eg_txpca003-udate      = p_udate.
  eg_txpca003-utime      = p_utime.
  eg_txpca003-change_ind = p_change.
*  eg_txpca003-status     = p_status. MRO
  eg_txpca003-status     = space. "MRO
  eg_txpca003-data       = p_data.
  eg_txpca003-filename   = p_filename.
  eg_txpca003-status1    = p_status1.
  eg_txpca003-data1      = p_data1.
  eg_txpca003-filename1  = p_filename1.

  MODIFY ztsdd_txpca003 FROM eg_txpca003.

ENDFORM.                    " F_ATUALIZA_MERCOSUL
*&---------------------------------------------------------------------*
*&      Form  F_MONTA_MERCOSUL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_monta_mercosul USING p_change TYPE cdchngindh.

  SORT: tg_cdhdr    BY objectid ASCENDING,
        tg_a346_ipi BY dynkey1  ASCENDING.

  LOOP AT tg_t604n INTO eg_t604n.
*    READ TABLE tg_j_1btxip1 INTO eg_j_1btxip1
*         WITH KEY nbmcode = eg_t604n-steuc BINARY SEARCH.
*    IF sy-subrc EQ 0.
    LOOP AT tg_j_1btxip1 INTO eg_j_1btxip1
                         WHERE nbmcode = eg_t604n-steuc.

      READ TABLE tg_a346_ipi INTO eg_a346
           WITH KEY dynkey1 = eg_j_1btxip1-nbmcode " BINARY SEARCH.
                    datab_aux = eg_j_1btxip1-validfrom.

      IF sy-subrc EQ 0.
        READ TABLE tg_konh_all INTO eg_konh
             WITH KEY knumh = eg_a346-knumh BINARY SEARCH.
        IF sy-subrc EQ 0.
          eg_konh_aux-knumh = eg_konh-knumh.
          READ TABLE tg_cdhdr INTO eg_cdhdr
               WITH KEY objectid = eg_konh_aux-knumh BINARY SEARCH.
          IF sy-subrc EQ 0.
            PERFORM: f_conv_nbmcode USING eg_j_1btxip1-nbmcode
                                 CHANGING vg_nbmcode.
            READ TABLE tg_txpca003 INTO eg_txpca003
                 WITH KEY ncm = eg_j_1btxip1-nbmcode
                         rate = eg_j_1btxip1-rate
                    validfrom = eg_j_1btxip1-validfrom BINARY SEARCH.
            IF sy-subrc EQ 0.
* Se já existir um registro atualizar o registro e incluir o campo ZSTATUS1 = 1
* e o campo ZCHANGE_IND = U ou D se for eliminado.
              PERFORM: f_atualiza_mercosul USING eg_j_1btxip1-nbmcode    " NCM
                                                 eg_txpca003-rate        " RATE
                                                 eg_txpca003-validfrom   " VALIDFROM
                                                 vg_nbmcode              " NCM2
                                                 eg_t604n-text1          " TEXT1
                                                 eg_cdhdr-udate          " UDATE
                                                 eg_cdhdr-utime          " UTIME
                                                 p_change                " CHANGE_IND
                                                 c_a                     " STATUS
                                                 eg_txpca003-data        " DATA
                                                 eg_txpca003-filename    " FILENAME
                                                 eg_txpca003-status1     " STATUS1
                                                 eg_txpca003-data1       " DATA1
                                                 eg_txpca003-filename1.  " FILENAME1
              CLEAR: eg_txpca003.

            ELSE.
* Se não existir o registro = inserir com campo zstatus1 = 1 e campo ZCHANGE_IND=I.
              PERFORM: f_atualiza_mercosul USING eg_j_1btxip1-nbmcode   " NCM
                                                 eg_j_1btxip1-rate      " RATE
                                                 eg_j_1btxip1-validfrom " VALIDFROM
                                                 vg_nbmcode             " NCM2
                                                 eg_t604n-text1         " TEXT1
                                                 eg_cdhdr-udate         " UDATE
                                                 eg_cdhdr-utime         " UTIME
                                                 c_i                    " CHANGE_IND
                                                 ' '                    " STATUS
                                                 ''                     " DATA
                                                 ''                     " FILENAME
                                                 c_1                     " STATUS1
                                                 ''                     " DATA1
                                                 ''.                    " FILENAME1
              CLEAR: eg_txpca003.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
*    ENDIF.
    ENDLOOP.
  ENDLOOP.
  CLEAR: eg_t604n.

ENDFORM.                    " F_MONTA_MERCOSUL
*&---------------------------------------------------------------------*
*&      Form  F_MVA_ICMS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_mva_icms.

  CLEAR: tg_cdhdr    , tg_cdhdr[]   ,
         tg_cdpos    , tg_cdpos[]   ,
         tg_konh_all , tg_konh_all[],
         tg_konh_aux , tg_konh_aux[].

  SORT: tg_j_1btxic3_to BY shipfrom ASCENDING
                           shipto   ASCENDING
                           gruop    ASCENDING
                           value    ASCENDING.

* Registros de condição válidos para IPI (J_1BTXIP1)
  LOOP AT tg_konh INTO eg_konh WHERE kotabnr = c_348
                                 AND kappl   = c_tx
                                 AND kschl IN rg_mm_tx_000_006_regra_icmsst
                                 AND vakey CP '*45'.
    eg_konh_aux-knumh = eg_konh-knumh.
    APPEND: eg_konh     TO tg_konh_all.  " Formato de OBJECTID
    APPEND: eg_konh_aux TO tg_konh_aux.  " Formato original
  ENDLOOP.
  CLEAR: eg_konh.

  CHECK: NOT tg_konh_aux[] IS INITIAL.

  PERFORM: f_busca_modificacao.             " Select CDHDR
  CHECK NOT tg_cdhdr[] IS INITIAL.

  PERFORM: f_busca_modif_itens.             " Select CDPOS

  LOOP AT tg_konh_all INTO eg_konh.
    eg_txpca004_aux-shipfrom  = eg_konh-vakey+3(3)  .
    eg_txpca004_aux-shipto    = eg_konh-vakey+6(3)  .
    eg_txpca004_aux-nbmcode   = eg_konh-vakey+12(15).
    PERFORM: f_date_to_char CHANGING eg_konh-datab.
    eg_txpca004_aux-validfrom = eg_konh-datab       .
    eg_txpca004_aux-knumh     = eg_konh-knumh       .
    APPEND: eg_txpca004_aux TO tg_txpca004_aux.
  ENDLOOP.
  CLEAR: eg_konh.

  SORT: tg_txpca004_aux BY shipto    ASCENDING
                           shipfrom  ASCENDING
                           nbmcode   ASCENDING
                           validfrom ASCENDING.

  SELECT mandt      nbmcode
         shipfrom   shipto
         validfrom  nbmcode2
         letra      rate
         knumh      rate1
         knumh1     base
         rate3      red
         cst        rate2
         base1      rate4
         red1       cst1
         udate      utime
         change_ind status
         data       filename
         status1    data1
    FROM  ztsdd_txpca004
    INTO TABLE tg_txpca004
      FOR ALL ENTRIES IN tg_txpca004_aux
      WHERE shipto    =  tg_txpca004_aux-shipto
        AND shipfrom  =  tg_txpca004_aux-shipfrom
        AND validfrom >= tg_txpca004_aux-validfrom.

  IF sy-subrc EQ 0.

    tg_txpca004_tmp[] = tg_txpca004[].

* Rotina só interessa se o registro não estiver deletado (CHANGE_IND = 'D').
    DELETE tg_txpca004_tmp WHERE change_ind = c_d.
    IF NOT tg_txpca004_tmp[] IS INITIAL.

      SORT: tg_txpca004_tmp BY nbmcode ASCENDING
                              shipfrom ASCENDING
                                shipto ASCENDING
                             validfrom ASCENDING.

      LOOP AT tg_cdpos INTO eg_cdpos.
        READ TABLE tg_konh_all INTO eg_konh WITH KEY knumh = eg_cdpos-objectid BINARY SEARCH.
        IF sy-subrc EQ 0.
          PERFORM: f_date_to_char CHANGING eg_konh-datab.
          READ TABLE tg_txpca004_tmp INTO eg_txpca004
               WITH KEY nbmcode = eg_konh-vakey+12(15)
                       shipfrom = eg_konh-vakey+3(3)
                       shipto   = eg_konh-vakey+6(3)
                      validfrom = eg_konh-datab BINARY SEARCH.
          IF sy-subrc EQ 0.

* Atualiza tabela 'ZTSDD_TXPCA004'
            PERFORM: f_atualiza_icms USING eg_txpca004-nbmcode    " NBMCODE
                                           eg_txpca004-shipfrom   " Shipfrom
                                           eg_txpca004-shipto     " Shipto
                                           eg_txpca004-validfrom  " Validfrom
                                           eg_txpca004-nbmcode2   " NBMCODE2
                                           eg_txpca004-letra      " Letra
                                           eg_txpca004-rate       " Rate
                                           eg_txpca004-knumh1     " Knumh1
                                           eg_txpca004-base       " Base
                                           eg_txpca004-rate3      " RATE3
                                           eg_txpca004-red        " RED
                                           eg_txpca004-cst        " CST
                                           eg_txpca004-rate2      " RATE2
                                           eg_txpca004-base1      " Base1
                                           eg_txpca004-rate4      " Rate4
                                           eg_txpca004-red1       " Red1
                                           eg_txpca004-cst        " CST1
                                           eg_txpca004-knumh      " KNUMH
                                           eg_txpca004-rate1      " Rate1
                                           sy-datum               " Udate
                                           sy-uzeit               " Utime
                                           c_d                    " Change_ind
                                           c_1                    " Status
                                           space.                 " Status1
          ENDIF.
        ENDIF.
      ENDLOOP.
      CLEAR: eg_cdpos.
    ENDIF.

  ENDIF.

  PERFORM: f_ajusta_cdhdr.

  SELECT kappl    kschl
         aland    txreg_sf
         txreg_st xsubt
         dynkey1  dynkey2
         dynkey3  taxgroup
         datbi    datab
         knumh
    FROM a348
    INTO TABLE tg_a348
      FOR ALL ENTRIES IN tg_cdhdr_tmp
      WHERE kappl    = c_tx
        AND kschl IN rg_mm_tx_000_006_regra_icmsst
        AND aland    = c_br
        AND dynkey2  = c_x
        AND dynkey3  = c_x
        AND taxgroup = c_45
        AND knumh    = tg_cdhdr_tmp-knumh.

  IF sy-subrc EQ 0.

    SORT: tg_a348 BY knumh ASCENDING.

    PERFORM: f_ajusta_a348.

    SELECT land1
           shipfrom
           shipto
           gruop
           value
           value2
           value3
           stgrp
           validfrom
           validto
           rate
      FROM j_1btxst3
      INTO TABLE tg_j_1btxst3
        FOR ALL ENTRIES IN tg_a348_tmp
        WHERE land1     = tg_a348_tmp-aland
          AND shipfrom  = tg_a348_tmp-txreg_sf
          AND shipto    = tg_a348_tmp-txreg_st
          AND gruop     = tg_a348_tmp-taxgroup
          AND value     = tg_a348_tmp-dynkey1    "MRO
          AND validfrom = tg_a348_tmp-datab_aux.

    IF sy-subrc EQ 0.

      SORT: tg_j_1btxst3 BY land1
                            value
                            gruop
                            shipto
                            shipfrom

                            .

      PERFORM: f_juros_icms. " Select J_1BTXIC3

*      SELECT LAND1
*             SHIPFROM
*             SHIPTO
*             GRUOP
*             VALUE
*             VALUE2
*             VALUE3
*             VALIDFROM
*             VALIDTO
*             rate
*             base
*             taxlaw
*        FROM J_1BTXIC3
*        INTO TABLE TG_J_1BTXIC3
*          FOR ALL ENTRIES IN TG_J_1BTXST3
*          WHERE LAND1     = TG_J_1BTXST3-LAND1
*            AND SHIPFROM  = TG_J_1BTXST3-SHIPFROM
*            AND SHIPTO    = TG_J_1BTXST3-SHIPTO
*            AND GRUOP     = TG_J_1BTXST3-GRUOP
*            AND VALUE     = TG_J_1BTXST3-VALUE
*            and VALIDFROM <= TG_J_1BTXST3-VALIDFROM
*            AND VALIDTO   >= TG_J_1BTXST3-VALIDTO.

      IF NOT tg_j_1btxic3[] IS INITIAL.
*
*        IF NOT TG_J_1BTXIC3[] IS INITIAL.

* Busca lei fiscal ICMS.
        PERFORM: f_lei_fiscal_icms.             " J_1BATL1
        CHECK tg_j_1btxic3[] IS NOT INITIAL.

*        SELECT TAXLAW
*               TAXSIT
*          FROM J_1BATL1
*          INTO TABLE TG_J_1BATL1
*            FOR ALL ENTRIES IN TG_J_1BTXIC3
*            WHERE TAXLAW = TG_J_1BTXIC3-TAXLAW.

        IF NOT tg_j_1batl1[] IS INITIAL.
          SORT: tg_j_1batl1 BY taxlaw ASCENDING.
          tg_j_1batl1_aux[] = tg_j_1batl1[].

* 10 = Sujeito a ICMS + Substituição Tributária
* 90 = Outro(s).

* Exit de conversão para 2 caracteres:
*          DELETE TG_J_1BATL1_AUX where taxsit ne c_1
*                                   and taxsit ne c_9.

          PERFORM: f_calculo_icms.       " J_1BTXIC1

          IF NOT tg_j_1btxic1[] IS INITIAL.

            SORT: tg_j_1btxic1 BY land1     ASCENDING
                                  shipfrom  ASCENDING
                                  shipto    ASCENDING
                                  validfrom ASCENDING.

*            clear: tg_J_1BTXST3, tg_J_1BTXST3[].
            LOOP AT tg_j_1btxst3 INTO eg_j_1btxst3.

              PERFORM: f_conv_nbmcode USING eg_j_1btxst3-value
                                   CHANGING vg_nbmcode.

* Se existe na J_1BTXIC3, existe na J_1BTXST3 pois é utilizado 'FOR ALL ENTRIES'.
              LOOP AT tg_j_1btxic3 INTO eg_j_1btxic3
                                    WHERE land1     = eg_j_1btxst3-land1
                                      AND shipfrom  = eg_j_1btxst3-shipfrom
                                      AND shipto    = eg_j_1btxst3-shipto
                                      AND gruop     = eg_j_1btxst3-gruop
                                      AND value     = eg_j_1btxst3-value.
*                                    AND validto <= eg_j_1btxst3-validfrom
*                                    AND validfrom  >= eg_j_1btxst3-validto.


                CASE eg_j_1btxic3-base.

                  WHEN '100'.
                    vg_rate = eg_j_1btxic3-rate.
                    PERFORM: f_compara_aliquota USING vg_rate.

                  WHEN OTHERS.
* Se o Rate for <> 100, usar fórmula abaixo:
* Formula para tributação final (campo ZRATE1)= (Rate * BASE)/100.

                    vg_rate = ( eg_j_1btxic3-rate * eg_j_1btxic3-base ) / 100.
                    PERFORM: f_compara_aliquota USING vg_rate.

                ENDCASE.
                CLEAR: eg_j_1btxic1.
              ENDLOOP.

              IF sy-subrc <> 0.
* Pg. 32 espec. funcional.
* *Condição para geração de log Z01 (letra fica em branco)
* Existe uma linha na tabela J_1BTXST3,
* porém não existe uma chave na tabela J_1BTXIC3 referente.

                CLEAR: eg_txpca004_aux, eg_a348.
                READ TABLE tg_txpca004_aux INTO eg_txpca004_aux WITH KEY shipto    = eg_j_1btxst3-shipto
                                                                         shipfrom  = eg_j_1btxst3-shipfrom
                                                                         nbmcode   = eg_j_1btxst3-value
                                                                         validfrom = eg_j_1btxst3-validfrom.
                IF sy-subrc EQ 0.

                  READ TABLE tg_a348 INTO eg_a348 WITH KEY knumh = eg_txpca004_aux-knumh.
                  IF sy-subrc EQ 0.
                    READ TABLE tg_konh_aux INTO eg_konh_aux WITH KEY knumh = eg_a348-knumh BINARY SEARCH.
                    IF sy-subrc EQ 0.
                      READ TABLE tg_cdpos INTO eg_cdpos WITH KEY objectid = eg_konh_aux-knumh BINARY SEARCH.
                      IF sy-subrc EQ 0.
                        vg_status = c_d.
                      ELSE.
                        vg_status = c_i.
                      ENDIF.
*          AND OBJECTID   = TG_KONH_AUX-knumh

                    ENDIF.
                  ENDIF.

                ENDIF.
* Se encontrar, manda valor para EG_A348, se não, continuará em branco.


                PERFORM: f_atualiza_icms USING eg_j_1btxst3-value(16) " NBMCODE
                                               eg_j_1btxst3-shipfrom  " Shipfrom
                                               eg_j_1btxst3-shipto    " Shipto
                                               eg_j_1btxst3-validfrom " Validfrom
                                               ' ' "'NBMCODE2'
                                               ' '                    " Letra
                                               eg_j_1btxst3-rate      " Rate
                                               ''                     " KNUMH1
                                               ''                     " Base  - Não tem na IC3
                                               ''                     " Rate3 - Não tem na IC3
                                               ''                     " RED   - Não tem na IC3
                                               ''                     " CST   - Não tem na IC3
                                               ''                     " RATE2
                                               ''                     " Base1
                                               ' '                    " Rate4
                                               vg_red1                " Red1
                                               eg_txpca004-cst        " CST1
                                               eg_a348-knumh          " Knumh
                                               ''                     " Rate1
                                               sy-datum               " Udate
                                               sy-uzeit               " Utime
                                               vg_status              " Change_ind
                                               c_5                    " Status
                                               eg_txpca004-status1.   " Status1

                CONCATENATE c_z01 text-100 eg_j_1btxst3-shipfrom
                                           eg_j_1btxst3-shipto
                                           eg_j_1btxst3-gruop
                                           eg_j_1btxst3-value
                            text-040 INTO eg_erro-text SEPARATED BY ';'.
                APPEND: eg_erro TO tg_erro.

              ENDIF.

            ENDLOOP.

** Ja fez o filtro na tabela TG_J_1BTXIC3.
** Não é resultado somente do select neste momento
*            LOOP AT TG_J_1BTXIC3 INTO EG_J_1BTXIC3.
*              IF Eg_J_1BTXIC3-gruop = '85'.
*                LOOP AT TG_J_1BTXST3 INTO EG_J_1BTXST3 WHERE LAND1     =  Eg_J_1BTXIC3-LAND1
*                                                         AND SHIPFROM  =  Eg_J_1BTXIC3-SHIPFROM
*                                                         AND SHIPTO    =  Eg_J_1BTXIC3-SHIPTO
*                                                         AND VALUE     =  Eg_J_1BTXIC3-VALUE
*                                                         AND VALIDFROM => Eg_J_1BTXIC3-VALIDFROM
*                                                         AND VALIDTO   =< Eg_J_1BTXIC3-VALIDTO.
*
*                  LOOP AT TG_J_1BATL1 into EG_J_1BATL1 WHERE TAXLAW = EG_J_1BTXIC3-TAXLAW.
*                    IF EG_J_1BTXIC3-rate is initial.
*                      IF EG_J_1BATL1-taxsit = c_6.
*
** Corrigir update ou modify ?
*
**    LOOP AT tg_TXPCA004 INTO Eg_TXPCA004.
**      PERFORM: F_ATUALIZA_ICMS USING Eg_TXPCA004-Shipto     " Shipto
**                                     Eg_TXPCA004-Shipfrom   " Shipfrom
**                                     Eg_TXPCA004-Rate       " Rate
**                                     Eg_TXPCA004-Knumh      " Knumh
**                                     Eg_TXPCA004-Validfrom  " Validfrom
**                                     SY-DATUM               " Udate
**                                     SY-UZEIT               " Utime
**                                     c_D                    " Change_ind
**                                     c_1                    " Status
**                                     SPACE.                 " Status1
**    ENDLOOP.
**    CLEAR: Eg_TXPCA004.
*
*
*                      else.
**    LOOP AT tg_TXPCA004 INTO Eg_TXPCA004.
**      PERFORM: F_ATUALIZA_ICMS USING Eg_TXPCA004-Shipto     " Shipto
**                                     Eg_TXPCA004-Shipfrom   " Shipfrom
**                                     Eg_TXPCA004-Rate       " Rate
**                                     Eg_TXPCA004-Knumh      " Knumh
**                                     Eg_TXPCA004-Validfrom  " Validfrom
**                                     SY-DATUM               " Udate
**                                     SY-UZEIT               " Utime
**                                     c_D                    " Change_ind
**                                     c_5                    " Status
**                                     SPACE.                 " Status1
**    ENDLOOP.
**    CLEAR: Eg_TXPCA004.
*
*                      ENDIF.
*                    ENDIF.
*                  ENDLOOP.
*                  CLEAR: EG_J_1BATL1.
*
*                ENDLOOP.
*                CLEAR: EG_J_1BTXST3.
*              endif.
*            ENDLOOP.
*            clear: EG_J_1BTXIC3.

          ELSE.
* Existe uma linha na J_1BTXST3 e J_1BTXIC3 com os direitos fiscais pertinentes,
* porém na comparação com a tabela cruzada, o registro não foi encontrado.
            LOOP AT tg_j_1btxst3 INTO eg_j_1btxst3.
*          EG_ERRO_Z01-SHIPFROM = EG_J_1BTXST3-SHIPFROM.
*          EG_ERRO_Z01-SHIPTO   = EG_J_1BTXST3-SHIPTO  .
*          EG_ERRO_Z01-GRUOP    = EG_J_1BTXST3-GRUOP   .
*          EG_ERRO_Z01-VALUE    = EG_J_1BTXST3-VALUE   .

              CLEAR: eg_txpca004_aux, eg_a348.
              READ TABLE tg_txpca004_aux INTO eg_txpca004_aux WITH KEY shipto    = eg_j_1btxst3-shipto
                                                                       shipfrom  = eg_j_1btxst3-shipfrom
                                                                       nbmcode   = eg_j_1btxst3-value
                                                                       validfrom = eg_j_1btxst3-validfrom.
              IF sy-subrc EQ 0.

                READ TABLE tg_a348 INTO eg_a348 WITH KEY knumh = eg_txpca004_aux-knumh.
                IF sy-subrc EQ 0.
                  READ TABLE tg_konh_aux INTO eg_konh_aux WITH KEY knumh = eg_a348-knumh BINARY SEARCH.
                  IF sy-subrc EQ 0.
                    READ TABLE tg_cdpos INTO eg_cdpos WITH KEY objectid = eg_konh_aux-knumh BINARY SEARCH.
                    IF sy-subrc EQ 0.
                      vg_status = c_d.
                    ELSE.
                      vg_status = c_a.
                    ENDIF.
*          AND OBJECTID   = TG_KONH_AUX-knumh

                  ENDIF.


                  PERFORM: f_atualiza_icms USING eg_j_1btxst3-value(16) " NBMCODE
                                                 eg_j_1btxst3-shipfrom  " Shipfrom
                                                 eg_j_1btxst3-shipto    " Shipto
                                                 eg_j_1btxst3-validfrom " Validfrom
                                                 ' '
                                                 ' '                    " Letra
                                                 ' '                    " Rate
                                                 ''                     " KNUMH1
                                                 ''                     " Base  - Não tem na IC3
                                                 ''                     " Rate3 - Não tem na IC3
                                                 ''                     " RED   - Não tem na IC3
                                                 ''                     " CST   - Não tem na IC3
                                                 ''                     " Rate2
                                                 ''                     " Base1
                                                 vg_rate                " Rate4
                                                 vg_red1                " Red1
                                                 ''                     " CST1
                                                 eg_a348-knumh          " Knumh
                                                 ''                     " Rate1
                                                 sy-datum               " Udate
                                                 sy-uzeit               " Utime
                                                 vg_status              " Change_ind
                                                 c_5                    " Status
                                                 eg_txpca004-status1.   " Status1

                  CONCATENATE 'Z02' text-100 eg_j_1btxst3-shipfrom
                                             eg_j_1btxst3-shipto
                                             eg_j_1btxst3-value(16)
* Conteúdo 'shipfrom' 'shipto' faltante
                  text-090 text-101 INTO eg_erro-text SEPARATED BY ';'.
                  APPEND: eg_erro TO tg_erro.

                ENDIF.

              ENDIF.
            ENDLOOP.

          ENDIF.
        ENDIF.
* Gerar mensagem de erro conforme espec. pag. 32.
*        ENDIF.

      ELSE.
* Pg. 32 espec. funcional.
* *Condição para geração de log Z01 (letra fica em branco)
* Existe uma linha na tabela J_1BTXST3,
* porém não existe uma chave na tabela J_1BTXIC3 referente.

        LOOP AT tg_j_1btxst3 INTO eg_j_1btxst3.
*          EG_ERRO_Z01-SHIPFROM = EG_J_1BTXST3-SHIPFROM.
*          EG_ERRO_Z01-SHIPTO   = EG_J_1BTXST3-SHIPTO  .
*          EG_ERRO_Z01-GRUOP    = EG_J_1BTXST3-GRUOP   .
*          EG_ERRO_Z01-VALUE    = EG_J_1BTXST3-VALUE   .

          CLEAR: eg_txpca004_aux, eg_a348.
          READ TABLE tg_txpca004_aux INTO eg_txpca004_aux WITH KEY shipto    = eg_j_1btxst3-shipto
                                                                   shipfrom  = eg_j_1btxst3-shipfrom
                                                                   nbmcode   = eg_j_1btxst3-value
                                                                   validfrom = eg_j_1btxst3-validfrom.
          IF sy-subrc EQ 0.

            READ TABLE tg_a348 INTO eg_a348 WITH KEY knumh = eg_txpca004_aux-knumh.
            IF sy-subrc EQ 0.
              READ TABLE tg_konh_aux INTO eg_konh_aux WITH KEY knumh = eg_a348-knumh BINARY SEARCH.
              IF sy-subrc EQ 0.
                READ TABLE tg_cdpos INTO eg_cdpos WITH KEY objectid = eg_konh_aux-knumh BINARY SEARCH.
                IF sy-subrc EQ 0.
                  vg_status = c_d.
                ELSE.
                  vg_status = c_a.
                ENDIF.
*          AND OBJECTID   = TG_KONH_AUX-knumh

              ENDIF.
            ENDIF.
* Se encontrar, manda valor para EG_A348, se não, continuará em branco.

*      into table tg_cdpos
*        for all entries in TG_KONH_AUX
*        WHERE OBJECTCLAS = C_CONDA
*          AND OBJECTID   = TG_KONH_AUX-knumh
*          and CHANGENR   = eG_CDHDR-changenr
*          and tabname    IN RG_MM_TX_000_009_TABNAME
*          AND FNAME      IN RG_MM_TX_000_010_FNAME
*          AND CHNGIND    IN RG_MM_TX_000_011_CHNGIND.
          ENDIF.

          PERFORM: f_atualiza_icms USING eg_j_1btxst3-value(16) " NBMCODE
                                         eg_j_1btxst3-shipfrom  " Shipfrom
                                         eg_j_1btxst3-shipto    " Shipto
                                         eg_j_1btxst3-validfrom " Validfrom
                                         ' ' "'NBMCODE2'
                                         ' '                    " Letra
                                         eg_j_1btxst3-rate      " Rate
                                         ''                     " KNUMH1
                                         ''                     " Base  - Não tem na IC3
                                         ''                     " Rate3 - Não tem na IC3
                                         ''                     " RED   - Não tem na IC3
                                         ''                     " CST   - Não tem na IC3
                                         ''                     " RATE2
                                         ''                     " Base1
                                         vg_rate                " Rate4
                                         vg_red1                " Red1
                                         eg_txpca004-cst        " CST1
                                         eg_a348-knumh          " Knumh
                                         ''                     " Rate1
                                         sy-datum               " Udate
                                         sy-uzeit               " Utime
                                         vg_status              " Change_ind
                                         c_5                    " Status
                                         eg_txpca004-status1.   " Status1

          CONCATENATE c_z01 text-100 eg_j_1btxst3-shipfrom
                                     eg_j_1btxst3-shipto
                                     eg_j_1btxst3-gruop
                                     eg_j_1btxst3-value
                      text-040 INTO eg_erro-text SEPARATED BY ';'.
          APPEND: eg_erro TO tg_erro.
        ENDLOOP.
        CLEAR: eg_erro, eg_j_1btxst3.

      ENDIF.
    ENDIF.
  ENDIF.

ENDFORM.                    " F_MVA_ICMS
*&---------------------------------------------------------------------*
*&      Form  F_BUSCA_MODIFICACAO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_busca_modificacao .

  SORT: tg_konh_aux BY knumh ASCENDING.

  SELECT objectclas
         objectid
         changenr
         udate
         utime
    FROM cdhdr
    INTO TABLE tg_cdhdr
      FOR ALL ENTRIES IN tg_konh_aux
      WHERE objectclas = c_conda
        AND objectid   = tg_konh_aux-knumh
*        AND udate      IN s_data. MRO
        AND udate      = p_data. "MRO

ENDFORM.                    " F_BUSCA_MODIFICACAO
*&---------------------------------------------------------------------*
*&      Form  F_BUSCA_MODIF_ITENS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_busca_modif_itens .

*  SORT: TG_CDHDR by changenr descending.
*  read table TG_CDHDR into eG_CDHDR index 1.

  IF sy-subrc EQ 0.

    SELECT objectclas
           objectid
           changenr
           tabname
           tabkey
           fname
           chngind
           value_new
      FROM cdpos
      INTO TABLE tg_cdpos
        FOR ALL ENTRIES IN tg_konh_aux
        WHERE objectclas = c_conda
          AND objectid   = tg_konh_aux-knumh
*          and CHANGENR   = eG_CDHDR-changenr
          AND tabname    IN rg_mm_tx_000_009_tabname
          AND fname      IN rg_mm_tx_000_010_fname
          AND chngind    IN rg_mm_tx_000_011_chngind.

    IF sy-subrc EQ 0.
      DELETE tg_cdpos WHERE value_new NE c_x.
      SORT: tg_cdpos BY objectid ASCENDING.
    ENDIF.
  ENDIF.

ENDFORM.                    " F_BUSCA_MODIF_ITENS
*&---------------------------------------------------------------------*
*&      Form  F_ICMS_COMPRA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_icms_compra .

  CLEAR: tg_cdhdr    ,
         tg_cdpos    ,
         tg_konh_all ,
         tg_konh_aux ,
         tg_j_1btxic3,
         tg_j_1btxic1,
         tg_j_1batl1 .

* Registros de condição válidos para IPI (J_1BTXIP1)
  LOOP AT tg_konh INTO eg_konh WHERE kotabnr = c_382
                                 AND kappl   = c_tx
                                 AND kschl IN rg_mm_tx_000_007_regra_icms
                                 AND vakey CP '*45'.
    eg_konh_aux-knumh = eg_konh-knumh.
    APPEND: eg_konh     TO tg_konh_all.  " Formato de OBJECTID
    APPEND: eg_konh_aux TO tg_konh_aux.  " Formato original
  ENDLOOP.
  CLEAR: eg_konh.

** Registros de condição válidos para IPI (J_1BTXIP1)
*  LOOP AT tg_konh INTO eg_konh WHERE kotabnr = c_382
*                                 AND kappl   = c_tx
*                                 AND kschl IN rg_mm_tx_000_007_regra_icms
*                                 AND vakey CP '*44'.
*    eg_konh_aux-knumh = eg_konh-knumh.
*    APPEND: eg_konh     TO tg_konh_all.  " Formato de OBJECTID
*    APPEND: eg_konh_aux TO tg_konh_aux.  " Formato original
*  ENDLOOP.
*  CLEAR: eg_konh.

  CHECK: NOT tg_konh_aux[] IS INITIAL.

  PERFORM: f_busca_modificacao.             " Select CDHDR
  CHECK NOT tg_cdhdr[] IS INITIAL.

  PERFORM: f_busca_modif_itens,            " Select na tabela CDPOS
           f_separa_changenr.               "

  REFRESH tg_txpca004_aux.


  LOOP AT tg_konh_all INTO eg_konh.
    eg_txpca004_aux-shipfrom  = eg_konh-vakey+4(3)  .
    eg_txpca004_aux-shipto    = eg_konh-vakey+7(3)  .
    eg_txpca004_aux-nbmcode   = eg_konh-vakey+12(15).
    PERFORM: f_date_to_char CHANGING eg_konh-datab.
    eg_txpca004_aux-validfrom = eg_konh-datab       .
    eg_txpca004_aux-knumh     = eg_konh-knumh       .
    APPEND: eg_txpca004_aux TO tg_txpca004_aux.
  ENDLOOP.
  CLEAR: eg_konh.

  SORT: tg_txpca004_aux BY shipto    ASCENDING
                           shipfrom  ASCENDING
                           nbmcode   ASCENDING
                           validfrom ASCENDING.

  SELECT mandt      nbmcode
         shipfrom   shipto
         validfrom  nbmcode2
         letra      rate
         knumh      rate1
         knumh1     base
         rate3      red
         cst        rate2
         base1      rate4
         red1       cst1
         udate      utime
         change_ind status
         data       filename
         status1    data1
    FROM  ztsdd_txpca004
    INTO TABLE tg_txpca004
      FOR ALL ENTRIES IN tg_txpca004_aux
      WHERE shipto    =  tg_txpca004_aux-shipto
        AND shipfrom  =  tg_txpca004_aux-shipfrom
        AND validfrom >= tg_txpca004_aux-validfrom.

  IF sy-subrc EQ 0.

    tg_txpca004_tmp[] = tg_txpca004[].

* Rotina só interessa se o registro não estiver deletado (CHANGE_IND = 'D').
    DELETE tg_txpca004_tmp WHERE change_ind = c_d.
    IF NOT tg_txpca004_tmp[] IS INITIAL.

      SORT: tg_txpca004_tmp BY nbmcode ASCENDING
                              shipfrom ASCENDING
                                shipto ASCENDING
                             validfrom ASCENDING.

      LOOP AT tg_cdpos INTO eg_cdpos.
        READ TABLE tg_konh_all INTO eg_konh WITH KEY knumh = eg_cdpos-objectid BINARY SEARCH.
        IF sy-subrc EQ 0.
          PERFORM: f_date_to_char CHANGING eg_konh-datab.
          READ TABLE tg_txpca004_tmp INTO eg_txpca004
*               WITH KEY NBMCODE = Eg_konh-VAKEY+12(15)
               WITH KEY nbmcode = eg_konh-vakey+10(15)
                       shipfrom = eg_konh-vakey+4(3)
                       shipto   = eg_konh-vakey+7(3)
                      validfrom = eg_konh-datab BINARY SEARCH.
          IF sy-subrc EQ 0.

* Atualiza tabela 'ZTSDD_TXPCA004'
            PERFORM: f_atualiza_icms USING eg_txpca004-nbmcode    " NBMCODE
                                           eg_txpca004-shipfrom   " Shipfrom
                                           eg_txpca004-shipto     " Shipto
                                           eg_txpca004-validfrom  " Validfrom
                                           eg_txpca004-nbmcode2   " NBMCODE2
                                           eg_txpca004-letra      " Letra
                                           eg_txpca004-rate       " Rate
                                           eg_txpca004-knumh1     " Knumh1
                                           eg_txpca004-base       " Base
                                           eg_txpca004-rate3      " RATE3
                                           eg_txpca004-red        " RED
                                           eg_txpca004-cst        " CST
                                           eg_txpca004-rate2      " RATE2
                                           eg_txpca004-base1      " Base1
                                           eg_txpca004-rate4      " Rate4
                                           eg_txpca004-red1       " Red1
                                           eg_txpca004-cst        " CST1
                                           eg_txpca004-knumh      " KNUMH
                                           eg_txpca004-rate1      " Rate1
                                           sy-datum               " Udate
                                           sy-uzeit               " Utime
                                           c_d                    " Change_ind
                                           c_1                    " Status
                                           space.                 " Status1
          ENDIF.
        ENDIF.
      ENDLOOP.
      CLEAR: eg_cdpos.
    ENDIF.
  ENDIF.

  PERFORM: f_ajusta_cdhdr.

  CHECK: tg_cdhdr_tmp[] IS NOT INITIAL.

  SELECT kappl
         kschl
         aland
         doctyp
         txreg_sf
         txreg_st
         dynkey1
         dynkey2
         dynkey3
         taxgroup
         datbi
         datab
         knumh
      FROM a382
      INTO TABLE tg_a382
      FOR ALL ENTRIES IN tg_cdhdr_tmp
        WHERE   kappl    = c_tx
          AND   kschl IN rg_mm_tx_000_007_regra_icms
          AND   aland    = c_br
*          AND   dynkey1  = c_x
          AND   dynkey2  = c_x
          AND   dynkey3  = c_x
          AND   taxgroup IN (c_45, c_44)
          AND   knumh    = tg_cdhdr_tmp-knumh.

  IF sy-subrc EQ 0.

    SORT: tg_a382 BY knumh ASCENDING.

    PERFORM: f_ajusta_a382    ,
             f_juros_icms_bcd ,                  " J_1BTXIC3
             f_1btstx3,
             f_calc_icms      ,                  " J_1BTXIC1
             f_lei_fiscal_icms.                  " J_1BATL1

    SORT: tg_j_1btxic1 BY land1     ASCENDING
                          shipfrom  ASCENDING
                          shipto    ASCENDING
                          validfrom ASCENDING.
    PERFORM: f_regras_bcd.

    SORT: tg_a382 BY knumh ASCENDING.

*      PERFORM f_lei_fiscal_icms.        " J_1BATL1
*    PERFORM f_regras_icms_venda.

  ENDIF.

ENDFORM.                    " F_ICMS_COMPRA
*&---------------------------------------------------------------------*
*&      Form  F_ENVIA_EMAIL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_DOC_DATA  text
*      -->P_TG_HEADER  text
*      -->P_TG_CONTENT  text
*      -->P_TG_OBJECT_PARA  text
*      -->P_TG_OBJECT_PARB  text
*      -->P_TG_RECEIVERS  text
*----------------------------------------------------------------------*
FORM f_envia_email TABLES: p_tg_header      LIKE tg_header
                           p_tg_content     LIKE tg_content
                           p_tg_object_para LIKE tg_object_para
*                             P_TG_RECEIVERS   TYPE STANDARD TABLE of TG_RECEIVERS.
                           p_tg_object_parb LIKE tg_object_parb
                           p_tg_receivers   LIKE tg_receivers.
*  USING:   P_DOC_DATA

  CALL FUNCTION 'SO_NEW_DOCUMENT_SEND_API1'
    EXPORTING
      document_data                    = eg_doc_data
      document_type                    = c_raw
      put_in_outbox                    = c_xemail
      commit_work                      = c_xemail
*           IP_ENCRYPT                       =
*           IP_SIGN                          =
*         IMPORTING
*           SENT_TO_ALL                      =
*           NEW_OBJECT_ID                    =
    TABLES
      object_header                    = p_tg_header
      object_content                   = p_tg_content
*           CONTENTS_HEX                     =
      object_para                      = p_tg_object_para
      object_parb                      = p_tg_object_parb
      receivers                        = p_tg_receivers
   EXCEPTIONS
     too_many_receivers               = 1
     document_not_sent                = 2
     document_type_not_exist          = 3
     operation_no_authorization       = 4
     parameter_error                  = 5
     x_error                          = 6
     enqueue_error                    = 7
     OTHERS                           = 8.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.

  CLEAR: eg_doc_data.

ENDFORM.                    " F_ENVIA_EMAIL
*&---------------------------------------------------------------------*
*&      Form  F_PREENCHE_EMAIL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_MAIL   text
*      -->P_DESCR  text
*      -->P_PT     text
*      -->P_P      text
*      -->P_1      text
*      -->P_1065   text
*----------------------------------------------------------------------*
FORM f_preenche_email  USING    p_name
                                p_descr
                                p_langu
*                                P_SENSI
                                p_prio
                                p_nochange.
*                                P_TEXT1
*                                P_TEXT2.

  eg_doc_data-obj_name   = p_name    .
  eg_doc_data-obj_descr  = p_descr   .
  eg_doc_data-obj_langu  = p_langu   .
  eg_doc_data-sensitivty = p_langu   .
  eg_doc_data-obj_prio   = p_prio    .
  eg_doc_data-no_change  = p_nochange.
  eg_doc_data-priority   = p_prio    .

* LOG DE ERRO INTERFACE FISCALIDADE
  eg_header-line = text-020.
  APPEND: eg_header TO tg_header.

** LOG DE ERRO INTERFACE FISCALIDADE
*  CONCATENATE P_TEXT1

*  EG_CONTENT-LINE = TEXT-020.
*  APPEND: EG_CONTENT TO TG_CONTENT.

  LOOP AT tg_erro INTO eg_erro.
    eg_content-line = eg_erro-text.
    APPEND: eg_content TO tg_content.
  ENDLOOP.
  CLEAR: eg_erro.

  eg_receivers-receiver = eg_range_email-low.
  eg_receivers-rec_type = c_u.
  APPEND: eg_receivers TO tg_receivers.

ENDFORM.                    " F_PREENCHE_EMAIL
*&---------------------------------------------------------------------*
*&      Form  F_COMPARA_ALIQUOTA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_RATE  text
*----------------------------------------------------------------------*
FORM f_compara_aliquota USING p_rate.

* Se não existir na J_1BTXIC1, gravar erro Z02, status 5.
*  READ TABLE tg_J_1BTXIC1 INTO Eg_J_1BTXIC1
*       with key LAND1    = Eg_J_1BTXIC3-LAND1
*                SHIPFROM = Eg_J_1BTXIC3-SHIPFROM
*                SHIPTO   = Eg_J_1BTXIC3-SHIPTO binary search.
  LOOP AT tg_j_1btxic1 INTO eg_j_1btxic1
       WHERE land1    = eg_j_1btxic3-land1
         AND shipfrom = eg_j_1btxic3-shipfrom
         AND shipto   = eg_j_1btxic3-shipto
         AND validfrom => eg_j_1btxic3-validfrom.

*    IF Eg_J_1BTXIC1-VALIDFROM => Eg_J_1BTXIC3-VALIDFROM.

    READ TABLE tg_j_1batl1 INTO eg_j_1batl1
         WITH KEY eg_j_1btxic3-taxlaw BINARY SEARCH.
    IF sy-subrc EQ 0.
      CASE eg_j_1batl1-taxsit.
        WHEN c_1.

* Comparação de alíquotas
          IF eg_j_1btxic1-rate = p_rate.

* Se for igual à alíquota entre a tabela J_1BTXIC3 (exceção) e
* J_1BTXIC1 (cruzada) e o TAXSIT = ‘10’.
* E encontrou GRUOP '85', é uma regra 'A'.

* TAXSIT '10' com exit se torna valor '1'.
            PERFORM: f_leitura_85.

            IF sy-subrc EQ 0.

              IF eg_j_1btxic3_85-rate IS INITIAL.

                READ TABLE tg_j_1batl1 INTO eg_j_1batl1_85
                     WITH KEY eg_j_1btxic3_85-taxlaw BINARY SEARCH.
                IF sy-subrc EQ 0.
                  IF eg_j_1batl1_85-taxsit = '6'.  " 60 considerando exit de conversão

*          READ TABLE TG_J_1BTXST3 INTO EG_J_1BTXST3
*               WITH KEY LAND1    = Eg_J_1BTXIC3-LAND1
*                        SHIPFROM = Eg_J_1BTXIC3-SHIPFROM
*                        SHIPTO   = Eg_J_1BTXIC3-SHIPTO
*                        GRUOP    = Eg_J_1BTXIC3-GRUOP
*                        VALUE    = Eg_J_1BTXIC3-VALUE BINARY SEARCH.
*          IF SY-SUBRC EQ 0.

                    LOOP AT tg_j_1btxst3 INTO eg_j_1btxst3
                                 WHERE land1    = eg_j_1btxic3-land1
                                   AND shipfrom = eg_j_1btxic3-shipfrom
                                   AND shipto   = eg_j_1btxic3-shipto
                                   AND gruop    = eg_j_1btxic3-gruop
                                   AND value    = eg_j_1btxic3-value.


                      PERFORM: f_conv_nbmcode USING eg_j_1btxic3-value
                                           CHANGING vg_nbmcode.
                      READ TABLE tg_a348_tmp INTO eg_a348
                           WITH KEY aland = eg_j_1btxst3-land1
                                txreg_sf  = eg_j_1btxst3-shipfrom
                                txreg_st  = eg_j_1btxst3-shipto
                                taxgroup  = eg_j_1btxst3-gruop
                                dynkey1   = eg_j_1btxst3-value
                                datab_aux = eg_j_1btxst3-validfrom BINARY SEARCH.

                      IF sy-subrc <> 0 .
                        READ TABLE tg_a382_tmp INTO eg_a382 WITH KEY aland = eg_j_1btxic3-land1
                                                                  txreg_sf = eg_j_1btxic3-shipfrom
                                                                  txreg_st = eg_j_1btxic3-shipto
                                                                   dynkey1 = eg_j_1btxic3-value
                                                                  taxgroup = eg_j_1btxic3-gruop
                                                                 datab_aux = eg_j_1btxic3-validfrom BINARY SEARCH.
                      ENDIF.

                      IF sy-subrc = 0. "MRO


                        PERFORM: f_atualiza_icms USING eg_j_1btxst3-value(16) " NBMCODE
                                                       eg_j_1btxst3-shipfrom  " Shipfrom
                                                       eg_j_1btxst3-shipto    " Shipto
                                                       eg_j_1btxst3-validfrom " Validfrom
                                                       vg_nbmcode             " NBMCODE2
                                                       c_a                   " Letra
                                                       eg_j_1btxst3-rate      " Rate
                                                       ''                     " KNUMH1
                                                       '100'                  " Base  - Não tem na IC3
                                                       eg_j_1btxic3-rate      " Rate3 - Não tem na IC3
                                                       eg_j_1btxic3-base      " RED   - Não tem na IC3
                                                       eg_j_1batl1-taxsit     " CST   - Não tem na IC3
                                                       ''                     " Rate2
                                                       ''                     " Base1
                                                       ''                     " Rate4
                                                       ''                     " Red1
                                                       eg_j_1batl1_85-taxsit  " CST1
                                                       eg_a348-knumh          " Knumh
                                                       vg_rate                " Rate1
                                                       sy-datum               " Udate
                                                       sy-uzeit               " Utime
                                                       c_i "vg_status              " Change_ind
                                                       c_1                    " Status
                                                       eg_txpca004-status1.   " Status1

                      ENDIF.
                    ENDLOOP.

*Z017 -
                    IF sy-subrc <> 0.
                      PERFORM: f_atualiza_icms USING eg_j_1btxic3-value(16) " NBMCODE
                                                     eg_j_1btxic3-shipfrom  " Shipfrom
                                                     eg_j_1btxic3-shipto    " Shipto
                                                     eg_j_1btxic3-validfrom " Validfrom
                                                     vg_nbmcode             " NBMCODE2
                                                     c_a                    " Letra
                                                     eg_j_1btxst3-rate      " Rate
                                                     ''                     " KNUMH1
                                                     '100'                  " Base  - Não tem na IC3
                                                     eg_j_1btxic3-rate      " Rate3 - Não tem na IC3
                                                     eg_j_1btxic3-base      " RED   - Não tem na IC3
                                                     eg_j_1batl1-taxsit     " CST   - Não tem na IC3
                                                     ''                     " Rate2
                                                     ''                     " Base1
                                                     ''                     " Rate4
                                                     ''                     " Red1
                                                     eg_j_1batl1_85-taxsit  " CST1
                                                     ''                     " Knumh
                                                     vg_rate                " Rate1
                                                     sy-datum               " Udate
                                                     sy-uzeit               " Utime
                                                     c_i "vg_status              " Change_ind
                                                     c_5                    " Status
                                                     ''.                    " Status1

* Chave faltante de imposto 'XXX' 'YYY'...
                      CONCATENATE c_z17 text-100 eg_j_1btxic3-shipfrom
                                                 eg_j_1btxic3-shipto
                                                 eg_j_1btxic3-gruop
                                                 eg_j_1btxic3-value
                                        text-080
                                            INTO eg_erro-text SEPARATED BY ';'.
                      APPEND: eg_erro TO tg_erro.

                    ENDIF.

                    CLEAR: eg_j_1btxst3.

                  ELSE.


* LOG de ERRO Z05: Se não é ZERO ou não existe o registro na tabela ou o TAXSIT não é ‘60’,
* gravar com status 5 – chave faltante de imposto – gravar no log a msg:
*  Status 5 => conteudo J_1BTXIC3-SHIPFROM +
*                       J_1BTXIC3-SHIPTO +
*                       J_1BTXIC3-VALUE +
*                       J_1BTXIC3-GROUP faltante.

                    CLEAR eg_j_1btxst3.
                    READ TABLE tg_j_1btxst3 INTO eg_j_1btxst3
                     WITH KEY land1  = eg_j_1btxic3-land1
                              shipfrom = eg_j_1btxic3-shipfrom
                              shipto   = eg_j_1btxic3-shipto
                              gruop    = eg_j_1btxic3-gruop
                              value    = eg_j_1btxic3-value.

                    READ TABLE tg_a348_tmp INTO eg_a348
                         WITH KEY aland = eg_j_1btxst3-land1
                              txreg_sf  = eg_j_1btxst3-shipfrom
                              txreg_st  = eg_j_1btxst3-shipto
                              taxgroup  = eg_j_1btxst3-gruop
                              dynkey1   = eg_j_1btxst3-value
                              datab_aux = eg_j_1btxst3-validfrom BINARY SEARCH.

                    PERFORM: f_atualiza_icms USING eg_j_1btxic3-value(16) " NBMCODE
                                                   eg_j_1btxic3-shipfrom  " Shipfrom
                                                   eg_j_1btxic3-shipto    " Shipto
                                                   eg_j_1btxic3-validfrom " Validfrom
                                                   vg_nbmcode             " NBMCODE2
                                                   c_a                    " Letra
                                                   eg_j_1btxst3-rate      " Rate
                                                   ''                     " KNUMH1
                                                   '100'                  " Base  - Não tem na IC3
                                                   eg_j_1btxic3-rate      " Rate3 - Não tem na IC3
                                                   eg_j_1btxic3-base      " RED   - Não tem na IC3
                                                   eg_j_1batl1-taxsit     " CST   - Não tem na IC3
                                                   ''                     " Rate2
                                                   ''                     " Base1
                                                   ''                     " Rate4
                                                   ''                     " Red1
                                                   eg_j_1batl1_85-taxsit  " CST1
                                                   ''                     " Knumh
                                                   vg_rate                " Rate1
                                                   sy-datum               " Udate
                                                   sy-uzeit               " Utime
                                                   c_i "vg_status              " Change_ind
                                                   c_5                    " Status
                                                   ''.                    " Status1

* Chave faltante de imposto 'XXX' 'YYY'...
                    CONCATENATE c_z03 text-100 eg_j_1btxic3-shipto
                                               eg_j_1btxic3-shipto
                                               eg_j_1btxic3-value
                                               eg_j_1btxic3-gruop
                                       text-040   INTO eg_erro-text SEPARATED BY ';'.
                    APPEND: eg_erro TO tg_erro.

                  ENDIF.
                ENDIF.

              ELSE.
*LOG de ERRO Z03: Se não é ZERO ou não existe o registro na tabela ou o TAXSIT não é ‘60’,
*gravar com status 5 – chave faltante de imposto – gravar no log do JOB ou se for execução
*online a seguinte mensagem: Status 5 => conteudo J_1BTXIC3- SHIPFROM + J_1BTXIC3- SHIPTO +
*J_1BTXIC3- VALUE + J_1BTXIC3- SHIPTO-GROUP faltante.
*                READ TABLE tg_j_1btxst3 INTO eg_j_1btxst3
*                     WITH KEY land1  = eg_j_1btxic3-land1
*                              shipfrom = eg_j_1btxic3-shipfrom
*                              shipto   = eg_j_1btxic3-shipto
*                              gruop    = eg_j_1btxic3-gruop
*                              value    = eg_j_1btxic3-value.
*
*                IF sy-subrc <> 0 .
*                  CLEAR eg_j_1btxst3.
*                ENDIF.

                CLEAR eg_j_1btxst3.
                READ TABLE tg_j_1btxst3 INTO eg_j_1btxst3
                 WITH KEY land1  = eg_j_1btxic3-land1
                          shipfrom = eg_j_1btxic3-shipfrom
                          shipto   = eg_j_1btxic3-shipto
                          gruop    = eg_j_1btxic3-gruop
                          value    = eg_j_1btxic3-value.

                READ TABLE tg_a348_tmp INTO eg_a348
                     WITH KEY aland = eg_j_1btxst3-land1
                          txreg_sf  = eg_j_1btxst3-shipfrom
                          txreg_st  = eg_j_1btxst3-shipto
                          taxgroup  = eg_j_1btxst3-gruop
                          dynkey1   = eg_j_1btxst3-value
                          datab_aux = eg_j_1btxst3-validfrom BINARY SEARCH.

                PERFORM: f_atualiza_icms USING eg_j_1btxic3-value(16) " NBMCODE
                                               eg_j_1btxic3-shipfrom  " Shipfrom
                                               eg_j_1btxic3-shipto    " Shipto
                                               eg_j_1btxic3-validfrom " Validfrom
                                               vg_nbmcode             " NBMCODE2
                                               c_a                    " Letra
                                               eg_j_1btxst3-rate      " Rate
                                               ''                     " KNUMH1
                                               '100'                  " Base  - Não tem na IC3
                                               eg_j_1btxic3-rate      " Rate3 - Não tem na IC3
                                               eg_j_1btxic3-base      " RED   - Não tem na IC3
                                               eg_j_1batl1-taxsit     " CST   - Não tem na IC3
                                               ''                     " Rate2
                                               ''                     " Base1
                                               ''                     " Rate4
                                               ''                     " Red1
                                               eg_j_1batl1_85-taxsit  " CST1
                                               ''                     " Knumh
                                               vg_rate                " Rate1
                                               sy-datum               " Udate
                                               sy-uzeit               " Utime
                                               c_i "vg_status              " Change_ind
                                               c_5                    " Status
                                               ''.                    " Status1

* Chave faltante de imposto 'XXX' 'YYY'...
                CONCATENATE c_z03 text-100 eg_j_1btxic3-shipto
                                           eg_j_1btxic3-shipto
                                           c_85
                                           eg_j_1btxic3-value
                                           text-040
                                      INTO eg_erro-text SEPARATED BY ';'.
                APPEND: eg_erro TO tg_erro.

              ENDIF.

            ELSE.
*LOG de ERRO Z03: Se não é ZERO ou não existe o registro na tabela ou o TAXSIT não é ‘60’,
*gravar com status 5 – chave faltante de imposto – gravar no log do JOB ou se for execução
*online a seguinte mensagem: Status 5 => conteudo J_1BTXIC3- SHIPFROM + J_1BTXIC3- SHIPTO +
*J_1BTXIC3- VALUE + J_1BTXIC3- SHIPTO-GROUP faltante.

              CLEAR eg_j_1btxst3.
              READ TABLE tg_j_1btxst3 INTO eg_j_1btxst3
               WITH KEY land1  = eg_j_1btxic3-land1
                        shipfrom = eg_j_1btxic3-shipfrom
                        shipto   = eg_j_1btxic3-shipto
                        gruop    = eg_j_1btxic3-gruop
                        value    = eg_j_1btxic3-value.

              READ TABLE tg_a348_tmp INTO eg_a348
                   WITH KEY aland = eg_j_1btxst3-land1
                        txreg_sf  = eg_j_1btxst3-shipfrom
                        txreg_st  = eg_j_1btxst3-shipto
                        taxgroup  = eg_j_1btxst3-gruop
                        dynkey1   = eg_j_1btxst3-value
                        datab_aux = eg_j_1btxst3-validfrom BINARY SEARCH.

              PERFORM: f_atualiza_icms USING eg_j_1btxic3-value(16) " NBMCODE
                                             eg_j_1btxic3-shipfrom  " Shipfrom
                                             eg_j_1btxic3-shipto    " Shipto
                                             eg_j_1btxic3-validfrom " Validfrom
                                             vg_nbmcode             " NBMCODE2
                                             c_a                    " Letra
                                             eg_j_1btxst3-rate      " Rate
                                             ''                     " KNUMH1
                                             '100'                  " Base  - Não tem na IC3
                                             eg_j_1btxic3-rate      " Rate3 - Não tem na IC3
                                             eg_j_1btxic3-base      " RED   - Não tem na IC3
                                             eg_j_1batl1-taxsit     " CST   - Não tem na IC3
                                             ''                     " Rate2
                                             ''                     " Base1
                                             ''                     " Rate4
                                             ''                     " Red1
                                             ''                     " CST1
                                             ''                     " Knumh
                                             vg_rate                " Rate1
                                             sy-datum               " Udate
                                             sy-uzeit               " Utime
                                             c_i "vg_status              " Change_ind
                                             c_5                    " Status
                                             ''.                    " Status1

* Chave faltante de imposto 'XXX' 'YYY'...
              CONCATENATE c_z03 text-100 eg_j_1btxic3-shipto
                                         eg_j_1btxic3-shipto
                                         c_85
                                         eg_j_1btxic3-value
                                         text-040
                                    INTO eg_erro-text SEPARATED BY ';'.
              APPEND: eg_erro TO tg_erro.
            ENDIF.

          ELSE.
* Se as alíquotas forem diferentes entre a tabela J_1BTXIC3 (exceção) e
* J_1BTXIC1 (cruzada) e o TAXSIT = ‘10’.
* E encontrou GRUOP '85', é uma regra 'G'.

* TAXSIT '10' com exit se torna valor '1'.

            PERFORM: f_leitura_85.
            IF sy-subrc EQ 0.
              PERFORM: f_regra_g USING p_rate.
            ELSE.

              PERFORM: f_atualiza_icms USING eg_j_1btxic3-value(16) " NBMCODE
                                             eg_j_1btxic3-shipfrom  " Shipfrom
                                             eg_j_1btxic3-shipto    " Shipto
                                             eg_j_1btxic3-validfrom " Validfrom
                                             vg_nbmcode             " NBMCODE2
                                             c_g                    " Letra
                                             eg_j_1btxst3-rate      " Rate
                                             ''                     " KNUMH1
                                             '100'                  " Base  - Não tem na IC3
                                             eg_j_1btxic3-rate      " Rate3 - Não tem na IC3
                                             eg_j_1btxic3-base      " RED   - Não tem na IC3
                                             eg_j_1batl1-taxsit     " CST   - Não tem na IC3
                                             ''                     " Rate2
                                             ''                     " Base1
                                             ''                     " Rate4
                                             ''                     " Red1
                                             eg_j_1batl1_85-taxsit  " CST1
                                             ''                     " Knumh
                                             vg_rate                " Rate1
                                             sy-datum               " Udate
                                             sy-uzeit               " Utime
                                             c_i "vg_status              " Change_ind
                                             c_5                    " Status
                                             ''.                    " Status1

* Chave faltante de imposto 'XXX' 'YYY'...
              CONCATENATE c_z17 text-100 eg_j_1btxic3-shipfrom
                                         eg_j_1btxic3-shipto
                                         eg_j_1btxic3-gruop
                                         eg_j_1btxic3-value
                                text-080
                                    INTO eg_erro-text SEPARATED BY ';'.
              APPEND: eg_erro TO tg_erro.


            ENDIF.

          ENDIF.

        WHEN c_6.
* Se as alíquotas forem diferentes entre a tabela J_1BTXIC3 (exceção) e
* J_1BTXIC1 (cruzada) e o TAXSIT = '10' ou ‘60’.
* E encontrou GRUOP '85', é uma regra 'G'.
          IF eg_j_1btxic1-rate NE p_rate.

*Se for CST 60 na tabela J_1BTXIC3 GRUPO 45 o campo RATE e BASE deverão ser 0,00,
*se não for, gerar LOG Z21 = Erro no campo alíquota ou base diferente de 0,00
*na Compra com CST 60, gravar na tabela ZTXPCA004 com status 5
            IF eg_j_1btxic3-base IS NOT INITIAL AND
               eg_j_1btxic3-rate IS NOT INITIAL.

* Z21 = Erro no campo alíquota ou base diferente de 0,00 na Compra com CST 60
              CONCATENATE c_z21 text-110 eg_j_1btxic3-shipfrom
                                         eg_j_1btxic3-shipto
                                         eg_j_1btxic3-gruop
                                         eg_j_1btxic3-value
                          text-105 INTO eg_erro-text SEPARATED BY ';'.
              APPEND: eg_erro TO tg_erro.

            ELSE.

              PERFORM: f_leitura_85.

              IF sy-subrc EQ 0.
*              PERFORM: f_regra_g USING p_rate. "SM60
                PERFORM: f_regra_g_sm60 USING p_rate.

              ENDIF.

            ENDIF.
          ENDIF.

* TAXSIT '90' com exit se torna valor '9'.
        WHEN c_9.

* Comparação de alíquotas
          IF eg_j_1btxic1-rate = p_rate.

* Se for igual à alíquota entre a tabela J_1BTXIC3 (exceção) e
* J_1BTXIC1 (cruzada) e o TAXSIT = ‘90’.
* E encontrou GRUOP '85', é uma regra 'E'.

            PERFORM: f_leitura_85.

            IF sy-subrc EQ 0.
              PERFORM: f_check_regra_e USING eg_j_1btxic3_85
                                             c_6        " Taxsit '60'
                                             c_6.       " Taxsit '60'
            ELSE.

* Letra 'E'
              PERFORM: f_atualiza_icms USING eg_j_1btxic3-value(16) " NBMCODE
                                                           eg_j_1btxic3-shipfrom  " Shipfrom
                                                           eg_j_1btxic3-shipto    " Shipto
                                                           eg_j_1btxic3-validfrom " Validfrom
                                                           vg_nbmcode             " NBMCODE2
                                                           c_e                    " Letra
                                                           eg_j_1btxst3-rate      " Rate
                                                           ''                     " KNUMH1
                                                           '100'                  " Base  - Não tem na IC3
                                                           eg_j_1btxic3-rate      " Rate3 - Não tem na IC3
                                                           eg_j_1btxic3-base      " RED   - Não tem na IC3
                                                           eg_j_1batl1-taxsit     " CST   - Não tem na IC3
                                                           ''                     " Rate2
                                                           ''                     " Base1
                                                           ''                     " Rate4
                                                           ''                     " Red1
                                                           eg_j_1batl1_85-taxsit  " CST1
                                                           ''                     " Knumh
                                                           vg_rate                " Rate1
                                                           sy-datum               " Udate
                                                           sy-uzeit               " Utime
                                                           c_i "vg_status              " Change_ind
                                                           c_5                    " Status
                                                           ''.                    " Status1

*Z07
* Chave faltante de imposto 'XXX' 'YYY'...
              CONCATENATE c_z07 text-100 eg_j_1btxic3-shipto
                                         eg_j_1btxic3-shipto
                                         c_85
                                         eg_j_1btxic3-value
                                text-040
                                    INTO eg_erro-text SEPARATED BY ';'.
              APPEND: eg_erro TO tg_erro.


            ENDIF.

          ELSE.
* Se as alíquotas forem diferentes entre a tabela J_1BTXIC3 (exceção) e
* J_1BTXIC1 (cruzada) e o TAXSIT = ‘90’.
* E encontrou GRUOP '44' ou '45', é uma regra 'H'.

            PERFORM: f_leitura_85.
            IF sy-subrc EQ 0.
              READ TABLE tg_j_1btxic3_to INTO eg_j_1btxic3_44
                   WITH KEY shipfrom = eg_j_1btxic3-shipto
                            shipto   = eg_j_1btxic3-shipto
                            gruop    = c_44
*                          VALUE    = Eg_J_1BTXIC3-value BINARY SEARCH.
                            value    = eg_j_1btxic3-value.
              IF sy-subrc EQ 0.
* Regra 'H' utiliza os mesmos valores, regra 'G' tem valores diferentes.
                PERFORM: f_check_regra_g_h USING eg_j_1btxic3_44
                                                 c_9        " Taxsit '90'
                                                 c_6        " Taxsit '90'
                                                 c_h.
              ELSE.

* Se não encontrar verificar se existe no grupo 45.
                READ TABLE tg_j_1btxic3_to INTO eg_j_1btxic3_45
                     WITH KEY shipfrom = eg_j_1btxic3-shipto
                              shipto   = eg_j_1btxic3-shipto
                              gruop    = c_45
*                          VALUE    = Eg_J_1BTXIC3-value BINARY SEARCH.
                              value    = eg_j_1btxic3-value.
                IF sy-subrc EQ 0.
                  PERFORM: f_check_regra_g_h USING eg_j_1btxic3_45
                                                   c_9        " Taxsit '90'
                                                   c_6        " Taxsit '90'
                                                   c_h.
                ELSE.
                  PERFORM: f_regra_g_h USING eg_j_1btxic1
                                             c_h
                                             p_rate.
                ENDIF.
              ENDIF.

            ELSE.
* LOG de ERRO Z09: Se não é ZERO ou não existe o registro na tabela ou o TAXSIT não é ‘60’,
* gravar com status 5 – chave faltante de imposto – gravar no log a msg:
*  Status 5 => conteudo J_1BTXIC3-SHIPFROM +
*                       J_1BTXIC3-SHIPTO +
*                       J_1BTXIC3-VALUE +
*                       J_1BTXIC3-GROUP faltante.

              PERFORM: f_atualiza_icms USING eg_j_1btxic3-value(16) " NBMCODE
                                             eg_j_1btxic3-shipfrom  " Shipfrom
                                             eg_j_1btxic3-shipto    " Shipto
                                             eg_j_1btxic3-validfrom " Validfrom
                                             vg_nbmcode             " NBMCODE2
                                             c_h                " Letra
                                             eg_j_1btxst3-rate      " Rate
                                             ''                     " KNUMH1
                                             '100'                  " Base  - Não tem na IC3
                                             eg_j_1btxic3-rate      " Rate3 - Não tem na IC3
                                             eg_j_1btxic3-base      " RED   - Não tem na IC3
                                             eg_j_1batl1-taxsit     " CST   - Não tem na IC3
                                             ''                     " Rate2
                                             ''                     " Base1
                                             ''                     " Rate4
                                             ''                     " Red1
                                             eg_j_1batl1_85-taxsit  " CST1
                                             ''                     " Knumh
                                             vg_rate                " Rate1
                                             sy-datum               " Udate
                                             sy-uzeit               " Utime
                                             c_i "vg_status              " Change_ind
                                             c_5                    " Status
                                             ''.                    " Status1

* Chave faltante de imposto 'XXX' 'YYY'...
              CONCATENATE c_z09 text-100 eg_j_1btxic3-shipfrom
                                         eg_j_1btxic3-shipto
                                         c_85
                                         eg_j_1btxic3-value
                                text-040
                                    INTO eg_erro-text SEPARATED BY ';'.
              APPEND: eg_erro TO tg_erro.

            ENDIF.
          ENDIF.

        WHEN OTHERS.

*      ENDIF.
      ENDCASE.

    ENDIF.
*    ENDIF.
  ENDLOOP.

*Z02
  IF sy-subrc <> 0.

    PERFORM: f_atualiza_icms USING eg_j_1btxic3-value(16) " NBMCODE
                                   eg_j_1btxic3-shipfrom  " Shipfrom
                                   eg_j_1btxic3-shipto    " Shipto
                                   eg_j_1btxic3-validfrom " Validfrom
                                   ' '
                                   ' '                    " Letra
                                   ' '                    " Rate
                                   ''                     " KNUMH1
                                   ''                     " Base  - Não tem na IC3
                                   ''                     " Rate3 - Não tem na IC3
                                   ''                     " RED   - Não tem na IC3
                                   ''                     " CST   - Não tem na IC3
                                   ''                     " Rate2
                                   ''                     " Base1
                                   vg_rate                " Rate4
                                   vg_red1                " Red1
                                   ''                     " CST1
                                   eg_a348-knumh          " Knumh
                                   ''                     " Rate1
                                   sy-datum               " Udate
                                   sy-uzeit               " Utime
                                   c_i              " Change_ind
                                   c_5                    " Status
                                   eg_txpca004-status1.   " Status1

    CONCATENATE 'Z02' text-100 eg_j_1btxic3-shipfrom
                               eg_j_1btxic3-shipto
                               eg_j_1btxic3-value(16)
* Conteúdo 'shipfrom' 'shipto' faltante
    text-090 text-101 INTO eg_erro-text SEPARATED BY ';'.
    APPEND: eg_erro TO tg_erro.

  ENDIF.

*  else.
* Existe uma linha na J_1BTXST3 e J_1BTXIC3 com os direitos fiscais pertinentes,
* porém na comparação com a tabela cruzada, o registro não foi encontrado.

*  PERFORM: F_ATUALIZA_ICMS USING EG_J_1BTXST3-VALUE(16) " NBMCODE
*                                 EG_J_1BTXST3-Shipfrom  " Shipfrom
*                                 EG_J_1BTXST3-Shipto    " Shipto
*                                 EG_J_1BTXST3-Validfrom " Validfrom
*                                 'NBMCODE2'
*                                 C_A                    " Letra
*                                 EG_J_1BTXST3-Rate      " Rate
*                                 ''                     " KNUMH1
*                                 ''                     " Base  - Não tem na IC3
*                                 ''                     " Rate3 - Não tem na IC3
*                                 ''                     " RED   - Não tem na IC3
*                                 ''                     " CST   - Não tem na IC3
*                                 ''                     " Rate2
*                                 ''                     " Base1
*                                 VG_RATE                " Rate4
*                                 VG_RED1                " Red1
*                                 ''                     " CST1
*                                 EG_A348-KNUMH          " Knumh
*                                 ''                     " Rate1
*                                 SY-DATUM               " Udate
*                                 SY-UZEIT               " Utime
*                                 VG_STATUS              " Change_ind
*                                 C_5                    " Status
*                                 Eg_TXPCA004-STATUS1.   " Status1
*
*  CONCATENATE TEXT-060 Eg_J_1BTXIC3-SHIPFROM
*                       Eg_J_1BTXIC3-SHIPTO
** Conteúdo 'shipfrom' 'shipto' faltante
*  TEXT-050 INTO EG_ERRO_Z02-text separated by ';'.
*  APPEND: EG_ERRO_Z02 TO TG_ERRO_Z02.

ENDFORM.                    " F_COMPARA_ALIQUOTA
*&---------------------------------------------------------------------*
*&      Form  F_CONV_NBMCODE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_NBMCODE_IN   text
*      <--P_NBMCODE_OUT  text
*----------------------------------------------------------------------*
FORM f_conv_nbmcode  USING    p_nbmcode_in
                     CHANGING p_nbmcode_out.

  DATA: vl_len TYPE i.

  vl_len = strlen( p_nbmcode_in ).
  CASE vl_len.

    WHEN '10'.
      p_nbmcode_out = p_nbmcode_in.

* Desprezar
    WHEN '13'.
      CONCATENATE p_nbmcode_in(7) p_nbmcode_in+10 INTO p_nbmcode_out.

    WHEN '15'.
      CONCATENATE p_nbmcode_in(5) p_nbmcode_in+11(2) '.' p_nbmcode_in+13(2) INTO p_nbmcode_out.

    WHEN OTHERS.
*MRO
      p_nbmcode_out =  p_nbmcode_in.
  ENDCASE.

*MRO - Remover os pontos do NCM2
  REPLACE ALL OCCURRENCES OF '.' IN p_nbmcode_out WITH ' ' .
  CONDENSE p_nbmcode_out NO-GAPS.



ENDFORM.                    " F_CONV_NBMCODE
*&---------------------------------------------------------------------*
*&      Form  F_DIREITO_FISCAL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_direito_fiscal .

  IF NOT tg_txpca004[] IS INITIAL.

*    TG_TXPCA004_TMP[] = TG_TXPCA004[].

*    DELETE TG_TXPCA004 WHERE LETRA NE '' OR
*                             RATE IS INITIAL.

* Para ajustar tipo do NBMCODE
    LOOP AT tg_txpca004 INTO eg_txpca004.
      eg_txpca004_nbm-shipfrom  = eg_txpca004-shipfrom.
      eg_txpca004_nbm-shipto    = eg_txpca004-shipto  .
      eg_txpca004_nbm-nbmcode   = eg_txpca004-nbmcode .

*        PERFORM: F_EXIT_OUTPUT USING    EG_TXPCA004-VALIDFROM
*                               CHANGING EG_TXPCA004_NBM-VALIDFROM.

      eg_txpca004_nbm-validfrom = eg_txpca004-validfrom.
      APPEND: eg_txpca004_nbm TO tg_txpca004_nbm.
    ENDLOOP.
    CLEAR: eg_txpca004.

    CHECK: tg_txpca004_nbm[] IS NOT INITIAL.

* TG_J_1BTXST3 contém todas as situações neste momento, devemos aplicar o filtro.
    SELECT land1
           shipfrom
           shipto
           gruop
           value
           value2
           value3
           stgrp
           validfrom
           validto
           rate
      FROM j_1btxst3
      INTO TABLE tg_j_1btxst3
        FOR ALL ENTRIES IN tg_txpca004_nbm
        WHERE shipfrom  = tg_txpca004_nbm-shipfrom
          AND shipto    = tg_txpca004_nbm-shipto
          AND value     = tg_txpca004_nbm-nbmcode
          AND validfrom GE tg_txpca004_nbm-validfrom.


    IF sy-subrc EQ 0.
      SORT: tg_j_1btxst3 BY shipfrom  ASCENDING
                            shipto    ASCENDING
                            value     ASCENDING
                            validfrom ASCENDING.
    ENDIF.

  ENDIF.

ENDFORM.                    " F_DIREITO_FISCAL
*&---------------------------------------------------------------------*
*&      Form  F_JUROS_ICMS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_juros_icms .

  IF NOT tg_j_1btxst3[] IS INITIAL.

    SELECT land1
           shipfrom
           shipto
           gruop
           value
           value2
           value3
           validfrom
           validto
           rate
           base
           taxlaw
      FROM j_1btxic3
      INTO TABLE tg_j_1btxic3
        FOR ALL ENTRIES IN tg_j_1btxst3
        WHERE land1     = tg_j_1btxst3-land1
          AND shipfrom  = tg_j_1btxst3-shipfrom
          AND shipto    = tg_j_1btxst3-shipto
          AND gruop     = tg_j_1btxst3-gruop
          AND value     = tg_j_1btxst3-value
          AND ( ( validfrom  <= tg_j_1btxst3-validfrom "validto.
          AND validto   >= tg_j_1btxst3-validto ) OR
             ( validfrom  >= tg_j_1btxst3-validfrom "validto.
               AND validto  <= tg_j_1btxst3-validto ) ).

*    SELECT land1
*           shipfrom
*           shipto
*           gruop
*           value
*           value2
*           value3
*           validfrom
*           validto
*           rate
*           base
*           taxlaw
*      FROM j_1btxic3
*      APPENDING TABLE tg_j_1btxic3
*        FOR ALL ENTRIES IN tg_j_1btxst3
*        WHERE land1     = tg_j_1btxst3-land1
*          AND shipfrom  = tg_j_1btxst3-shipfrom
*          AND shipto    = tg_j_1btxst3-shipto
*          AND gruop     = tg_j_1btxst3-gruop
*          AND value     = tg_j_1btxst3-value
*          AND validfrom  >= tg_j_1btxst3-validfrom. "validto.
**          AND validto   <= tg_j_1btxst3-validto.

*    SELECT LAND1
*           SHIPFROM
*           SHIPTO
*           GRUOP
*           VALUE
*           VALUE2
*           VALUE3
*           VALIDFROM
*           VALIDTO
*           rate
*           base
*           taxlaw
*      FROM J_1BTXIC3
*      INTO TABLE TG_J_1BTXIC3
*        FOR ALL ENTRIES IN TG_J_1BTXST3
*        WHERE LAND1    = C_BR
*          AND SHIPFROM = TG_J_1BTXST3-SHIPFROM
*          AND SHIPTO   = TG_J_1BTXST3-SHIPTO
*          AND ( GRUOP  = c_44
*           OR   GRUOP  = C_45 )
**           or   gruop  = C_85 )
*          AND VALUE    = TG_J_1BTXST3-VALUE.

* Para Regra G
*    SELECT LAND1
*           SHIPFROM
*           SHIPTO
*           GRUOP
*           VALUE
*           VALUE2
*           VALUE3
*           VALIDFROM
*           VALIDTO
*           rate
*           base
*           taxlaw
*      FROM J_1BTXIC3
*      INTO TABLE TG_J_1BTXIC3_FROM
*        FOR ALL ENTRIES IN TG_J_1BTXST3
*        WHERE LAND1      = C_BR
*          AND ( SHIPFROM = TG_J_1BTXST3-SHIPFROM
*            AND SHIPTO   = TG_J_1BTXST3-SHIPFROM )
*          AND GRUOP      = c_85
*          AND VALUE      = TG_J_1BTXST3-VALUE
*          and validfrom >= TG_J_1BTXST3-VALIDTO    " Menor igual de fato, pois tem data invertida.
*          AND VALIDFROM <= TG_J_1BTXST3-VALIDFROM. " Maior igual de fato, pois tem data invertida.

    SELECT land1
           shipfrom
           shipto
           gruop
           value
           value2
           value3
           validfrom
           validto
           rate
           base
           taxlaw
      FROM j_1btxic3
      INTO TABLE tg_j_1btxic3_to
        FOR ALL ENTRIES IN tg_j_1btxst3
          WHERE land1      = c_br
*          AND ( SHIPFROM = TG_J_1BTXST3-SHIPTO
*            AND SHIPTO   = TG_J_1BTXST3-SHIPTO )
          AND ( ( shipfrom = tg_j_1btxst3-shipfrom AND shipto   = tg_j_1btxst3-shipto ) OR
                 ( shipfrom = tg_j_1btxst3-shipto AND shipto   = tg_j_1btxst3-shipto ) )
          AND ( gruop      = c_44
              OR gruop     = c_45
              OR gruop     = c_85 )
          AND value        = tg_j_1btxst3-value
*          AND validto    >= tg_j_1btxst3-validto
*          AND validfrom   <= tg_j_1btxst3-validfrom.
**          AND validfrom <= tg_j_1btxst3-validfrom "validto.
**          AND validfrom >= tg_j_1btxst3-validfrom.
          AND ( ( validfrom  <= tg_j_1btxst3-validfrom "validto.
          AND validto   >= tg_j_1btxst3-validto )
              OR
             ( validfrom  >= tg_j_1btxst3-validfrom "validto.
               AND validto  <= tg_j_1btxst3-validto ) ).


****    IF tg_txpca004_nbm[] IS NOT INITIAL.
****
****      SELECT land1
****             shipfrom
****             shipto
****             gruop
****             value
****             value2
****             value3
****             validfrom
****             validto
****             rate
****             base
****             taxlaw
****        FROM j_1btxic3
****        APPENDING TABLE tg_j_1btxic3
****            FOR ALL ENTRIES IN tg_txpca004_nbm
****          WHERE land1     = c_br
****            AND shipfrom  = tg_txpca004_nbm-shipfrom
****            AND shipto    = tg_txpca004_nbm-shipto
****            AND gruop     = c_45
****            AND value     = tg_txpca004_nbm-nbmcode
****            AND validfrom  >= tg_txpca004_nbm-validfrom "validto.
****            AND validto   <= tg_txpca004_nbm-validfrom.
****
*****Para atender as letras G e H
****      SELECT land1
****             shipfrom
****             shipto
****             gruop
****             value
****             value2
****             value3
****             validfrom
****             validto
****             rate
****             base
****             taxlaw
****        FROM j_1btxic3
****        APPENDING TABLE tg_j_1btxic3_to
****          FOR ALL ENTRIES IN tg_txpca004_nbm
****            WHERE land1      = c_br
****            AND ( ( shipfrom = tg_txpca004_nbm-shipfrom
****                AND shipto   = tg_txpca004_nbm-shipto ) OR
****                    shipfrom = tg_txpca004_nbm-shipto AND
****                    shipto   = tg_txpca004_nbm-shipto )
****            AND ( gruop      = c_44
****                OR gruop     = c_45
****                OR gruop     = c_85 )
****            AND value        = tg_txpca004_nbm-nbmcode
*****            AND validfrom   >= tg_txpca004_nbm-validfrom
*****            AND validfrom   <= tg_txpca004_nbm-validfrom.
****          AND validfrom  >= tg_txpca004_nbm-validfrom "validto.
****          AND validto   <= tg_txpca004_nbm-validfrom.
****
****    ENDIF.
  ENDIF.

  SORT tg_j_1btxic3.
  DELETE ADJACENT DUPLICATES FROM tg_j_1btxic3 COMPARING ALL FIELDS.
  SORT tg_j_1btxic3_to.
  DELETE ADJACENT DUPLICATES FROM tg_j_1btxic3_to COMPARING ALL FIELDS.


ENDFORM.                    " F_JUROS_ICMS
*&---------------------------------------------------------------------*
*&      Form  F_SEPARA_RANGES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_separa_ranges USING p_gruop.

  DATA: vl_tabix    TYPE sytabix,
        vl_tabix_c1 TYPE sytabix,
        vl_tabix_c3 TYPE sytabix.

  CLEAR: tg_txpca004_nbm.

*  TG_TXPCA004_TMP[]  = TG_TXPCA004[] .
  tg_j_1btxst3_tmp[] = tg_j_1btxst3[].
  tg_j_1btxic3_tmp[] = tg_j_1btxic3[].
  tg_j_1btxic1_tmp[] = tg_j_1btxic1[].

* Mantém somente o grupo de impostos específico desta rotina
  DELETE tg_j_1btxic3_tmp WHERE gruop NE p_gruop.

  SORT: tg_txpca004_tmp BY shipfrom  ASCENDING
                           shipto    ASCENDING
                           nbmcode   ASCENDING
                           validfrom ASCENDING.

  SORT: tg_j_1btxic3_tmp BY shipfrom ASCENDING
                            shipto   ASCENDING
                            value    ASCENDING.

  SORT: tg_j_1btxic1_tmp BY shipfrom  ASCENDING
                            shipto    ASCENDING
                            validfrom ASCENDING.

*  SORT: TG_J_1BTXIC3_FROM BY SHIPFROM ASCENDING
*                             SHIPTO   ASCENDING
*                             GRUOP    ASCENDING
*                             VALUE    ASCENDING.

  SORT: tg_j_1btxic3_to  BY shipfrom ASCENDING
                            shipto   ASCENDING
                            gruop    ASCENDING
                            value    ASCENDING.

* Para ajustar tipo do NBMCODE.
* Neste momento, só consta Letra = 'Branco'.
  LOOP AT tg_txpca004_tmp INTO eg_txpca004.
    eg_txpca004_nbm-shipfrom  = eg_txpca004-shipfrom.
    eg_txpca004_nbm-shipto    = eg_txpca004-shipto  .
    eg_txpca004_nbm-nbmcode   = eg_txpca004-nbmcode .
    eg_txpca004_nbm-validfrom = eg_txpca004-validfrom.
    APPEND: eg_txpca004_nbm TO tg_txpca004_nbm.
  ENDLOOP.
  CLEAR: eg_txpca004.

  LOOP AT tg_j_1btxst3_tmp INTO eg_j_1btxst3.
    vl_tabix = sy-tabix.
    READ TABLE tg_txpca004_tmp INTO eg_txpca004
         WITH KEY shipfrom  = eg_j_1btxst3-shipfrom
                  shipto    = eg_j_1btxst3-shipto
                  nbmcode   = eg_j_1btxst3-value
                  validfrom = eg_j_1btxst3-validfrom BINARY SEARCH.

* Tabela TG_TXPCA004_TMP só tem conteúdo da letra = 'BRANCO'.
* Por isso só deixar na ...ST3 referente a letra branco.
    IF sy-subrc EQ 0.
      READ TABLE tg_j_1btxic3_tmp INTO eg_j_1btxic3
           WITH KEY shipfrom = eg_txpca004-shipfrom
                    shipto   = eg_txpca004-shipto
                    value    = eg_txpca004-nbmcode BINARY SEARCH.
      IF sy-subrc EQ 0.
        vl_tabix_c3 = sy-tabix.

* Valida J_1BTXIC1
        READ TABLE tg_j_1btxic1_tmp INTO eg_j_1btxic1
             WITH KEY shipfrom  = eg_j_1btxic3-shipfrom
                      shipto    = eg_j_1btxic3-shipto
                      validfrom = eg_j_1btxic3-validfrom BINARY SEARCH.
        IF sy-subrc EQ 0.
          vl_tabix_c1 = sy-tabix.
          IF eg_j_1btxic3-validfrom >= eg_j_1btxic1-validfrom.

          ELSE.

* Não existe no período selecionado
            DELETE tg_j_1btxic1_tmp INDEX vl_tabix_c3.
          ENDIF.

        ENDIF.

        IF eg_j_1btxic3-validfrom >= eg_txpca004-validfrom AND
           eg_j_1btxic3-validto   <= eg_txpca004-validfrom.

        ELSE.

* Não existe no período selecionado
          DELETE tg_j_1btxic3 INDEX vl_tabix_c3.
        ENDIF.
*      else.
*        delete TG_J_1BTXIC3 WHERE SHIPFROM = EG_TXPCA004-SHIPFROM
*                              and SHIPTO   = EG_TXPCA004-SHIPTO
*                              and VALUE    = EG_TXPCA004-NBMCODE .
      ENDIF.
    ELSE.
      DELETE tg_j_1btxst3_tmp INDEX vl_tabix.
    ENDIF.
  ENDLOOP.
  CLEAR: eg_j_1btxst3.

ENDFORM.                    " F_SEPARA_RANGES
*&---------------------------------------------------------------------*
*&      Form  F_CALCULO_ICMS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_calculo_icms .

  IF NOT tg_txpca004[] IS INITIAL.
    SELECT land1
           shipfrom
           shipto
           validfrom
           rate
           rate_f
      FROM j_1btxic1
      INTO TABLE tg_j_1btxic1
        FOR ALL ENTRIES IN tg_txpca004
        WHERE land1     = c_br
          AND shipfrom  = tg_txpca004-shipto
          AND shipto    = tg_txpca004-shipto
          AND validfrom => tg_txpca004-validfrom.

  ENDIF.

  IF NOT tg_j_1btxic3[] IS INITIAL.

    SELECT land1
           shipfrom
           shipto
           validfrom
           rate
           rate_f
      FROM j_1btxic1
      APPENDING TABLE tg_j_1btxic1
        FOR ALL ENTRIES IN tg_j_1btxic3
        WHERE land1     = tg_j_1btxic3-land1
          AND shipfrom  = tg_j_1btxic3-shipfrom
          AND shipto    = tg_j_1btxic3-shipto
          AND validfrom => tg_j_1btxic3-validfrom.

    SELECT land1
           shipfrom
           shipto
           validfrom
           rate
           rate_f
      FROM j_1btxic1
      APPENDING TABLE tg_j_1btxic1
        FOR ALL ENTRIES IN tg_j_1btxic3
        WHERE land1     = tg_j_1btxic3-land1
          AND shipfrom  = tg_j_1btxic3-shipto
          AND shipto    = tg_j_1btxic3-shipto
          AND validfrom => tg_j_1btxic3-validfrom.

  ENDIF.

  SORT: tg_j_1btxic1 BY land1     ASCENDING
                        shipfrom  ASCENDING
                        shipto    ASCENDING
                        validfrom ASCENDING.
  DELETE ADJACENT DUPLICATES FROM tg_j_1btxic1
         COMPARING land1 shipfrom shipto validfrom.

ENDFORM.                    " F_CALCULO_ICMS
*&---------------------------------------------------------------------*
*&      Form  F_DEFINE_REGRAS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_define_regras.

  LOOP AT tg_j_1btxic3 INTO eg_j_1btxic3.
    LOOP AT tg_j_1btxic1 INTO eg_j_1btxic1 WHERE land1     =  eg_j_1btxic3-land1
                                             AND shipfrom  =  eg_j_1btxic3-shipfrom
                                             AND shipto    =  eg_j_1btxic3-shipto
                                             AND validfrom => eg_j_1btxic3-validfrom.
      CLEAR: eg_j_1batl1.
      vg_rate = eg_j_1btxic3-rate.
      READ TABLE tg_j_1batl1 INTO eg_j_1batl1 WITH KEY taxlaw = eg_j_1btxic3-taxlaw BINARY SEARCH.

      CASE eg_j_1btxic3-base.

        WHEN '100'.
          PERFORM: f_compara_aliq_repro USING vg_rate.

        WHEN OTHERS.
          vg_rate = ( eg_j_1btxic3-rate * eg_j_1btxic3-base ) / 100.
          PERFORM: f_compara_aliq_repro USING vg_rate.

      ENDCASE.
    ENDLOOP.
    CLEAR: eg_j_1btxic1.
  ENDLOOP.
  CLEAR: eg_j_1btxic3.

  CLEAR: tg_j_1btxic1, tg_j_1btxic3, tg_j_1btxst3.

ENDFORM.                    " F_DEFINE_REGRAS
*&---------------------------------------------------------------------*
*&      Form  F_LEI_FISCAL_ICMS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_lei_fiscal_icms .

  IF NOT tg_j_1btxic3[] IS INITIAL.
    SELECT taxlaw
           taxsit
      FROM j_1batl1
      INTO TABLE tg_j_1batl1
        FOR ALL ENTRIES IN tg_j_1btxic3
        WHERE taxlaw = tg_j_1btxic3-taxlaw.
    IF sy-subrc EQ 0.
      SORT: tg_j_1batl1 BY taxlaw ASCENDING.
    ENDIF.
  ENDIF.

*  IF NOT TG_J_1BTXIC3_FROM[] IS INITIAL.
*    SELECT TAXLAW
*           TAXSIT
*      FROM J_1BATL1
*      APPENDING TABLE TG_J_1BATL1
*        FOR ALL ENTRIES IN TG_J_1BTXIC3_FROM
*        WHERE TAXLAW = TG_J_1BTXIC3_FROM-TAXLAW.
*  ENDIF.

  IF NOT tg_j_1btxic3_to[] IS INITIAL.
    SELECT taxlaw
           taxsit
      FROM j_1batl1
      APPENDING TABLE tg_j_1batl1
        FOR ALL ENTRIES IN tg_j_1btxic3_to
        WHERE taxlaw = tg_j_1btxic3_to-taxlaw.
  ENDIF.

  IF NOT tg_j_1batl1[] IS INITIAL.
    SORT: tg_j_1batl1 BY taxlaw ASCENDING.
    DELETE ADJACENT DUPLICATES FROM tg_j_1batl1 COMPARING taxlaw.
  ENDIF.

ENDFORM.                    " F_LEI_FISCAL_ICMS
*&---------------------------------------------------------------------*
*&      Form  F_COMPARA_ALIQ_REPRO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_RATE  text
*----------------------------------------------------------------------*
FORM f_compara_aliq_repro USING p_rate.

  IF p_rate = eg_j_1btxic1-rate.

    CASE eg_j_1batl1-taxsit.

* Regra 'A'
      WHEN '1'.             " 10 pela exit de conversão
        PERFORM: f_regra_a_proc.

* Regra 'E'
      WHEN '9'.
        PERFORM: f_regra_e_proc.

      WHEN OTHERS.

    ENDCASE.
  ELSE.

    CASE eg_j_1batl1-taxsit.

* Regra 'G'
      WHEN '1' OR '6'.             " 10 ou 60 pela exit de conversão
* Gravar TAXSIT no campo 'CST' do gruop '45'.
        PERFORM: f_regra_g_proc.

      WHEN '9'.
* Regra 'H'
      WHEN OTHERS.
        PERFORM: f_regra_h_proc.

    ENDCASE.

  ENDIF.

ENDFORM.                    " F_COMPARA_ALIQ_REPRO
*&---------------------------------------------------------------------*
*&      Form  F_REGRAS_BRANCO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_regras_branco .

  LOOP AT tg_txpca004_tmp INTO eg_txpca004.

    LOOP AT tg_j_1btxic3_tmp INTO eg_j_1btxic3 WHERE shipfrom = eg_txpca004-shipfrom
                                                 AND shipto   = eg_txpca004-shipto
                                                 AND gruop    = c_45
                                                 AND value    = eg_txpca004-nbmcode.

*    LOOP AT tg_j_1btxic3_to INTO eg_j_1btxic3 WHERE shipfrom = eg_txpca004-shipto
*                                                AND shipto   = eg_txpca004-shipto
*                                                AND gruop    = c_85
*                                                AND value    = eg_txpca004-nbmcode.

***    LOOP AT tg_j_1btxic3_to INTO eg_j_1btxic3 WHERE shipfrom = eg_txpca004-shipto
***                                                AND shipto   = eg_txpca004-shipto
***                                                AND gruop    = c_85
***                                                AND value    = eg_txpca004-nbmcode.


      LOOP AT tg_j_1btxic1_tmp INTO eg_j_1btxic1 WHERE land1     =  eg_j_1btxic3-land1
                                                   AND shipfrom  =  eg_j_1btxic3-shipfrom
                                                   AND shipto    =  eg_j_1btxic3-shipto
                                                   AND validfrom => eg_j_1btxic3-validfrom.
        CLEAR: eg_j_1batl1.
        vg_rate = eg_j_1btxic3-rate.
        READ TABLE tg_j_1batl1 INTO eg_j_1batl1 WITH KEY taxlaw = eg_j_1btxic3-taxlaw BINARY SEARCH.
        IF sy-subrc EQ 0.
          vg_taxsit = eg_j_1batl1-taxsit.
        ENDIF.

        CASE eg_j_1btxic3-base.

          WHEN '100'.
* Se for base sem fórmula, gravar ZRATE1 e ZRATE3 (iguais).
            PERFORM: f_compara_aliq_repro USING vg_rate.

          WHEN OTHERS.
            vg_rate = ( eg_j_1btxic3-rate * eg_j_1btxic3-base ) / 100.
            PERFORM: f_compara_aliq_repro USING vg_rate.

        ENDCASE.
        CLEAR: eg_j_1btxic1.
      ENDLOOP.

      IF sy-subrc <> 0.
        CONCATENATE 'Z02' text-100 eg_txpca004-shipfrom
                                   eg_txpca004-shipto
                                   eg_txpca004-nbmcode(16)
* Conteúdo 'shipfrom' 'shipto' faltante
        text-090 text-101 INTO eg_erro-text SEPARATED BY ';'.
        APPEND: eg_erro TO tg_erro.

      ENDIF.

    ENDLOOP.
    CLEAR: eg_j_1btxic3.

    IF sy-subrc <> 0.
* Combinação 'xxx' da J_1BTXIC1 não existe
      CONCATENATE c_z01 text-100 eg_txpca004-shipfrom
                                 eg_txpca004-shipto
                                 c_45
                                 eg_txpca004-nbmcode(16)
                  text-040 INTO eg_erro-text SEPARATED BY ';'.
      APPEND: eg_erro TO tg_erro.
    ENDIF.

  ENDLOOP.
  CLEAR: eg_txpca004.

*  CLEAR: TG_J_1BTXIC1, TG_J_1BTXIC3, TG_J_1BTXST3.


ENDFORM.                    " F_REGRAS_BRANCO

*&---------------------------------------------------------------------*
*&      Form  f_reproc_regras_ae
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_reproc_regras_ae .

  LOOP AT tg_txpca004_tmp INTO eg_txpca004.

**    LOOP AT TG_J_1BTXIC3_TMP INTO EG_J_1BTXIC3 WHERE SHIPFROM = EG_TXPCA004-SHIPFROM
**                                                 AND SHIPTO   = EG_TXPCA004-SHIPTO
**                                                 AND VALUE    = EG_TXPCA004-NBMCODE.
*    LOOP AT tg_j_1btxic3_to INTO eg_j_1btxic3 WHERE shipfrom = eg_txpca004-shipto
*                                                AND shipto   = eg_txpca004-shipto
*                                                AND gruop    = c_85
*                                                AND value    = eg_txpca004-nbmcode.



    PERFORM: f_regra_ae_reproc.


*    ENDLOOP.
    CLEAR: eg_j_1btxic3.

  ENDLOOP.
  CLEAR: eg_txpca004.

*  CLEAR: TG_J_1BTXIC1, TG_J_1BTXIC3, TG_J_1BTXST3.


ENDFORM.                    "f_reproc_regras_ae
*&---------------------------------------------------------------------*
*&      Form  F_REGRA_G_PROC
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_regra_g_proc .

  CLEAR: vg_taxsit1.

  READ TABLE tg_j_1btxic3_to INTO eg_j_1btxic3_85
       WITH KEY shipfrom = eg_txpca004-shipto
                shipto   = eg_txpca004-shipto
                gruop    = c_85
                value    = eg_txpca004-nbmcode BINARY SEARCH.
  IF sy-subrc EQ 0.

    READ TABLE tg_j_1batl1 INTO eg_j_1batl1_85
         WITH KEY taxlaw = eg_j_1btxic3_85-taxlaw BINARY SEARCH.
    IF sy-subrc EQ 0.
      IF eg_j_1batl1_85-taxsit = '6'.
        vg_taxsit1 = eg_j_1batl1_85-taxsit.
      ENDIF.
    ENDIF.

*Se encontrar, 85, buscar 44 também.

* Ver quais campos devem ser gravados dependendo das condições 85, 44, 45, etc...
* Na gravação da tabela Z..004.

* Comparar BASE e RATE novamente da condição '44' ou '45'.

* Buscas do gruops '44' ou '45'. Se referem aos campos:
* RATE1, RATE2, RATE4 e RED1.
    READ TABLE tg_j_1btxic3_to INTO eg_j_1btxic3_44
         WITH KEY shipfrom = eg_txpca004-shipto
                  shipto   = eg_txpca004-shipto
                  gruop    = c_44
                  value    = eg_txpca004-nbmcode BINARY SEARCH.
    IF sy-subrc EQ 0.
      PERFORM: f_compara_aliq_fim USING eg_j_1btxic3_85
                                        eg_j_1btxic3_44
                                        c_g.

    ELSE.
      READ TABLE tg_j_1btxic3_to INTO eg_j_1btxic3_45
           WITH KEY shipfrom = eg_txpca004-shipto
                    shipto   = eg_txpca004-shipto
                    gruop    = c_45
                    value    = eg_txpca004-nbmcode BINARY SEARCH.
      IF sy-subrc EQ 0.
        PERFORM: f_compara_aliq_fim USING eg_j_1btxic3_85
                                          eg_j_1btxic3_45
                                          c_g.

      ENDIF.

    ENDIF.

  ELSE.
    CONCATENATE c_z05 text-100 eg_txpca004-shipto
                               eg_txpca004-shipto
                               c_85
                               eg_txpca004-nbmcode
                text-040 INTO eg_erro-text SEPARATED BY ';'.
    APPEND: eg_erro TO tg_erro.
  ENDIF.

ENDFORM.                    " F_REGRA_G_PROC
*&---------------------------------------------------------------------*
*&      Form  F_COMPARA_ALIQ_FIM
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_RATE  text
*----------------------------------------------------------------------*
FORM f_compara_aliq_fim  USING p_1btxic3_a STRUCTURE eg_j_1btxic3_from
                               p_1btxic3_b STRUCTURE eg_j_1btxic3_from
                               p_letra.

  CASE p_letra.
    WHEN c_a.
      IF p_1btxic3_a-rate IS INITIAL AND
         p_1btxic3_a-base IS INITIAL.

* Se CST1 estiver em branco, gravar do TAXSIT acima.
* Se CST1 estiver preenchido, manter da ZTSDD_TXPCA004-CST1.
        IF NOT eg_txpca004-cst IS INITIAL.
          vg_taxsit1 = eg_txpca004-cst1.
        ENDIF.
      ENDIF.
      PERFORM: f_atualiza_icms USING eg_txpca004-nbmcode    " NBMCODE
                                     eg_txpca004-shipfrom   " Shipfrom
                                     eg_txpca004-shipto     " Shipto
                                     eg_txpca004-validfrom  " Validfrom
                                     eg_txpca004-nbmcode2   " NBMCODE2
                                     p_letra                " Letra
                                     eg_j_1btxst3-rate      " Rate
                                     eg_txpca004-knumh1     " Knumh1
                                     p_1btxic3_a-base       " Base
                                     eg_j_1btxic3-rate      " RATE3
                                     eg_txpca004-red        " RED
                                     vg_taxsit1             " CST
                                     p_1btxic3_b-rate       " RATE2
                                     p_1btxic3_b-base       " Base1
                                     vg_rate                " Rate4
                                     p_1btxic3_b-base       " Red1
                                     vg_taxsit1             " CST1
                                     eg_txpca004-knumh      " KNUMH
                                     eg_j_1btxic3-rate      " Rate1
                                     sy-datum               " Udate
                                     sy-uzeit               " Utime
                                     c_d                    " Change_ind
                                     c_1                    " Status
                                     eg_txpca004-status1.   " Status1

    WHEN c_b OR c_c OR c_d.

      PERFORM: f_atualiza_icms USING p_1btxic3_a-value(16)     " NBMCODE
                                     p_1btxic3_a-shipfrom   " Shipfrom
                                     p_1btxic3_a-shipto     " Shipto
                                     p_1btxic3_a-validfrom  " Validfrom
                                     eg_txpca004-nbmcode2   " NBMCODE2
                                     p_letra                " Letra
                                     eg_txpca004-rate       " Rate
                                     eg_txpca004-knumh1     " Knumh1
                                     p_1btxic3_b-base       " Base
                                     p_1btxic3_a-rate       " RATE3
                                     p_1btxic3_a-base       " RED
                                     eg_txpca004-cst        " CST (pode estar atualizado)
*                                     VG_RATE                " RATE2
                                     p_1btxic3_a-rate       " RATE2
                                     p_1btxic3_b-base       " Base1
*                                     VG_RATE                " Rate4
                                     p_1btxic3_a-rate       " Rate4
                                     p_1btxic3_b-base       " Red1
                                     vg_taxsit1             " CST1
                                     eg_txpca004-knumh      " KNUMH
                                     p_1btxic3_a-rate       " RATE1
                                     sy-datum               " Udate
                                     sy-uzeit               " Utime
                                     c_a                    " Change_ind
                                     eg_txpca004-status     " Status
                                     eg_txpca004-status1.   " Status1

    WHEN c_g.
      CASE p_1btxic3_b-base.

        WHEN '100'.
          vg_rate = p_1btxic3_b-rate.

        WHEN OTHERS.
          vg_rate = ( p_1btxic3_b-rate * p_1btxic3_b-base ) / 100.

      ENDCASE.

* ZRATE1, ICMS com fórmula.
* ZBASE,


* Rotina utilizada para REPROCESSAMENTO. TESTAR.
* Gravar TAXSIT no campo CST1 do gruop '85'.
      PERFORM: f_atualiza_icms USING eg_txpca004-nbmcode    " NBMCODE
                                     eg_txpca004-shipfrom   " Shipfrom
                                     eg_txpca004-shipto     " Shipto
                                     eg_txpca004-validfrom  " Validfrom
                                     eg_txpca004-nbmcode2   " NBMCODE2
                                     p_letra                " Letra
                                     eg_txpca004-rate       " Rate
                                     eg_txpca004-knumh1     " Knumh1
                                     p_1btxic3_b-base       " Base
                                     eg_j_1btxic3-rate      " RATE3
                                     eg_j_1btxic3-base      " RED
                                     vg_taxsit              " CST
                                     vg_rate                " RATE2
                                     p_1btxic3_b-base       " Base1
                                     vg_rate                " Rate4
                                     p_1btxic3_b-base       " Red1
                                     vg_taxsit1             " CST1
                                     eg_txpca004-knumh      " KNUMH
                                     eg_j_1btxic3-rate      " RATE1
                                     sy-datum               " Udate
                                     sy-uzeit               " Utime
                                     c_d                    " Change_ind
                                     eg_txpca004-status     " Status
                                     eg_txpca004-status1.   " Status1


    WHEN OTHERS.

  ENDCASE.

ENDFORM.                    " F_COMPARA_ALIQ_FIM
*&---------------------------------------------------------------------*
*&      Form  F_REGRA_H_PROC
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_regra_h_proc .

  CLEAR: vg_taxsit1.

  READ TABLE tg_j_1btxic3_to INTO eg_j_1btxic3_85
       WITH KEY shipfrom = eg_txpca004-shipto
                shipto   = eg_txpca004-shipto
                gruop    = c_85
                value    = eg_txpca004-nbmcode BINARY SEARCH.
  IF sy-subrc EQ 0.

    READ TABLE tg_j_1batl1 INTO eg_j_1batl1_85
         WITH KEY taxlaw = eg_j_1btxic3_85-taxlaw BINARY SEARCH.
    IF sy-subrc EQ 0.
      IF eg_j_1batl1_85-taxsit = '6'.
        vg_taxsit1 = eg_j_1batl1_85-taxsit.
      ENDIF.
    ENDIF.

*Se encontrar, 85, buscar 44 também.

* Ver quais campos devem ser gravados dependendo das condições 85, 44, 45, etc...
* Na gravação da tabela Z..004.

* Comparar BASE e RATE novamente da condição '44' ou '45'.

* Buscas do gruops '44' ou '45'. Se referem aos campos:
* RATE1, RATE2, RATE4 e RED1.
    READ TABLE tg_j_1btxic3_to INTO eg_j_1btxic3_44
         WITH KEY shipfrom = eg_txpca004-shipto
                  shipto   = eg_txpca004-shipto
                  gruop    = c_44
                  value    = eg_txpca004-nbmcode BINARY SEARCH.
    IF sy-subrc EQ 0.
      PERFORM: f_compara_aliq_fim USING eg_j_1btxic3_85
                                        eg_j_1btxic3_44
                                        c_h.

    ELSE.
      READ TABLE tg_j_1btxic3_to INTO eg_j_1btxic3_45
           WITH KEY shipfrom = eg_txpca004-shipto
                    shipto   = eg_txpca004-shipto
                    gruop    = c_45
                    value    = eg_txpca004-nbmcode BINARY SEARCH.
      IF sy-subrc EQ 0.
        PERFORM: f_compara_aliq_fim USING eg_j_1btxic3_85
                                          eg_j_1btxic3_45
                                          c_h.

      ENDIF.

    ENDIF.

  ELSE.
    CONCATENATE c_z09 text-100 eg_txpca004-shipto
                               eg_txpca004-shipto
                               c_85
                               eg_txpca004-nbmcode
                text-040 INTO eg_erro-text SEPARATED BY ';'.
    APPEND: eg_erro TO tg_erro.
  ENDIF.


ENDFORM.                    " F_REGRA_H_PROC
*&---------------------------------------------------------------------*
*&      Form  F_REGRA_A_PROC
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_regra_a_proc .

  CLEAR: vg_taxsit1.

  READ TABLE tg_j_1btxic3_to INTO eg_j_1btxic3_85
       WITH KEY shipfrom = eg_txpca004-shipto
                shipto   = eg_txpca004-shipto
                gruop    = c_85
                value    = eg_txpca004-nbmcode BINARY SEARCH.
  IF sy-subrc EQ 0.

    READ TABLE tg_j_1batl1 INTO eg_j_1batl1_85
         WITH KEY taxlaw = eg_j_1btxic3_85-taxlaw BINARY SEARCH.
    IF sy-subrc EQ 0.
      IF eg_j_1batl1_85-taxsit = '6'.
        vg_taxsit1 = eg_j_1batl1_85-taxsit.
      ENDIF.
    ENDIF.

    READ TABLE tg_j_1btxst3 INTO eg_j_1btxst3
         WITH KEY shipfrom  = eg_txpca004-shipfrom
                  shipto    = eg_txpca004-shipto
                  value     = eg_txpca004-nbmcode
                  validfrom = eg_txpca004-validfrom BINARY SEARCH.

    PERFORM: f_compara_aliq_fim USING eg_j_1btxic3_85
                                      eg_j_1btxic3_85
                                      c_a.

  ELSE.
    CONCATENATE c_z03 text-100 eg_txpca004-shipto
                               eg_txpca004-shipto
                               c_85
                               eg_txpca004-nbmcode
                text-040 INTO eg_erro-text SEPARATED BY ';'.
    APPEND: eg_erro TO tg_erro.

*  ELSE.
*    CONCATENATE TEXT-100 EG_TXPCA004-SHIPFROM
*                         EG_TXPCA004-SHIPTO
*                         C_85
*                         EG_TXPCA004-NBMCODE
*                TEXT-040 INTO EG_ERRO_Z05-text separated by ';'.
*    APPEND: EG_ERRO_Z05 TO TG_ERRO_Z05.
  ENDIF.

ENDFORM.                    " F_REGRA_A_PROC

*&---------------------------------------------------------------------*
*&      Form  f_regra_ae_reproc
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_regra_ae_reproc .

  CLEAR: vg_taxsit1.

  READ TABLE tg_j_1btxic3_to INTO eg_j_1btxic3_85
       WITH KEY shipfrom = eg_txpca004-shipto
                shipto   = eg_txpca004-shipto
                gruop    = c_85
                value    = eg_txpca004-nbmcode BINARY SEARCH.
  IF sy-subrc EQ 0.

    READ TABLE tg_j_1batl1 INTO eg_j_1batl1_85
         WITH KEY taxlaw = eg_j_1btxic3_85-taxlaw BINARY SEARCH.

    IF sy-subrc EQ 0.

      IF eg_j_1batl1_85-taxsit = '6' AND
         eg_j_1btxic3_85-rate IS INITIAL AND
         eg_j_1btxic3_85-base IS INITIAL.

        vg_taxsit1 = eg_j_1batl1_85-taxsit.


        READ TABLE tg_j_1btxst3 INTO eg_j_1btxst3
             WITH KEY shipfrom  = eg_txpca004-shipfrom
                      shipto    = eg_txpca004-shipto
                      value     = eg_txpca004-nbmcode
                      validfrom = eg_txpca004-validfrom BINARY SEARCH.


        PERFORM: f_atualiza_icms USING eg_txpca004-nbmcode    " NBMCODE
                                       eg_txpca004-shipfrom   " Shipfrom
                                       eg_txpca004-shipto     " Shipto
                                       eg_txpca004-validfrom  " Validfrom
                                       eg_txpca004-nbmcode2   " NBMCODE2
                                       eg_txpca004-letra                " Letra
                                       eg_j_1btxst3-rate      " Rate
                                       eg_txpca004-knumh1     " Knumh1
                                       eg_txpca004-base       " Base
                                       eg_txpca004-rate3      " RATE3
                                       eg_txpca004-red        " RED
                                       eg_txpca004-cst         " CST
                                       eg_j_1btxic3_85-rate   " RATE2
                                       eg_j_1btxic3_85-base   " Base1
                                       eg_j_1btxic3_85-rate   " Rate4
                                       eg_j_1btxic3_85-base  " Red1
                                       vg_taxsit1             " CST1
                                       eg_txpca004-knumh      " KNUMH
                                       eg_txpca004-rate1      " Rate1
                                       sy-datum               " Udate
                                       sy-uzeit               " Utime
                                       c_i                    " Change_ind
                                       c_1                    " Status
                                       eg_txpca004-status1.   " Status1

      ENDIF.
    ENDIF.

  ELSE.

    IF eg_txpca004-letra = c_a.

      CONCATENATE c_z03 text-100 eg_txpca004-shipto
                                 eg_txpca004-shipto
                                 c_85
                                 eg_txpca004-nbmcode
                  text-040 INTO eg_erro-text SEPARATED BY ';'.
      APPEND: eg_erro TO tg_erro.


    ELSEIF eg_txpca004-letra = c_e.
      CONCATENATE c_z07 text-100 eg_txpca004-shipto
                                 eg_txpca004-shipto
                                 c_85
                                 eg_txpca004-nbmcode
                  text-040 INTO eg_erro-text SEPARATED BY ';'.
      APPEND: eg_erro TO tg_erro.

    ENDIF.
*  ELSE.
*    CONCATENATE TEXT-100 EG_TXPCA004-SHIPFROM
*                         EG_TXPCA004-SHIPTO
*                         C_85
*                         EG_TXPCA004-NBMCODE
*                TEXT-040 INTO EG_ERRO_Z05-text separated by ';'.
*    APPEND: EG_ERRO_Z05 TO TG_ERRO_Z05.
  ENDIF.

ENDFORM.                    "f_regra_ae_reproc
*&---------------------------------------------------------------------*
*&      Form  F_REGRA_E_PROC
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_regra_e_proc .

  CLEAR: vg_taxsit1.

  READ TABLE tg_j_1btxic3_to INTO eg_j_1btxic3_85
       WITH KEY shipfrom = eg_txpca004-shipto
                shipto   = eg_txpca004-shipto
                gruop    = c_85
                value    = eg_txpca004-nbmcode BINARY SEARCH.
  IF sy-subrc EQ 0.

    READ TABLE tg_j_1batl1 INTO eg_j_1batl1_85
         WITH KEY taxlaw = eg_j_1btxic3_85-taxlaw BINARY SEARCH.
    IF sy-subrc EQ 0.
      IF eg_j_1batl1_85-taxsit = '6'.
        vg_taxsit1 = eg_j_1batl1_85-taxsit.
      ENDIF.
    ENDIF.

    READ TABLE tg_j_1btxst3 INTO eg_j_1btxst3
         WITH KEY shipfrom  = eg_txpca004-shipfrom
                  shipto    = eg_txpca004-shipto
                  value     = eg_txpca004-nbmcode
                  validfrom = eg_txpca004-validfrom BINARY SEARCH.

    PERFORM: f_compara_aliq_fim USING eg_j_1btxic3_85
                                      eg_j_1btxic3_85
                                      c_e.

  ELSE.
    CONCATENATE c_z07 text-100 eg_txpca004-shipto
                               eg_txpca004-shipto
                               c_85
                               eg_txpca004-nbmcode
                text-040 INTO eg_erro-text SEPARATED BY ';'.
    APPEND: eg_erro TO tg_erro.
  ENDIF.

ENDFORM.                    " F_REGRA_E_PROC
*&---------------------------------------------------------------------*
*&      Form  F_ENVIA_ERROS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_envia_erros.

  CHECK: tg_erro IS NOT INITIAL.

  SORT tg_erro.
  DELETE ADJACENT DUPLICATES FROM tg_erro COMPARING ALL FIELDS.

  LOOP AT rg_mm_tx_000_012_email INTO eg_range_email.
* LOG INTERFACE SAP GEMCO
    PERFORM: f_preenche_email USING c_mailfromsap
                                    text-010 " LOG INTERFACE SAP GEMCO
                                    c_p
                                    c_1
                                    c_1065.

    PERFORM f_envia_email
*        USING: EG_DOC_DATA
                        TABLES: tg_header
                                tg_content
                                tg_object_para
                                tg_object_parb
                                tg_receivers.
*                                TG_ERRO.

    CLEAR: eg_range_email.

    REFRESH:tg_header, tg_receivers, tg_content.

  ENDLOOP.
  CLEAR: eg_range_email.

  CLEAR: tg_erro       , tg_content    ,
         tg_header     , tg_object_para,
         tg_object_parb, tg_receivers  .

ENDFORM.                    " F_ENVIA_ERROS
*&---------------------------------------------------------------------*
*&      Form  F_SEPARA_RATE_VALOR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_separa_rate_valor USING p_letra.

  tg_txpca004_tmp[]  = tg_txpca004[] .
  DELETE tg_txpca004_tmp WHERE letra NE p_letra OR
                               rate = p_letra.

ENDFORM.                    " F_SEPARA_RATE_VALOR
*&---------------------------------------------------------------------*
*&      Form  F_SEPARA_RATE_BRANCO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LETRA   text
*----------------------------------------------------------------------*
FORM f_separa_rate_branco USING  p_letra.

  tg_txpca004_tmp[]  = tg_txpca004[] .
  DELETE tg_txpca004_tmp WHERE letra NE p_letra OR
                               rate  NE p_letra.

ENDFORM.                    " F_SEPARA_RATE_BRANCO
*&---------------------------------------------------------------------*
*&      Form  F_REGRAS_BRANCO_NORATE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_regras_branco_norate .

  LOOP AT tg_txpca004_tmp INTO eg_txpca004.

    LOOP AT tg_j_1btxic3_tmp INTO eg_j_1btxic3 WHERE shipfrom = eg_txpca004-shipfrom
                                                 AND shipto   = eg_txpca004-shipto
                                                 AND value    = eg_txpca004-nbmcode.
*      LOOP AT TG_J_1BTXIC1_TMP INTO EG_J_1BTXIC1 WHERE LAND1     =  EG_J_1BTXIC3-LAND1
*                                                   AND SHIPFROM  =  EG_J_1BTXIC3-SHIPFROM
*                                                   AND SHIPTO    =  EG_J_1BTXIC3-SHIPTO
*                                                   AND VALIDFROM => EG_J_1BTXIC3-VALIDFROM.
      CLEAR: eg_j_1batl1.
      vg_rate = eg_j_1btxic3-rate.
      READ TABLE tg_j_1batl1 INTO eg_j_1batl1 WITH KEY taxlaw = eg_j_1btxic3-taxlaw BINARY SEARCH.
      IF sy-subrc EQ 0.
        vg_taxsit = eg_j_1batl1-taxsit.
      ENDIF.

      CASE eg_j_1btxic3-base.

        WHEN '100'.
* Se for base sem fórmula, gravar ZRATE1 e ZRATE3 (iguais).
          PERFORM: f_define_bcd USING vg_rate.

        WHEN OTHERS.
          vg_rate = ( eg_j_1btxic3-rate * eg_j_1btxic3-base ) / 100.
          PERFORM: f_define_bcd USING vg_rate.

      ENDCASE.
*      ENDLOOP.
*      CLEAR: EG_J_1BTXIC1.
    ENDLOOP.
    CLEAR: eg_j_1btxic3.

    IF sy-subrc <> 0.
* Combinação 'xxx' da J_1BTXIC1 não existe

      IF eg_txpca004-letra = ' '.


        CONCATENATE c_z01 text-100 eg_txpca004-shipfrom
                                   eg_txpca004-shipto
                                   c_45
                                   eg_txpca004-nbmcode(16)
                    text-080 INTO eg_erro-text SEPARATED BY ';'.
        APPEND: eg_erro TO tg_erro.

      ENDIF.
    ENDIF.

  ENDLOOP.
  CLEAR: eg_txpca004.


ENDFORM.                    " F_REGRAS_BRANCO_NORATE
*&---------------------------------------------------------------------*
*&      Form  F_DEFINE_BCD
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_VG_RATE  text
*----------------------------------------------------------------------*
FORM f_define_bcd  USING    p_vg_rate.


  CASE eg_j_1batl1-taxsit.

* Regra 'B'
    WHEN '2'.             "
      PERFORM: f_regra_b_proc.

* Regra 'C'
    WHEN '4'.
      PERFORM: f_regra_c_proc.

* Regra 'D'
    WHEN '0' OR ''.
      PERFORM: f_regra_d_proc.

    WHEN OTHERS.

  ENDCASE.


ENDFORM.                    " F_DEFINE_BCD
*&---------------------------------------------------------------------*
*&      Form  F_REGRA_B_PROC
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_regra_b_proc .

* Rotina F_GRAVA_BCD trata das gravações das regras B, C ou D.
* Segue o mesmo raciocínio da F_COMPARA_ALIQ_FIM, porém com estrutura da J_1BTXIC1.
* F_COMPARA_ALIQ_FIM quando encontra na tabela J_1BTXIC3.
* F_GRAVA_BCD quando encontra na tabela J_1BTXIC1.

  CLEAR: vg_taxsit1.

* Neste caso o campo BASE deverá ser diferente de 0,00 ou 100,00.
* caso seja igual, continuará com status 5 e não segue o processamento.
  CHECK eg_j_1btxic3-base <> '' AND
        eg_j_1btxic3-base <> '100'.

* Se o campo ZCST estiver em branco preencher com o valor encontrado.
  IF eg_txpca004-cst IS INITIAL.
    eg_txpca004-cst = vg_taxsit.
  ENDIF.

  READ TABLE tg_j_1btxic3 INTO eg_j_1btxic3_85
       WITH KEY shipfrom = eg_txpca004-shipfrom
                shipto   = eg_txpca004-shipto
                gruop    = c_85
                value    = eg_txpca004-nbmcode BINARY SEARCH.
  IF sy-subrc EQ 0.

*    READ TABLE TG_J_1BTXST3 INTO EG_J_1BTXST3
*         with key SHIPFROM  = EG_TXPCA004-SHIPFROM
*                  SHIPTO    = EG_TXPCA004-SHIPTO
*                  VALUE     = EG_TXPCA004-NBMCODE
*                  VALIDFROM = EG_TXPCA004-VALIDFROM BINARY SEARCH.

    PERFORM: f_compara_aliq_fim USING eg_j_1btxic3_85
                                      eg_j_1btxic3_85
                                      c_b.

  ELSE.
    LOOP AT tg_j_1btxic1 INTO eg_j_1btxic1 WHERE land1     =  c_br
                                             AND shipfrom  =  eg_txpca004-shipfrom
                                             AND shipto    =  eg_txpca004-shipto
                                             AND validfrom => eg_txpca004-validfrom.
      PERFORM: f_grava_bcd USING eg_j_1btxic1
                                 c_b.

    ENDLOOP.
    IF sy-subrc NE 0.
* Combinação 'xxx' 'yyy' da J_1BTXIC3/J_1BTXIC1 não existe.
      CONCATENATE c_z11 text-100 eg_txpca004-shipfrom
                                 eg_txpca004-shipto
                                 c_85
                                 eg_txpca004-nbmcode
                  text-070 INTO eg_erro-text SEPARATED BY ';'.
      APPEND: eg_erro TO tg_erro.
    ENDIF.
    CLEAR: eg_j_1btxic1.

  ENDIF.

ENDFORM.                    " F_REGRA_B_PROC
*&---------------------------------------------------------------------*
*&      Form  F_GRAVA_BCD
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_1BTXIC1  text
*      -->P_LETRA    text
*----------------------------------------------------------------------*
FORM f_grava_bcd  USING p_1btxic1   STRUCTURE eg_j_1btxic1 " Regras B, C, D.
                        p_letra.

  CASE p_letra.
    WHEN c_b OR c_c OR c_d.

      PERFORM: f_atualiza_icms USING eg_txpca004-nbmcode   " NBMCODE
                                     p_1btxic1-shipfrom    " Shipfrom
                                     p_1btxic1-shipto      " Shipto
                                     p_1btxic1-validfrom   " Validfrom
                                     eg_txpca004-nbmcode2  " NBMCODE2
                                     p_letra               " Letra
                                     eg_txpca004-rate      " Rate
                                     eg_txpca004-knumh1    " Knumh1
                                     eg_txpca004-base      " Base
                                     p_1btxic1-rate        " RATE3
                                     eg_txpca004-base      " RED
                                     vg_taxsit             " CST
*                                     VG_RATE               " RATE2
                                     p_1btxic1-rate        " RATE2
                                     eg_txpca004-base      " Base1
*                                     VG_RATE               " Rate4
                                     p_1btxic1-rate        " Rate4
                                     eg_txpca004-base      " Red1
                                     vg_taxsit1            " CST1
                                     eg_txpca004-knumh     " KNUMH
                                     p_1btxic1-rate        " RATE1
                                     sy-datum              " Udate
                                     sy-uzeit              " Utime
                                     c_a                   " Change_ind
                                     eg_txpca004-status    " Status
                                     eg_txpca004-status1.  " Status1

    WHEN OTHERS.
  ENDCASE.

ENDFORM.                    " F_GRAVA_BCD
*&---------------------------------------------------------------------*
*&      Form  F_REGRA_C_PROC
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_regra_c_proc .

* Rotina F_GRAVA_BCD trata das gravações das regras B, C ou D.
* Segue o mesmo raciocínio da F_COMPARA_ALIQ_FIM, porém com estrutura da J_1BTXIC1.
* F_COMPARA_ALIQ_FIM quando encontra na tabela J_1BTXIC3.
* F_GRAVA_BCD quando encontra na tabela J_1BTXIC1.

  CLEAR: vg_taxsit1.

* O campo RATE deverá ser igual a 0,00, caso contrario deverá ser matido ZSTATUS 5
* e não segue o processamento.
  IF eg_j_1btxic3-rate IS INITIAL.

* Se o campo ZCST estiver em branco preencher com o valor encontrado.
    IF eg_txpca004-cst IS INITIAL.
      eg_txpca004-cst = vg_taxsit.
    ENDIF.

    READ TABLE tg_j_1btxic3 INTO eg_j_1btxic3_85
         WITH KEY shipfrom = eg_txpca004-shipfrom
                  shipto   = eg_txpca004-shipto
                  gruop    = c_85
                  value    = eg_txpca004-nbmcode BINARY SEARCH.
    IF sy-subrc EQ 0.

*    READ TABLE TG_J_1BTXST3 INTO EG_J_1BTXST3
*         with key SHIPFROM  = EG_TXPCA004-SHIPFROM
*                  SHIPTO    = EG_TXPCA004-SHIPTO
*                  VALUE     = EG_TXPCA004-NBMCODE
*                  VALIDFROM = EG_TXPCA004-VALIDFROM BINARY SEARCH.

      PERFORM: f_compara_aliq_fim USING eg_j_1btxic3_85
                                        eg_j_1btxic3_85
                                        c_c.

    ELSE.
      LOOP AT tg_j_1btxic1 INTO eg_j_1btxic1 WHERE land1     =  c_br
                                               AND shipfrom  =  eg_txpca004-shipfrom
                                               AND shipto    =  eg_txpca004-shipto
                                               AND validfrom => eg_txpca004-validfrom.
        PERFORM: f_grava_bcd USING eg_j_1btxic1
                                   c_c.
      ENDLOOP.
      IF sy-subrc NE 0.
* Combinação 'xxx' 'yyy' da J_1BTXIC3/J_1BTXIC1 não existe.
        CONCATENATE c_z14 text-100 eg_txpca004-shipfrom
                                   eg_txpca004-shipto
                                   c_85
                                   eg_txpca004-nbmcode
                    text-070 INTO eg_erro-text SEPARATED BY ';'.
        APPEND: eg_erro TO tg_erro.
      ENDIF.
      CLEAR: eg_j_1btxic1.

    ENDIF.

  ELSE.
    CONCATENATE c_z13 text-103 eg_txpca004-shipfrom
                              eg_txpca004-shipto
                              c_85
                              eg_txpca004-nbmcode
               text-070 INTO eg_erro-text SEPARATED BY ';'.
    APPEND: eg_erro TO tg_erro.
  ENDIF.

ENDFORM.                    " F_REGRA_C_PROC
*&---------------------------------------------------------------------*
*&      Form  F_REGRA_D_PROC
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_regra_d_proc .

* Rotina F_GRAVA_BCD trata das gravações das regras B, C ou D.
* Segue o mesmo raciocínio da F_COMPARA_ALIQ_FIM, porém com estrutura da J_1BTXIC1.
* F_COMPARA_ALIQ_FIM quando encontra na tabela J_1BTXIC3.
* F_GRAVA_BCD quando encontra na tabela J_1BTXIC1.

  CLEAR: vg_taxsit1.

* O campo J_1BTXIC3-BASE deverá ser igual a 100,00 e o campo RATE é diferente de 0,00
* se for diferente desta condição deverá continuar ZSTATUS1 = 5, e não segue o processamento.
  CHECK eg_j_1btxic3-base = '100' AND
        NOT eg_j_1btxic3-rate IS INITIAL.

* Se o campo ZCST estiver em branco preencher com o valor encontrado.
  IF eg_txpca004-cst IS INITIAL.
    eg_txpca004-cst = vg_taxsit.
  ENDIF.

  READ TABLE tg_j_1btxic3 INTO eg_j_1btxic3_85
       WITH KEY shipfrom = eg_txpca004-shipfrom
                shipto   = eg_txpca004-shipto
                gruop    = c_85
                value    = eg_txpca004-nbmcode BINARY SEARCH.
  IF sy-subrc EQ 0.

*    READ TABLE TG_J_1BTXST3 INTO EG_J_1BTXST3
*         with key SHIPFROM  = EG_TXPCA004-SHIPFROM
*                  SHIPTO    = EG_TXPCA004-SHIPTO
*                  VALUE     = EG_TXPCA004-NBMCODE
*                  VALIDFROM = EG_TXPCA004-VALIDFROM BINARY SEARCH.

    PERFORM: f_compara_aliq_fim USING eg_j_1btxic3_85
                                      eg_j_1btxic3_85
                                      c_d.

  ELSE.
    LOOP AT tg_j_1btxic1 INTO eg_j_1btxic1 WHERE land1     =  c_br
                                             AND shipfrom  =  eg_txpca004-shipfrom
                                             AND shipto    =  eg_txpca004-shipto
                                             AND validfrom => eg_txpca004-validfrom.
      PERFORM: f_grava_bcd USING eg_j_1btxic1
                                 c_d.
    ENDLOOP.
    IF sy-subrc NE 0.
* Combinação 'xxx' 'yyy' da J_1BTXIC3/J_1BTXIC1 não existe.
      CONCATENATE c_z16 text-100 eg_txpca004-shipfrom
                                 eg_txpca004-shipto
                                 c_85
                                 eg_txpca004-nbmcode
                  text-070 INTO eg_erro-text SEPARATED BY ';'.
      APPEND: eg_erro TO tg_erro.
    ENDIF.
    CLEAR: eg_j_1btxic1.

  ENDIF.

ENDFORM.                    " F_REGRA_D_PROC
*&---------------------------------------------------------------------*
*&      Form  F_SEPARA_CHANGENR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_separa_changenr.

  DATA: vl_tabix TYPE sytabix.
  SORT: tg_cdhdr BY changenr ASCENDING.

  LOOP AT tg_cdpos INTO eg_cdpos.
    vl_tabix = sy-tabix.
    READ TABLE tg_cdhdr INTO eg_cdhdr
         WITH KEY changenr = eg_cdpos-changenr BINARY SEARCH.
    IF sy-subrc NE 0.
      DELETE tg_cdpos INDEX vl_tabix.
    ENDIF.
  ENDLOOP.
  CLEAR: eg_cdpos.

ENDFORM.                    " F_SEPARA_CHANGENR
*&---------------------------------------------------------------------*
*&      Form  F_SEPARA_RATE_LETRAS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LETRA  text
*----------------------------------------------------------------------*
FORM f_separa_rate_letras  USING p_letra.

  tg_txpca004_tmp[]  = tg_txpca004[] .
  DELETE tg_txpca004_tmp WHERE letra NE p_letra.

ENDFORM.                    " F_SEPARA_RATE_LETRAS
*&---------------------------------------------------------------------*
*&      Form  F_AJUSTA_A348
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_ajusta_a348 .

  LOOP AT tg_a348 INTO eg_a348.
    eg_a348_tmp = eg_a348.
    PERFORM: f_date_to_char CHANGING eg_a348_tmp-datab.
    eg_a348_tmp-datab_aux = eg_a348_tmp-datab.
    APPEND: eg_a348_tmp TO tg_a348_tmp.
  ENDLOOP.
  CLEAR: eg_a348.

  SORT: tg_a348_tmp BY aland     ASCENDING
                       txreg_sf  ASCENDING
                       txreg_st  ASCENDING
                       taxgroup  ASCENDING
                       dynkey1   ASCENDING
                       datab_aux ASCENDING.

ENDFORM.                    " F_AJUSTA_A348
*&---------------------------------------------------------------------*
*&      Form  F_AJUSTA_CDHDR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_ajusta_cdhdr .

  LOOP AT tg_cdhdr INTO eg_cdhdr.
    eg_cdhdr_tmp = eg_cdhdr.
    eg_cdhdr_tmp-knumh = eg_cdhdr-objectid(10).
*    eg_A348_TMP-DATAB_AUX = eg_A348_TMP-datab.
    APPEND: eg_cdhdr_tmp TO tg_cdhdr_tmp.
  ENDLOOP.
  CLEAR: eg_cdhdr.

  SORT: tg_cdhdr_tmp BY knumh ASCENDING.

ENDFORM.                    " F_AJUSTA_CDHDR
*&---------------------------------------------------------------------*
*&      Form  F_CHECK_REGRA_G_H
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_1BTXIC3  text
*----------------------------------------------------------------------*
FORM f_check_regra_g_h  USING  p_1btxic3  STRUCTURE eg_j_1btxic3_from
                               p_taxsit_a TYPE j_1btaxsit
                               p_taxsit_b TYPE j_1btaxsit
                               p_letra    TYPE c.

  DATA: vl_contador TYPE i.

*  IF P_1BTXIC3-RATE IS INITIAL.

  PERFORM: f_leitura_85.

  IF sy-subrc EQ 0.

    IF p_1btxic3-base = '100'.
      vg_rate_4445 = p_1btxic3-rate.
      vg_red1_4445 = p_1btxic3-base.
    ELSE.

* Fórmula de tributação
      vg_rate_4445 = ( p_1btxic3-rate * p_1btxic3-base ) / 100.
      vg_red1_4445 = '100'.
    ENDIF.

    IF eg_j_1btxic3_85-rate IS NOT INITIAL.

      PERFORM: f_atualiza_icms USING eg_j_1btxic3-value(16) " NBMCODE
                                     eg_j_1btxic3-shipfrom  " Shipfrom
                                     eg_j_1btxic3-shipto    " Shipto
                                     eg_j_1btxic3-validfrom " Validfrom
                                     ''                     " NBMCODE2
                                     p_letra                " Letra
                                     eg_j_1btxic3-rate      " Rate
                                     ''                     " KNUMH1
                                     ''                     " Base
                                     ''                     " Rate3
                                     ''                     " RED
                                     ''                     " CST
                                     ''                     " RATE2
                                     ''                     " Base1
                                     vg_rate                " Rate4
                                     vg_red1                " Red1
                                     ''                     " CST1
                                     ''                     " Knumh
                                     ''                     " Rate1
                                     sy-datum               " Udate
                                     sy-uzeit               " Utime
                                     c_i "vg_status              " Change_ind
                                     c_5                    " Status
                                     ''.                    " Status1

      IF p_letra = c_g.
* Combinação 'XXX' da J_1BTXST3 não existe
        CONCATENATE c_z05 text-100 eg_j_1btxic3-shipto
                                   eg_j_1btxic3-shipto
                                   eg_j_1btxic3-gruop
                                   eg_j_1btxic3-value
                    text-080 INTO eg_erro-text SEPARATED BY ';'.
        APPEND: eg_erro TO tg_erro.

      ELSEIF p_letra = c_h.
* Combinação 'XXX' da J_1BTXST3 não existe
        CONCATENATE c_z09 text-100 eg_j_1btxic3-shipto
                                   eg_j_1btxic3-shipto
                                   eg_j_1btxic3-gruop
                                   eg_j_1btxic3-value
                    text-080 INTO eg_erro-text SEPARATED BY ';'.
        APPEND: eg_erro TO tg_erro.


      ENDIF.

    ELSE.

      READ TABLE tg_j_1batl1 INTO eg_j_1batl1_85
           WITH KEY eg_j_1btxic3_85-taxlaw  BINARY SEARCH. "p_1btxic3-taxlaw

      IF sy-subrc EQ 0.

        IF eg_j_1batl1_85-taxsit = p_taxsit_a OR " Valor varia se for regra 'G' ou 'H'.
           eg_j_1batl1_85-taxsit = p_taxsit_b.

* Loop somente para verificar se origem será ...ST3 ou ...IC3.
          LOOP AT tg_j_1btxst3 INTO eg_j_1btxst3
                       WHERE land1    = eg_j_1btxic3-land1
                         AND shipfrom = eg_j_1btxic3-shipfrom
                         AND shipto   = eg_j_1btxic3-shipto
                         AND gruop    = eg_j_1btxic3-gruop
                         AND value    = eg_j_1btxic3-value.
            vl_contador = vl_contador + 1.
          ENDLOOP.
          CLEAR: eg_j_1btxst3.

          LOOP AT tg_j_1btxst3 INTO eg_j_1btxst3
                       WHERE land1    = eg_j_1btxic3-land1
                         AND shipfrom = eg_j_1btxic3-shipfrom
                         AND shipto   = eg_j_1btxic3-shipto
                         AND gruop    = eg_j_1btxic3-gruop
                         AND value    = eg_j_1btxic3-value.

            IF vl_contador > 1.
              vg_validfrom = eg_j_1btxst3-validfrom.
            ELSE.
              vg_validfrom = eg_j_1btxic3-validfrom.
            ENDIF.

            PERFORM: f_conv_nbmcode USING eg_j_1btxic3-value
                                 CHANGING vg_nbmcode.

            READ TABLE tg_a348_tmp INTO eg_a348
                 WITH KEY aland = eg_j_1btxst3-land1
                      txreg_sf  = eg_j_1btxst3-shipfrom
                      txreg_st  = eg_j_1btxst3-shipto
                      taxgroup  = eg_j_1btxst3-gruop
                      dynkey1   = eg_j_1btxst3-value
                      datab_aux = eg_j_1btxst3-validfrom BINARY SEARCH.

            IF sy-subrc <> 0 .
              CLEAR eg_a348.
            ENDIF.

* Letra 'H' ou 'G'.
            PERFORM: f_atualiza_icms USING eg_j_1btxst3-value(16) " NBMCODE
                                           eg_j_1btxst3-shipfrom  " Shipfrom
                                           eg_j_1btxst3-shipto    " Shipto
                                           vg_validfrom           " Validfrom
                                           vg_nbmcode             " NBMCODE2
                                           p_letra                " Letra
                                           eg_j_1btxst3-rate      " Rate
                                           ''                     " KNUMH1
                                           '100'                  " Base  - Não tem na IC3
                                           eg_j_1btxic3-rate      " Rate3 - Não tem na IC3
                                           eg_j_1btxic3-base      " RED   - Não tem na IC3
                                           eg_j_1batl1-taxsit     " CST   - Não tem na IC3
                                              vg_rate_4445                " Rate2
                                              vg_red1_4445                " Base1
*                                           p_1btxic3-rate         " Rate2
*                                           p_1btxic3-base         " Base1
                                           p_1btxic3-rate         " Rate4
                                           p_1btxic3-base         " Red1
                                           eg_j_1batl1_85-taxsit  " CST1
                                           eg_a348-knumh          " Knumh
                                           vg_rate                " Rate1
                                           sy-datum               " Udate
                                           sy-uzeit               " Utime
                                           c_i "vg_status              " Change_ind
                                           c_1                    " Status
                                           eg_txpca004-status1.   " Status1
          ENDLOOP.
          IF sy-subrc NE 0.

            IF p_letra = c_g.

              PERFORM: f_atualiza_icms USING eg_j_1btxic3-value(16) " NBMCODE
                                              eg_j_1btxic3-shipfrom  " Shipfrom
                                              eg_j_1btxic3-shipto    " Shipto
                                              eg_j_1btxic3-validfrom " Validfrom
                                              vg_nbmcode             " NBMCODE2
                                              p_letra                    " Letra
                                              eg_j_1btxst3-rate      " Rate
                                              ''                     " KNUMH1
                                              '100'                  " Base  - Não tem na IC3
                                              eg_j_1btxic3-rate      " Rate3 - Não tem na IC3
                                              eg_j_1btxic3-base      " RED   - Não tem na IC3
                                              eg_j_1batl1-taxsit     " CST   - Não tem na IC3
                                              vg_rate_4445                " Rate2
                                              vg_red1_4445                " Base1
                                              p_1btxic3-rate         " Rate4
                                              p_1btxic3-base         " Red1
                                              eg_j_1batl1_85-taxsit  " CST1
                                              ''                     " Knumh
                                              vg_rate                " Rate1
                                              sy-datum               " Udate
                                              sy-uzeit               " Utime
                                              c_i "vg_status              " Change_ind
                                              c_5                    " Status
                                              ''.                    " Status1

* Chave faltante de imposto 'XXX' 'YYY'...
              CONCATENATE c_z17 text-100 eg_j_1btxic3-shipfrom
                                         eg_j_1btxic3-shipto
                                         eg_j_1btxic3-gruop
                                         eg_j_1btxic3-value
                                text-080
                                    INTO eg_erro-text SEPARATED BY ';'.
              APPEND: eg_erro TO tg_erro.

            ELSEIF p_letra = c_h.

              PERFORM: f_atualiza_icms USING eg_j_1btxic3-value(16) " NBMCODE
                                              eg_j_1btxic3-shipfrom  " Shipfrom
                                              eg_j_1btxic3-shipto    " Shipto
                                              eg_j_1btxic3-validfrom " Validfrom
                                              vg_nbmcode             " NBMCODE2
                                              p_letra                    " Letra
                                              eg_j_1btxst3-rate      " Rate
                                              ''                     " KNUMH1
                                              '100'                  " Base  - Não tem na IC3
                                              eg_j_1btxic3-rate      " Rate3 - Não tem na IC3
                                              eg_j_1btxic3-base      " RED   - Não tem na IC3
                                              eg_j_1batl1-taxsit     " CST   - Não tem na IC3
                                              vg_rate_4445                " Rate2
                                              vg_red1_4445                " Base1
                                               p_1btxic3-rate         " Rate4
                                              p_1btxic3-base         " Red1
                                              eg_j_1batl1_85-taxsit  " CST1
                                              ''                     " Knumh
                                              vg_rate                " Rate1
                                              sy-datum               " Udate
                                              sy-uzeit               " Utime
                                              c_i "vg_status              " Change_ind
                                              c_5                    " Status
                                              ''.                    " Status1

* Chave faltante de imposto 'XXX' 'YYY'...
              CONCATENATE c_z17 text-100 eg_j_1btxic3-shipfrom
                                         eg_j_1btxic3-shipto
                                         eg_j_1btxic3-gruop
                                         eg_j_1btxic3-value
                                text-080
                                    INTO eg_erro-text SEPARATED BY ';'.
              APPEND: eg_erro TO tg_erro.

            ENDIF.

*          ENDIF.

          ENDIF.
          CLEAR: eg_j_1btxst3.

        ELSE.
* LOG de ERRO Z05: Se não é ZERO ou não existe o registro na tabela ou o TAXSIT não é ‘60’,
* gravar com status 5 – chave faltante de imposto – gravar no log a msg:
*  Status 5 => conteudo J_1BTXIC3-SHIPFROM +
*                       J_1BTXIC3-SHIPTO +
*                       J_1BTXIC3-VALUE +
*                       J_1BTXIC3-GROUP faltante.

          PERFORM: f_atualiza_icms USING eg_j_1btxic3-value(16) " NBMCODE
                                         eg_j_1btxic3-shipfrom  " Shipfrom
                                         eg_j_1btxic3-shipto    " Shipto
                                         eg_j_1btxic3-validfrom " Validfrom
                                         vg_nbmcode             " NBMCODE2
                                         p_letra                " Letra
                                         eg_j_1btxst3-rate      " Rate
                                         ''                     " KNUMH1
                                         '100'                  " Base  - Não tem na IC3
                                         eg_j_1btxic3-rate      " Rate3 - Não tem na IC3
                                         eg_j_1btxic3-base      " RED   - Não tem na IC3
                                         eg_j_1batl1-taxsit     " CST   - Não tem na IC3
                                         ''                     " Rate2
                                         ''                     " Base1
                                         ''                     " Rate4
                                         ''                     " Red1
                                         eg_j_1batl1_85-taxsit  " CST1
                                         ''                     " Knumh
                                         vg_rate                " Rate1
                                         sy-datum               " Udate
                                         sy-uzeit               " Utime
                                         c_i "vg_status              " Change_ind
                                         c_5                    " Status
                                         ''.                    " Status1
          IF p_letra = c_g.
* Combinação 'XXX' da J_1BTXST3 não existe
            CONCATENATE c_z05 text-100 eg_j_1btxic3-shipto
                                       eg_j_1btxic3-shipto
                                       eg_j_1btxic3-gruop
                                       eg_j_1btxic3-value
                        text-080 INTO eg_erro-text SEPARATED BY ';'.
            APPEND: eg_erro TO tg_erro.

          ELSEIF p_letra = c_h.
* Combinação 'XXX' da J_1BTXST3 não existe
            CONCATENATE c_z09 text-100 eg_j_1btxic3-shipto
                                       eg_j_1btxic3-shipto
                                       eg_j_1btxic3-gruop
                                       eg_j_1btxic3-value
                        text-080 INTO eg_erro-text SEPARATED BY ';'.
            APPEND: eg_erro TO tg_erro.

          ENDIF.

        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.
*  ENDIF.

ENDFORM.                    " F_CHECK_REGRA_G_H

*&---------------------------------------------------------------------*
*&      Form  f_check_regra_g_sm60
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_1BTXIC3  text
*      -->P_TAXSIT_A text
*      -->P_TAXSIT_B text
*      -->P_LETRA    text
*----------------------------------------------------------------------*
FORM f_check_regra_g_sm60  USING  p_1btxic3  STRUCTURE eg_j_1btxic3_from
                               p_taxsit_a TYPE j_1btaxsit
                               p_taxsit_b TYPE j_1btaxsit
                               p_letra    TYPE c.

  DATA: vl_contador TYPE i.

*  IF P_1BTXIC3-RATE IS INITIAL.

  PERFORM: f_leitura_85.

  IF sy-subrc EQ 0.

    IF p_1btxic3-base = '100'.
      vg_rate_4445 = p_1btxic3-rate.
      vg_red1_4445 = p_1btxic3-base.
    ELSE.

* Fórmula de tributação
      vg_rate_4445 = ( p_1btxic3-rate * p_1btxic3-base ) / 100.
      vg_red1_4445 = '100'.
    ENDIF.

    IF eg_j_1btxic3_85-rate IS NOT INITIAL.

      PERFORM: f_atualiza_icms USING eg_j_1btxic3-value(16) " NBMCODE
                                     eg_j_1btxic3-shipfrom  " Shipfrom
                                     eg_j_1btxic3-shipto    " Shipto
                                     eg_j_1btxic3-validfrom " Validfrom
                                     ''                     " NBMCODE2
                                     p_letra                " Letra
                                     eg_j_1btxic3-rate      " Rate
                                     ''                     " KNUMH1
                                     ''                     " Base
                                     ''                     " Rate3
                                     ''                     " RED
                                     ''                     " CST
                                     ''                     " RATE2
                                     ''                     " Base1
                                     vg_rate                " Rate4
                                     vg_red1                " Red1
                                     ''                     " CST1
                                     ''                     " Knumh
                                     ''                     " Rate1
                                     sy-datum               " Udate
                                     sy-uzeit               " Utime
                                     c_i "vg_status              " Change_ind
                                     c_5                    " Status
                                     ''.                    " Status1


        CONCATENATE c_z05 text-100 eg_j_1btxic3-shipto
                                   eg_j_1btxic3-shipto
                                   eg_j_1btxic3-gruop
                                   eg_j_1btxic3-value
                    text-080 INTO eg_erro-text SEPARATED BY ';'.
        APPEND: eg_erro TO tg_erro.


    ELSE.

      READ TABLE tg_j_1batl1 INTO eg_j_1batl1_85
           WITH KEY eg_j_1btxic3_85-taxlaw  BINARY SEARCH. "p_1btxic3-taxlaw

      IF sy-subrc EQ 0.

        IF eg_j_1batl1_85-taxsit = p_taxsit_a OR " Valor varia se for regra 'G' ou 'H'.
           eg_j_1batl1_85-taxsit = p_taxsit_b.


          PERFORM: f_conv_nbmcode USING eg_j_1btxic3-value
                               CHANGING vg_nbmcode.

*          READ TABLE tg_a348_tmp INTO eg_a348
*               WITH KEY aland = eg_j_1btxic3-land1
*                    txreg_sf  = eg_j_1btxic3-shipfrom
*                    txreg_st  = eg_j_1btxic3-shipto
*                    taxgroup  = eg_j_1btxic3-gruop
*                    dynkey1   = eg_j_1btxic3-value
*                    datab_aux = eg_j_1btxic3-validfrom BINARY SEARCH.
*
*          IF sy-subrc <> 0 .
*            CLEAR eg_a348.
*          ENDIF.

* Letra 'H' ou 'G'.
          PERFORM: f_atualiza_icms USING eg_j_1btxic3-value(16) " NBMCODE
                                         eg_j_1btxic3-shipfrom  " Shipfrom
                                         eg_j_1btxic3-shipto    " Shipto
                                         eg_j_1btxic3-validfrom           " Validfrom
                                         vg_nbmcode             " NBMCODE2
                                         p_letra                " Letra
                                         ' '                    " Rate
                                         ''                     " KNUMH1
                                         '100'                  " Base  - Não tem na IC3
                                         eg_j_1btxic3-rate      " Rate3 - Não tem na IC3
                                         eg_j_1btxic3-base      " RED   - Não tem na IC3
                                         eg_j_1batl1-taxsit     " CST   - Não tem na IC3
                                         vg_rate_4445                " Rate2
                                         vg_red1_4445                " Base1
                                         p_1btxic3-rate         " Rate4
                                         p_1btxic3-base         " Red1
                                         eg_j_1batl1_85-taxsit  " CST1
                                         eg_a348-knumh          " Knumh
                                         vg_rate                " Rate1
                                         sy-datum               " Udate
                                         sy-uzeit               " Utime
                                         c_i "vg_status              " Change_ind
                                         c_1                    " Status
                                         eg_txpca004-status1.   " Status1

***          IF sy-subrc NE 0.
***
***            IF p_letra = c_g.
***
***              PERFORM: f_atualiza_icms USING eg_j_1btxic3-value(16) " NBMCODE
***                                              eg_j_1btxic3-shipfrom  " Shipfrom
***                                              eg_j_1btxic3-shipto    " Shipto
***                                              eg_j_1btxic3-validfrom " Validfrom
***                                              vg_nbmcode             " NBMCODE2
***                                              p_letra                    " Letra
***                                              eg_j_1btxst3-rate      " Rate
***                                              ''                     " KNUMH1
***                                              '100'                  " Base  - Não tem na IC3
***                                              eg_j_1btxic3-rate      " Rate3 - Não tem na IC3
***                                              eg_j_1btxic3-base      " RED   - Não tem na IC3
***                                              eg_j_1batl1-taxsit     " CST   - Não tem na IC3
***                                              vg_rate_4445                " Rate2
***                                              vg_red1_4445                " Base1
***                                              p_1btxic3-rate         " Rate4
***                                              p_1btxic3-base         " Red1
***                                              eg_j_1batl1_85-taxsit  " CST1
***                                              ''                     " Knumh
***                                              vg_rate                " Rate1
***                                              sy-datum               " Udate
***                                              sy-uzeit               " Utime
***                                              c_i "vg_status              " Change_ind
***                                              c_5                    " Status
***                                              ''.                    " Status1
***
**** Chave faltante de imposto 'XXX' 'YYY'...
***              CONCATENATE c_z17 text-100 eg_j_1btxic3-shipfrom
***                                         eg_j_1btxic3-shipto
***                                         eg_j_1btxic3-gruop
***                                         eg_j_1btxic3-value
***                                text-080
***                                    INTO eg_erro-text SEPARATED BY ';'.
***              APPEND: eg_erro TO tg_erro.
***
***            ELSEIF p_letra = c_h.
***
***              PERFORM: f_atualiza_icms USING eg_j_1btxic3-value(16) " NBMCODE
***                                              eg_j_1btxic3-shipfrom  " Shipfrom
***                                              eg_j_1btxic3-shipto    " Shipto
***                                              eg_j_1btxic3-validfrom " Validfrom
***                                              vg_nbmcode             " NBMCODE2
***                                              p_letra                    " Letra
***                                              eg_j_1btxst3-rate      " Rate
***                                              ''                     " KNUMH1
***                                              '100'                  " Base  - Não tem na IC3
***                                              eg_j_1btxic3-rate      " Rate3 - Não tem na IC3
***                                              eg_j_1btxic3-base      " RED   - Não tem na IC3
***                                              eg_j_1batl1-taxsit     " CST   - Não tem na IC3
***                                              vg_rate_4445                " Rate2
***                                              vg_red1_4445                " Base1
***                                               p_1btxic3-rate         " Rate4
***                                              p_1btxic3-base         " Red1
***                                              eg_j_1batl1_85-taxsit  " CST1
***                                              ''                     " Knumh
***                                              vg_rate                " Rate1
***                                              sy-datum               " Udate
***                                              sy-uzeit               " Utime
***                                              c_i "vg_status              " Change_ind
***                                              c_5                    " Status
***                                              ''.                    " Status1
***
**** Chave faltante de imposto 'XXX' 'YYY'...
***              CONCATENATE c_z17 text-100 eg_j_1btxic3-shipfrom
***                                         eg_j_1btxic3-shipto
***                                         eg_j_1btxic3-gruop
***                                         eg_j_1btxic3-value
***                                text-080
***                                    INTO eg_erro-text SEPARATED BY ';'.
***              APPEND: eg_erro TO tg_erro.
***
***            ENDIF.
***
****          ENDIF.
***
***          ENDIF.


        ELSE.
* LOG de ERRO Z05: Se não é ZERO ou não existe o registro na tabela ou o TAXSIT não é ‘60’,
* gravar com status 5 – chave faltante de imposto – gravar no log a msg:
*  Status 5 => conteudo J_1BTXIC3-SHIPFROM +
*                       J_1BTXIC3-SHIPTO +
*                       J_1BTXIC3-VALUE +
*                       J_1BTXIC3-GROUP faltante.

          PERFORM: f_atualiza_icms USING eg_j_1btxic3-value(16) " NBMCODE
                                         eg_j_1btxic3-shipfrom  " Shipfrom
                                         eg_j_1btxic3-shipto    " Shipto
                                         eg_j_1btxic3-validfrom " Validfrom
                                         vg_nbmcode             " NBMCODE2
                                         p_letra                " Letra
                                         eg_j_1btxst3-rate      " Rate
                                         ''                     " KNUMH1
                                         '100'                  " Base  - Não tem na IC3
                                         eg_j_1btxic3-rate      " Rate3 - Não tem na IC3
                                         eg_j_1btxic3-base      " RED   - Não tem na IC3
                                         eg_j_1batl1-taxsit     " CST   - Não tem na IC3
                                         ''                     " Rate2
                                         ''                     " Base1
                                         ''                     " Rate4
                                         ''                     " Red1
                                         eg_j_1batl1_85-taxsit  " CST1
                                         ''                     " Knumh
                                         vg_rate                " Rate1
                                         sy-datum               " Udate
                                         sy-uzeit               " Utime
                                         c_i "vg_status              " Change_ind
                                         c_5                    " Status
                                         ''.                    " Status1
          IF p_letra = c_g.
* Combinação 'XXX' da J_1BTXST3 não existe
            CONCATENATE c_z05 text-100 eg_j_1btxic3-shipto
                                       eg_j_1btxic3-shipto
                                       eg_j_1btxic3-gruop
                                       eg_j_1btxic3-value
                        text-080 INTO eg_erro-text SEPARATED BY ';'.
            APPEND: eg_erro TO tg_erro.

          ELSEIF p_letra = c_h.
* Combinação 'XXX' da J_1BTXST3 não existe
            CONCATENATE c_z09 text-100 eg_j_1btxic3-shipto
                                       eg_j_1btxic3-shipto
                                       eg_j_1btxic3-gruop
                                       eg_j_1btxic3-value
                        text-080 INTO eg_erro-text SEPARATED BY ';'.
            APPEND: eg_erro TO tg_erro.

          ENDIF.

        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.
*  ENDIF.

ENDFORM.                    " F_CHECK_REGRA_G_H
*&---------------------------------------------------------------------*
*&      Form  F_REGRA_G_H
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_1BTXIC1  text
*----------------------------------------------------------------------*
FORM f_regra_g_h  USING p_1btxic1 STRUCTURE eg_j_1btxic1
                        p_letra   TYPE c
                        p_rate.

*  LOOP AT TG_J_1BTXST3 INTO EG_J_1BTXST3
*               where LAND1    = P_1BTXIC1-LAND1
*                 and SHIPFROM = P_1BTXIC1-SHIPFROM
*                 and SHIPTO   = P_1BTXIC1-SHIPTO.
  READ TABLE tg_j_1btxst3 INTO eg_j_1btxst3 WITH KEY land1  = eg_j_1btxic3-land1
                                                   shipfrom = eg_j_1btxic3-shipfrom
                                                   shipto   = eg_j_1btxic3-shipto
                                                   gruop    = eg_j_1btxic3-gruop
                                                   value    = eg_j_1btxic3-value BINARY SEARCH.
  IF sy-subrc EQ 0.

    PERFORM: f_conv_nbmcode USING eg_j_1btxic3-value
                         CHANGING vg_nbmcode.

    CLEAR: eg_j_1batl1_85.
    READ TABLE tg_j_1batl1 INTO eg_j_1batl1_85
         WITH KEY eg_j_1btxic3_85-taxlaw BINARY SEARCH.

    READ TABLE tg_a348_tmp INTO eg_a348
         WITH KEY aland = eg_j_1btxst3-land1
              txreg_sf  = eg_j_1btxst3-shipfrom
              txreg_st  = eg_j_1btxst3-shipto
              taxgroup  = eg_j_1btxst3-gruop
              dynkey1   = eg_j_1btxst3-value
              datab_aux = eg_j_1btxst3-validfrom BINARY SEARCH.

    IF sy-subrc <> 0 .
      CLEAR eg_a348.
    ENDIF.

* Leitura ICMS, com o mesmo emissor e recebedor.
* Loop é somente devido ao período =>, por isso o exit no loop.
    LOOP AT tg_j_1btxic1 INTO eg_j_1btxic1_to
         WHERE land1    = eg_j_1btxic3-land1
           AND shipfrom = eg_j_1btxic3-shipto
           AND shipto   = eg_j_1btxic3-shipto
           AND validfrom => eg_j_1btxic3-validfrom.

* Letra 'G' ou 'H'
      PERFORM: f_atualiza_icms USING eg_j_1btxic3-value(16) " NBMCODE
                                     eg_j_1btxic3-shipfrom  " Shipfrom
                                     eg_j_1btxic3-shipto    " Shipto
                                     eg_j_1btxic3-validfrom " Validfrom
                                     vg_nbmcode             " NBMCODE2
                                     p_letra                " Letra
                                     eg_j_1btxst3-rate      " Rate
                                     ''                     " KNUMH1
                                     '100'                  " Base  - Não tem na IC3
                                     eg_j_1btxic3-rate      " Rate3 - Não tem na IC3
                                     eg_j_1btxic3-base      " RED   - Não tem na IC3
                                     eg_j_1batl1-taxsit     " CST   - Não tem na IC3
                                     eg_j_1btxic1_to-rate   " Rate2
                                     '100'                  " Base1
                                     eg_j_1btxic1_to-rate   " Rate4
                                     '100'                  " Red1
                                     eg_j_1batl1_85-taxsit  " CST1
                                     eg_a348-knumh          " Knumh
                                     vg_rate                " Rate1
                                     sy-datum               " Udate
                                     sy-uzeit               " Utime
                                     c_i "vg_status              " Change_ind
                                     c_1                    " Status
                                     eg_txpca004-status1.   " Status1
*  ENDLOOP.
      EXIT.
    ENDLOOP.

    IF sy-subrc <> 0.

      IF p_letra = c_g.
        PERFORM: f_atualiza_icms USING eg_j_1btxic3-value(16) " NBMCODE
                                      eg_j_1btxic3-shipfrom  " Shipfrom
                                      eg_j_1btxic3-shipto    " Shipto
                                      eg_j_1btxic3-validfrom " Validfrom
                                      vg_nbmcode             " NBMCODE2
                                      p_letra                    " Letra
                                      eg_j_1btxst3-rate      " Rate
                                      ''                     " KNUMH1
                                      '100'                  " Base  - Não tem na IC3
                                      eg_j_1btxic3-rate      " Rate3 - Não tem na IC3
                                      eg_j_1btxic3-base      " RED   - Não tem na IC3
                                      eg_j_1batl1-taxsit     " CST   - Não tem na IC3
                                      ''                     " Rate2
                                      ''                     " Base1
                                      ''                     " Rate4
                                      ''                     " Red1
                                      eg_j_1batl1_85-taxsit  " CST1
                                      eg_a348-knumh          " Knumh
                                      vg_rate                " Rate1
                                      sy-datum               " Udate
                                      sy-uzeit               " Utime
                                      c_i "vg_status              " Change_ind
                                      c_5                    " Status
                                      ''.                    " Status1

* Chave faltante de imposto 'XXX' 'YYY'...
        CONCATENATE c_z04 text-107 eg_j_1btxic3-shipto
                                   eg_j_1btxic3-shipto
                                   eg_j_1btxic3-value
                          text-090 INTO eg_erro-text SEPARATED BY ';'.
        APPEND: eg_erro TO tg_erro.

      ELSEIF p_letra = c_h.
        PERFORM: f_atualiza_icms USING eg_j_1btxic3-value(16) " NBMCODE
                                            eg_j_1btxic3-shipfrom  " Shipfrom
                                            eg_j_1btxic3-shipto    " Shipto
                                            eg_j_1btxic3-validfrom " Validfrom
                                            vg_nbmcode             " NBMCODE2
                                            p_letra                    " Letra
                                            eg_j_1btxst3-rate      " Rate
                                            ''                     " KNUMH1
                                            '100'                  " Base  - Não tem na IC3
                                            eg_j_1btxic3-rate      " Rate3 - Não tem na IC3
                                            eg_j_1btxic3-base      " RED   - Não tem na IC3
                                            eg_j_1batl1-taxsit     " CST   - Não tem na IC3
                                            ''                     " Rate2
                                            ''                     " Base1
                                            ''                     " Rate4
                                            ''                     " Red1
                                            eg_j_1batl1_85-taxsit  " CST1
                                            eg_a348-knumh          " Knumh
                                            vg_rate                " Rate1
                                            sy-datum               " Udate
                                            sy-uzeit               " Utime
                                            c_i "vg_status              " Change_ind
                                            c_5                    " Status
                                            ''.                    " Status1

* Chave faltante de imposto 'XXX' 'YYY'...
        CONCATENATE c_z08 text-107 eg_j_1btxic3-shipto
                                   eg_j_1btxic3-shipto
                                   eg_j_1btxic3-value
                          text-090 INTO eg_erro-text SEPARATED BY ';'.
        APPEND: eg_erro TO tg_erro.
      ENDIF.

    ENDIF.

    CLEAR: eg_j_1btxst3, eg_j_1btxic1_to.

  ELSE.

    PERFORM: f_atualiza_icms USING eg_j_1btxic3-value(16) " NBMCODE
                                  eg_j_1btxic3-shipfrom  " Shipfrom
                                  eg_j_1btxic3-shipto    " Shipto
                                  eg_j_1btxic3-validfrom " Validfrom
                                  vg_nbmcode             " NBMCODE2
                                  p_letra                    " Letra
                                  eg_j_1btxst3-rate      " Rate
                                  ''                     " KNUMH1
                                  '100'                  " Base  - Não tem na IC3
                                  eg_j_1btxic3-rate      " Rate3 - Não tem na IC3
                                  eg_j_1btxic3-base      " RED   - Não tem na IC3
                                  eg_j_1batl1-taxsit     " CST   - Não tem na IC3
                                  ''                     " Rate2
                                  ''                     " Base1
                                  ''                     " Rate4
                                  ''                     " Red1
                                  eg_j_1batl1_85-taxsit  " CST1
                                  ''                     " Knumh
                                  vg_rate                " Rate1
                                  sy-datum               " Udate
                                  sy-uzeit               " Utime
                                  c_i "vg_status              " Change_ind
                                  c_5                    " Status
                                  ''.                    " Status1

* Chave faltante de imposto 'XXX' 'YYY'...
    CONCATENATE c_z17 text-100 eg_j_1btxic3-shipfrom
                               eg_j_1btxic3-shipto
                               eg_j_1btxic3-gruop
                               eg_j_1btxic3-value
                      text-080
                          INTO eg_erro-text SEPARATED BY ';'.
    APPEND: eg_erro TO tg_erro.

  ENDIF.

ENDFORM.                    " F_REGRA_G_H

*&---------------------------------------------------------------------*
*&      Form  f_regra_g_h_sm60
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_1BTXIC1  text
*      -->P_LETRA    text
*      -->P_RATE     text
*----------------------------------------------------------------------*
FORM f_regra_g_h_sm60  USING p_1btxic1 STRUCTURE eg_j_1btxic1
                        p_letra   TYPE c
                        p_rate.


  PERFORM: f_conv_nbmcode USING eg_j_1btxic3-value
                       CHANGING vg_nbmcode.

  CLEAR: eg_j_1batl1_85.
  READ TABLE tg_j_1batl1 INTO eg_j_1batl1_85
       WITH KEY eg_j_1btxic3_85-taxlaw BINARY SEARCH.

  READ TABLE tg_a348_tmp INTO eg_a348
       WITH KEY aland = eg_j_1btxic3-land1
            txreg_sf  = eg_j_1btxic3-shipfrom
            txreg_st  = eg_j_1btxic3-shipto
            taxgroup  = eg_j_1btxic3-gruop
            dynkey1   = eg_j_1btxic3-value
            datab_aux = eg_j_1btxic3-validfrom BINARY SEARCH.

  IF sy-subrc <> 0 .
    CLEAR eg_a348.
  ENDIF.

* Leitura ICMS, com o mesmo emissor e recebedor.
* Loop é somente devido ao período =>, por isso o exit no loop.
  LOOP AT tg_j_1btxic1 INTO eg_j_1btxic1_to
       WHERE land1    = eg_j_1btxic3-land1
         AND shipfrom = eg_j_1btxic3-shipto
         AND shipto   = eg_j_1btxic3-shipto
         AND validfrom => eg_j_1btxic3-validfrom.

* Letra 'G'
    PERFORM: f_atualiza_icms USING eg_j_1btxic3-value(16) " NBMCODE
                                   eg_j_1btxic3-shipfrom  " Shipfrom
                                   eg_j_1btxic3-shipto    " Shipto
                                   eg_j_1btxic3-validfrom " Validfrom
                                   vg_nbmcode             " NBMCODE2
                                   p_letra                " Letra
                                   ' '                    " Rate
                                   ''                     " KNUMH1
                                   '100'                  " Base  - Não tem na IC3
                                   eg_j_1btxic3-rate      " Rate3 - Não tem na IC3
                                   eg_j_1btxic3-base      " RED   - Não tem na IC3
                                   eg_j_1batl1-taxsit     " CST   - Não tem na IC3
                                   eg_j_1btxic1_to-rate   " Rate2
                                   '100'                  " Base1
                                   eg_j_1btxic1_to-rate   " Rate4
                                   '100'                  " Red1
                                   eg_j_1batl1_85-taxsit  " CST1
                                   eg_a348-knumh          " Knumh
                                   vg_rate                " Rate1
                                   sy-datum               " Udate
                                   sy-uzeit               " Utime
                                   c_i "vg_status              " Change_ind
                                   c_1                    " Status
                                   eg_txpca004-status1.   " Status1
*  ENDLOOP.
    EXIT.
  ENDLOOP.

  IF sy-subrc <> 0.

    PERFORM: f_atualiza_icms USING eg_j_1btxic3-value(16) " NBMCODE
                                  eg_j_1btxic3-shipfrom  " Shipfrom
                                  eg_j_1btxic3-shipto    " Shipto
                                  eg_j_1btxic3-validfrom " Validfrom
                                  vg_nbmcode             " NBMCODE2
                                  p_letra                    " Letra
                                  ''                     " Rate
                                  ''                     " KNUMH1
                                  '100'                  " Base  - Não tem na IC3
                                  eg_j_1btxic3-rate      " Rate3 - Não tem na IC3
                                  eg_j_1btxic3-base      " RED   - Não tem na IC3
                                  eg_j_1batl1-taxsit     " CST   - Não tem na IC3
                                  ''                     " Rate2
                                  ''                     " Base1
                                  ''                     " Rate4
                                  ''                     " Red1
                                  eg_j_1batl1_85-taxsit  " CST1
                                  eg_a348-knumh          " Knumh
                                  vg_rate                " Rate1
                                  sy-datum               " Udate
                                  sy-uzeit               " Utime
                                  c_i "vg_status              " Change_ind
                                  c_5                    " Status
                                  ''.                    " Status1

* Chave faltante de imposto 'XXX' 'YYY'...
    CONCATENATE c_z04 text-107 eg_j_1btxic3-shipto
                               eg_j_1btxic3-shipto
                               eg_j_1btxic3-value
                      text-090 INTO eg_erro-text SEPARATED BY ';'.
    APPEND: eg_erro TO tg_erro.

  ENDIF.

  CLEAR: eg_j_1btxic1_to.



ENDFORM.                    "f_regra_g_h_sm60
*&---------------------------------------------------------------------*
*&      Form  F_CHECK_REGRA_E
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_1BTXIC3   text
*      -->P_TAXSIT_A  text
*      -->P_TAXSIT_B  text
*----------------------------------------------------------------------*
FORM f_check_regra_e  USING    p_1btxic3 STRUCTURE eg_j_1btxic3_from
                               p_taxsit_a TYPE j_1btaxsit
                               p_taxsit_b TYPE j_1btaxsit.

  IF p_1btxic3-rate IS INITIAL.

    READ TABLE tg_j_1batl1 INTO eg_j_1batl1_85
         WITH KEY p_1btxic3-taxlaw BINARY SEARCH.
    IF sy-subrc EQ 0.

      IF eg_j_1batl1_85-taxsit = p_taxsit_a OR " Valor varia se for regra 'G' ou 'H'.
         eg_j_1batl1_85-taxsit = p_taxsit_b.

        LOOP AT tg_j_1btxst3 INTO eg_j_1btxst3
                WHERE land1    = eg_j_1btxic3-land1
                  AND shipfrom = eg_j_1btxic3-shipfrom
                  AND shipto   = eg_j_1btxic3-shipto
                  AND gruop    = eg_j_1btxic3-gruop
                  AND value    = eg_j_1btxic3-value.
          IF sy-subrc <> 0 .
            CLEAR eg_a348.
          ENDIF.

          PERFORM: f_conv_nbmcode USING eg_j_1btxic3-value
                               CHANGING vg_nbmcode.

          READ TABLE tg_a348_tmp INTO eg_a348
               WITH KEY aland = eg_j_1btxst3-land1
                    txreg_sf  = eg_j_1btxst3-shipfrom
                    txreg_st  = eg_j_1btxst3-shipto
                    taxgroup  = eg_j_1btxst3-gruop
                    dynkey1   = eg_j_1btxst3-value
                    datab_aux = eg_j_1btxst3-validfrom BINARY SEARCH.

          IF eg_j_1btxic3-base = '100.00'.
* Letra 'E'
            PERFORM: f_atualiza_icms USING eg_j_1btxic3-value(16) " NBMCODE
                                            eg_j_1btxic3-shipfrom  " Shipfrom
                                            eg_j_1btxic3-shipto    " Shipto
                                            eg_j_1btxic3-validfrom " Validfrom
                                             vg_nbmcode             " NBMCODE2
                                             c_e                    " Letra
                                             eg_j_1btxst3-rate      " Rate
                                             ''                     " KNUMH1
                                             '100'                  " Base  - Não tem na IC3
                                             eg_j_1btxic3-rate      " Rate3 - Não tem na IC3
                                             eg_j_1btxic3-base      " RED   - Não tem na IC3
                                             eg_j_1batl1-taxsit     " CST   - Não tem na IC3
                                             ''                     " Rate2
                                             ''                     " Base1
                                             ''                     " Rate4
                                             ''                     " Red1
                                             eg_j_1batl1_85-taxsit  " CST1
                                             eg_a348-knumh          " Knumh
                                             vg_rate                " Rate1
                                             sy-datum               " Udate
                                             sy-uzeit               " Utime
                                             c_i              " Change_ind
                                             c_1                    " Status
                                             ''.   " Status1

          ELSE.

* Letra 'E'
            PERFORM: f_atualiza_icms USING eg_j_1btxic3-value(16) " NBMCODE
                                            eg_j_1btxic3-shipfrom  " Shipfrom
                                            eg_j_1btxic3-shipto    " Shipto
                                            eg_j_1btxic3-validfrom " Validfrom
                                             vg_nbmcode             " NBMCODE2
                                             c_e                    " Letra
                                             eg_j_1btxst3-rate      " Rate
                                             ''                     " KNUMH1
                                             '100'                  " Base  - Não tem na IC3
                                             eg_j_1btxic3-rate      " Rate3 - Não tem na IC3
                                             eg_j_1btxic3-base      " RED   - Não tem na IC3
                                             eg_j_1batl1-taxsit     " CST   - Não tem na IC3
                                             ''                     " Rate2
                                             ''                     " Base1
                                             ''                     " Rate4
                                             ''                     " Red1
                                             eg_j_1batl1_85-taxsit  " CST1
                                             eg_a348-knumh          " Knumh
                                             vg_rate                " Rate1
                                             sy-datum               " Udate
                                             sy-uzeit               " Utime
                                             c_i              " Change_ind
                                             c_5                    " Status
                                             ''.   " Status1

*Z06
            CONCATENATE c_z06 text-108 eg_j_1btxic3-shipfrom
                                       eg_j_1btxic3-shipto
                                       eg_j_1btxic3-gruop
                                       eg_j_1btxic3-value
                              text-105
                                  INTO eg_erro-text SEPARATED BY ';'.
            APPEND: eg_erro TO tg_erro.


          ENDIF.



        ENDLOOP.

        IF sy-subrc  <> 0.

* Letra 'E'
          PERFORM: f_atualiza_icms USING eg_j_1btxic3-value(16) " NBMCODE
                                                       eg_j_1btxic3-shipfrom  " Shipfrom
                                                       eg_j_1btxic3-shipto    " Shipto
                                                       eg_j_1btxic3-validfrom " Validfrom
                                                       vg_nbmcode             " NBMCODE2
                                                       c_e                    " Letra
                                                       eg_j_1btxst3-rate      " Rate
                                                       ''                     " KNUMH1
                                                       '100'                  " Base  - Não tem na IC3
                                                       eg_j_1btxic3-rate      " Rate3 - Não tem na IC3
                                                       eg_j_1btxic3-base      " RED   - Não tem na IC3
                                                       eg_j_1batl1-taxsit     " CST   - Não tem na IC3
                                                       ''                     " Rate2
                                                       ''                     " Base1
                                                       ''                     " Rate4
                                                       ''                     " Red1
                                                       eg_j_1batl1_85-taxsit  " CST1
                                                       ''                     " Knumh
                                                       vg_rate                " Rate1
                                                       sy-datum               " Udate
                                                       sy-uzeit               " Utime
                                                       c_i "vg_status              " Change_ind
                                                       c_5                    " Status
                                                       ''.                    " Status1


* Chave faltante de imposto 'XXX' 'YYY'...
          CONCATENATE c_z17 text-100 eg_j_1btxic3-shipfrom
                                     eg_j_1btxic3-shipto
                                     eg_j_1btxic3-gruop
                                     eg_j_1btxic3-value
                            text-080
                                INTO eg_erro-text SEPARATED BY ';'.
          APPEND: eg_erro TO tg_erro.
        ENDIF.
        CLEAR: eg_j_1btxst3.
      ENDIF.
    ENDIF.
  ENDIF.

ENDFORM.                    " F_CHECK_REGRA_E
*&---------------------------------------------------------------------*
*&      Form  F_REGRA_G
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_regra_g USING p_rate.

  READ TABLE tg_j_1btxic3_to INTO eg_j_1btxic3_44
       WITH KEY shipfrom = eg_j_1btxic3-shipto
                shipto   = eg_j_1btxic3-shipto
                gruop    = c_44
                value    = eg_j_1btxic3-value.
  IF sy-subrc EQ 0.
    PERFORM: f_check_regra_g_h USING eg_j_1btxic3_44
                                     c_1        " Taxsit '10'
                                     c_6        " Taxsit '60'
                                     c_g.
  ELSE.

* Se não encontrar verificar se existe no grupo 45.
*    READ TABLE TG_J_1BTXIC3_TO INTO EG_J_1BTXIC3_45
*         WITH KEY SHIPFROM = Eg_J_1BTXIC3-SHIPTO
*                  SHIPTO   = Eg_J_1BTXIC3-SHIPTO
*                  GRUOP    = C_45
*                  VALUE    = Eg_J_1BTXIC3-value.

    LOOP AT tg_j_1btxic3_to INTO eg_j_1btxic3_45
         WHERE shipfrom = eg_j_1btxic3-shipto
           AND shipto   = eg_j_1btxic3-shipto
           AND gruop    = c_45
           AND value    = eg_j_1btxic3-value
           AND validfrom => eg_j_1btxic3-validfrom.
      PERFORM: f_check_regra_g_h USING eg_j_1btxic3_45
                                     c_1        " Taxsit '10'
                                     c_6        " Taxsit '60'
                                     c_g.
      EXIT.
    ENDLOOP.
    IF sy-subrc NE 0.
      PERFORM: f_regra_g_h USING eg_j_1btxic1
                                 c_g
                                 p_rate.
    ENDIF.
  ENDIF.

ENDFORM.                    " F_REGRA_G

*&---------------------------------------------------------------------*
*&      Form  f_regra_g_sm60
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_RATE     text
*----------------------------------------------------------------------*
FORM f_regra_g_sm60 USING p_rate.

  READ TABLE tg_j_1btxic3_to INTO eg_j_1btxic3_44
       WITH KEY shipfrom = eg_j_1btxic3-shipto
                shipto   = eg_j_1btxic3-shipto
                gruop    = c_44
                value    = eg_j_1btxic3-value.
  IF sy-subrc EQ 0.
    PERFORM: f_check_regra_g_sm60 USING eg_j_1btxic3_44
                                     c_1        " Taxsit '10'
                                     c_6        " Taxsit '60'
                                     c_g.
  ELSE.

* Se não encontrar verificar se existe no grupo 45.
*    READ TABLE TG_J_1BTXIC3_TO INTO EG_J_1BTXIC3_45
*         WITH KEY SHIPFROM = Eg_J_1BTXIC3-SHIPTO
*                  SHIPTO   = Eg_J_1BTXIC3-SHIPTO
*                  GRUOP    = C_45
*                  VALUE    = Eg_J_1BTXIC3-value.

    LOOP AT tg_j_1btxic3_to INTO eg_j_1btxic3_45
         WHERE shipfrom = eg_j_1btxic3-shipto
           AND shipto   = eg_j_1btxic3-shipto
           AND gruop    = c_45
           AND value    = eg_j_1btxic3-value
           AND validfrom => eg_j_1btxic3-validfrom.
      PERFORM: f_check_regra_g_sm60 USING eg_j_1btxic3_45
                                     c_1        " Taxsit '10'
                                     c_6        " Taxsit '60'
                                     c_g.
      EXIT.
    ENDLOOP.
    IF sy-subrc NE 0.
      PERFORM: f_regra_g_h_sm60 USING eg_j_1btxic1
                                 c_g
                                 p_rate.
    ENDIF.
  ENDIF.

ENDFORM.                    " F_REGRA_G
*&---------------------------------------------------------------------*
*&      Form  F_LEITURA_85
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_leitura_85 .

  CLEAR: eg_j_1btxic3_85.

  READ TABLE tg_j_1btxic3_to INTO eg_j_1btxic3_85
       WITH KEY shipfrom = eg_j_1btxic3-shipto
                shipto   = eg_j_1btxic3-shipto
                gruop    = c_85
                value    = eg_j_1btxic3-value.

*  LOOP AT tg_j_1btxic3_to INTO eg_j_1btxic3_85
*       WHERE  shipfrom = eg_j_1btxic3-shipto
*          AND      shipto   = eg_j_1btxic3-shipto
*          AND      gruop    = c_85
*          AND      value    = eg_j_1btxic3-value
*          AND      validfrom <= eg_j_1btxic3-validfrom.
**          AND      validto <= eg_j_1btxic3-validfrom.
*
*  ENDLOOP.

ENDFORM.                    " F_LEITURA_85
*&---------------------------------------------------------------------*
*&      Form  F_BUSCA_CALC_ICMS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_busca_calc_icms .



ENDFORM.                    " F_BUSCA_CALC_ICMS
*&---------------------------------------------------------------------*
*&      Form  F_CALC_ICMS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_calc_icms .

  IF NOT tg_a382_tmp[] IS INITIAL.

    SELECT land1
           shipfrom
           shipto
           validfrom
           rate
           rate_f
      FROM j_1btxic1
      INTO TABLE tg_j_1btxic1
        FOR ALL ENTRIES IN tg_a382_tmp
        WHERE land1     =  tg_a382_tmp-aland
          AND shipfrom  =  tg_a382_tmp-txreg_sf
          AND shipto    =  tg_a382_tmp-txreg_st
          AND validfrom => tg_a382_tmp-datab_aux.

    SELECT land1
           shipfrom
           shipto
           validfrom
           rate
           rate_f
      FROM j_1btxic1
      APPENDING TABLE tg_j_1btxic1
        FOR ALL ENTRIES IN tg_a382_tmp
        WHERE land1     = tg_a382_tmp-aland
          AND shipfrom  = tg_a382_tmp-txreg_st
          AND shipto    = tg_a382_tmp-txreg_st
          AND validfrom => tg_a382_tmp-datbi_aux.

    SORT: tg_j_1btxic1 BY land1     ASCENDING
                          shipfrom  ASCENDING
                          shipto    ASCENDING
                          validfrom ASCENDING.
    DELETE ADJACENT DUPLICATES FROM tg_j_1btxic1
           COMPARING land1 shipfrom shipto validfrom.

  ENDIF.

ENDFORM.                    " F_CALC_ICMS
*&---------------------------------------------------------------------*
*&      Form  F_AJUSTA_A382
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_ajusta_a382.

  REFRESH tg_a382_tmp.

  LOOP AT tg_a382 INTO eg_a382.
    eg_a382_tmp = eg_a382.
    PERFORM: f_date_to_char CHANGING eg_a382_tmp-datab.
    PERFORM: f_date_to_char CHANGING eg_a382_tmp-datbi.
    eg_a382_tmp-datab_aux = eg_a382_tmp-datab.
    eg_a382_tmp-datbi_aux = eg_a382_tmp-datbi.
    APPEND: eg_a382_tmp TO tg_a382_tmp.
  ENDLOOP.
  CLEAR: eg_a382.

  SORT: tg_a382_tmp BY aland     ASCENDING
                       txreg_sf  ASCENDING
                       txreg_st  ASCENDING
                       dynkey1   ASCENDING
                       taxgroup  ASCENDING
                       datab_aux ASCENDING.

ENDFORM.                    " F_AJUSTA_A382
*&---------------------------------------------------------------------*
*&      Form  F_JUROS_ICMS_BCD
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_juros_icms_bcd .

  IF NOT tg_a382_tmp[] IS INITIAL.

    SELECT land1
           shipfrom
           shipto
           gruop
           value
           value2
           value3
           validfrom
           validto
           rate
           base
           taxlaw
      FROM j_1btxic3
      INTO TABLE tg_j_1btxic3
        FOR ALL ENTRIES IN tg_a382_tmp
        WHERE land1     = tg_a382_tmp-aland
          AND shipfrom  = tg_a382_tmp-txreg_sf
          AND shipto    = tg_a382_tmp-txreg_st
          AND gruop     = tg_a382_tmp-taxgroup
          AND value     = tg_a382_tmp-dynkey1
          AND validfrom = tg_a382_tmp-datab_aux.
*          and VALIDFROM <= TG_A382-VALIDFROM.
*          AND VALIDTO   >= TG_A382-VALIDTO.

    SELECT land1
           shipfrom
           shipto
           gruop
           value
           value2
           value3
           validfrom
           validto
           rate
           base
           taxlaw
      FROM j_1btxic3
      INTO TABLE tg_j_1btxic3_to
        FOR ALL ENTRIES IN tg_a382_tmp
          WHERE land1      = c_br
*            AND ( shipfrom = tg_a382_tmp-txreg_st AND
*                  shipto   = tg_a382_tmp-txreg_st )
          AND ( ( shipfrom = tg_a382_tmp-txreg_sf AND shipto   = tg_a382_tmp-txreg_st ) OR
                 ( shipfrom = tg_a382_tmp-txreg_st AND shipto   = tg_a382_tmp-txreg_st ) )
              AND ( gruop  = c_44 OR
                    gruop  = c_45 OR
                    gruop  = c_85 )
             AND value    = tg_a382_tmp-dynkey1
             AND ( ( validfrom >= tg_a382_tmp-datbi_aux AND validfrom <= tg_a382_tmp-datab_aux ) OR
                  ( validfrom >= tg_a382_tmp-datab_aux AND validto <= tg_a382_tmp-datbi_aux ) )  .
*              ( validfrom >= tg_a382_tmp-datab_aux
*             AND validto <= tg_a382_tmp-datbi_aux ).

  ENDIF.

*          AND ( ( validfrom  <= tg_j_1btxst3-validfrom "validto.
*          AND validto   >= tg_j_1btxst3-validto )
*              OR
*             ( validfrom  >= tg_j_1btxst3-validfrom "validto.
*               AND validto  <= tg_j_1btxst3-validto ) ).

ENDFORM.                    " F_JUROS_ICMS_BCD
*&---------------------------------------------------------------------*
*&      Form  F_REGRAS_BCD
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_regras_bcd .

  LOOP AT tg_j_1btxic3 INTO eg_j_1btxic3.

    PERFORM: f_conv_nbmcode USING eg_j_1btxic3-value
                         CHANGING vg_nbmcode.
    IF eg_j_1btxic3-base = '100'.
      vg_rate = eg_j_1btxic3-rate.
      vg_red1 = eg_j_1btxic3-base.
    ELSE.

* Fórmula de tributação
      vg_rate = ( eg_j_1btxic3-rate * eg_j_1btxic3-base ) / 100.
      vg_red1 = '100'.
    ENDIF.

    READ TABLE tg_j_1batl1 INTO eg_j_1batl1
         WITH KEY eg_j_1btxic3-taxlaw BINARY SEARCH.
    IF sy-subrc EQ 0.
      CASE eg_j_1batl1-taxsit.

* Definir se é regra A ou G.
        WHEN '1' OR '6' OR '9'.

          CASE eg_j_1btxic3-base.
            WHEN '100'.
              vg_rate = eg_j_1btxic3-rate.
              PERFORM: f_compara_aliquota USING vg_rate.
            WHEN OTHERS.
* Se o Rate for <> 100, usar fórmula abaixo:
* Formula para tributação final (campo ZRATE1)= (Rate * BASE)/100.
              vg_rate = ( eg_j_1btxic3-rate * eg_j_1btxic3-base ) / 100.
              PERFORM: f_compara_aliquota USING vg_rate.
          ENDCASE.

        WHEN '2'.
          IF NOT eg_j_1btxic3-base IS INITIAL AND
                 eg_j_1btxic3-base NE '100'.

* Formula para tributação final (campo ZRATE1)= (Rate * BASE)/100.
            vg_rate = ( eg_j_1btxic3-rate * eg_j_1btxic3-base ) / 100.
            vg_red1 = '100'.
* Regra 'B'.
            PERFORM: f_processa_bcd USING c_b.
          ELSE.

            READ TABLE tg_a382_tmp INTO eg_a382 WITH KEY aland = eg_j_1btxic3-land1
                                                                txreg_sf = eg_j_1btxic3-shipfrom
                                                                txreg_st = eg_j_1btxic3-shipto
                                                                 dynkey1 = eg_j_1btxic3-value
                                                                taxgroup = eg_j_1btxic3-gruop
                                                               datab_aux = eg_j_1btxic3-validfrom BINARY SEARCH.

            IF sy-subrc <> 0.
              CLEAR eg_a382.
            ENDIF.

* Formula para tributação final (campo ZRATE1)= (Rate * BASE)/100.
            vg_rate = ( eg_j_1btxic3-rate * eg_j_1btxic3-base ) / 100.

            PERFORM: f_atualiza_icms USING eg_j_1btxic3-value(16) " NBMCODE
                                                    eg_j_1btxic3-shipfrom  " Shipfrom
                                                    eg_j_1btxic3-shipto    " Shipto
                                                    eg_j_1btxic3-validfrom " Validfrom
                                                    vg_nbmcode             " NBMCODE2
                                                    c_b                    " Letra
                                                    ''                     " Rate
                                                    eg_a382-knumh          " KNUMH1
                                                    vg_red1 "100                 " Base
                                                    eg_j_1btxic3-rate     " Rate3
                                                    eg_j_1btxic3-base     " RED
                                                    eg_j_1batl1-taxsit    " CST
                                                    ' '                     " RATE2
                                                    ' '                     " Base1
                                                    ' '                   " Rate4
                                                    ' '                   " Red1
                                                    ' '                     " CST1
                                                    ' '                     " Knumh
                                                    vg_rate                " Rate1
                                                    sy-datum               " Udate
                                                    sy-uzeit               " Utime
                                                    c_i              " Change_ind
                                                    c_5                    " Status
                                                    ''.                    " Status1

* Combinação 'XXX' da J_1BTXST3 não existe
            CONCATENATE c_z12 text-106 eg_j_1btxic3-shipfrom
                                       eg_j_1btxic3-shipto
                                       eg_j_1btxic3-gruop
                                       eg_j_1btxic3-value
                        text-105 INTO eg_erro-text SEPARATED BY ';'.
            APPEND: eg_erro TO tg_erro.

          ENDIF.

        WHEN '4'.                " 40 com exit de conversão
          IF eg_j_1btxic3-rate IS INITIAL.

* Regra 'C'.
            CLEAR vg_red1.

            PERFORM: f_processa_bcd USING c_c.
          ELSE.
*Z13

            READ TABLE tg_a382_tmp INTO eg_a382 WITH KEY aland = eg_j_1btxic3-land1
                                                          txreg_sf = eg_j_1btxic3-shipfrom
                                                          txreg_st = eg_j_1btxic3-shipto
                                                           dynkey1 = eg_j_1btxic3-value
                                                          taxgroup = eg_j_1btxic3-gruop
                                                         datab_aux = eg_j_1btxic3-validfrom BINARY SEARCH.

            IF sy-subrc <> 0.
              CLEAR eg_a382.
            ENDIF.

* Formula para tributação final (campo ZRATE1)= (Rate * BASE)/100.
            vg_rate = ( eg_j_1btxic3-rate * eg_j_1btxic3-base ) / 100.

            PERFORM: f_atualiza_icms USING eg_j_1btxic3-value(16) " NBMCODE
                                                    eg_j_1btxic3-shipfrom  " Shipfrom
                                                    eg_j_1btxic3-shipto    " Shipto
                                                    eg_j_1btxic3-validfrom " Validfrom
                                                    vg_nbmcode             " NBMCODE2
                                                    c_c                    " Letra
                                                    ''                     " Rate
                                                    eg_a382-knumh          " KNUMH1
                                                    vg_red1 "'100'                 " Base
                                                    eg_j_1btxic3-rate     " Rate3
                                                    eg_j_1btxic3-base     " RED
                                                    eg_j_1batl1-taxsit    " CST
                                                    ' '                     " RATE2
                                                    ' '                     " Base1
                                                    ' '                   " Rate4
                                                    ' '                   " Red1
                                                    ' '                     " CST1
                                                    ' '                     " Knumh
                                                    vg_rate                " Rate1
                                                    sy-datum               " Udate
                                                    sy-uzeit               " Utime
                                                    c_i              " Change_ind
                                                    c_5                    " Status
                                                    ''.                    " Status1

*
            CONCATENATE c_z13 text-103 eg_j_1btxic3-shipfrom
                                       eg_j_1btxic3-shipto
                                       eg_j_1btxic3-gruop
                                       eg_j_1btxic3-value
                        text-105 INTO eg_erro-text SEPARATED BY ';'.
            APPEND: eg_erro TO tg_erro.
          ENDIF.

        WHEN '' OR '0'.                " 00 com exit de conversão
          IF eg_j_1btxic3-base = '100' AND
             eg_j_1btxic3-rate IS NOT INITIAL.
* Regra 'D'.
            vg_red1 = '100'.
            PERFORM: f_processa_bcd USING c_d.
          ELSE.
*Z15
            READ TABLE tg_a382_tmp INTO eg_a382 WITH KEY aland = eg_j_1btxic3-land1
                                                      txreg_sf = eg_j_1btxic3-shipfrom
                                                      txreg_st = eg_j_1btxic3-shipto
                                                       dynkey1 = eg_j_1btxic3-value
                                                      taxgroup = eg_j_1btxic3-gruop
                                                     datab_aux = eg_j_1btxic3-validfrom BINARY SEARCH.

            IF sy-subrc <> 0.
              CLEAR eg_a382.
            ENDIF.

* Formula para tributação final (campo ZRATE1)= (Rate * BASE)/100.
            vg_rate = ( eg_j_1btxic3-rate * eg_j_1btxic3-base ) / 100.

            PERFORM: f_atualiza_icms USING eg_j_1btxic3-value(16) " NBMCODE
                                                    eg_j_1btxic3-shipfrom  " Shipfrom
                                                    eg_j_1btxic3-shipto    " Shipto
                                                    eg_j_1btxic3-validfrom " Validfrom
                                                    vg_nbmcode             " NBMCODE2
                                                    c_d                    " Letra
                                                    ''                     " Rate
                                                    eg_a382-knumh          " KNUMH1
                                                    vg_red1 "'100'                 " Base
                                                    eg_j_1btxic3-rate     " Rate3
                                                    eg_j_1btxic3-base     " RED
                                                    eg_j_1batl1-taxsit    " CST
                                                    ' '                     " RATE2
                                                    ' '                     " Base1
                                                    ' '                   " Rate4
                                                    ' '                   " Red1
                                                    ' '                     " CST1
                                                    ' '                     " Knumh
                                                    vg_rate                " Rate1
                                                    sy-datum               " Udate
                                                    sy-uzeit               " Utime
                                                    c_i              " Change_ind
                                                    c_5                    " Status
                                                    ''.                    " Status1

*
            CONCATENATE c_z15 text-104 eg_j_1btxic3-shipfrom
                                       eg_j_1btxic3-shipto
                                       eg_j_1btxic3-gruop
                                       eg_j_1btxic3-value
                        text-105 INTO eg_erro-text SEPARATED BY ';'.
            APPEND: eg_erro TO tg_erro.

          ENDIF.

        WHEN OTHERS.
      ENDCASE.
    ENDIF.
  ENDLOOP.
  CLEAR: eg_j_1btxic3.
*                  VG_RATE = ( Eg_J_1BTXIC3-RATE * Eg_J_1BTXIC3-BASE ) / 100.
*                  PERFORM: F_COMPARA_ALIQUOTA USING VG_RATE.


ENDFORM.                     " F_REGRAS_BCD
*&---------------------------------------------------------------------*
*&      Form  F_PROCESSA_BCD
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_processa_bcd USING p_letra.

  READ TABLE tg_a382_tmp INTO eg_a382 WITH KEY aland = eg_j_1btxic3-land1
                                            txreg_sf = eg_j_1btxic3-shipfrom
                                            txreg_st = eg_j_1btxic3-shipto
                                             dynkey1 = eg_j_1btxic3-value
                                            taxgroup = eg_j_1btxic3-gruop
                                           datab_aux = eg_j_1btxic3-validfrom BINARY SEARCH.
  IF sy-subrc EQ 0.
    LOOP AT tg_j_1btxic3_to INTO eg_j_1btxic3_85 WHERE land1     = eg_a382-aland
                                                   AND shipfrom  = eg_a382-txreg_sf
                                                   AND shipto    = eg_a382-txreg_st
                                                   AND value     = eg_a382-dynkey1
                                                   AND gruop     = c_85
                                                   AND validfrom => eg_a382-datbi
                                                   AND validto   =< eg_a382-datab.
      READ TABLE tg_j_1batl1 INTO eg_j_1batl1_85
           WITH KEY eg_j_1btxic3_85-taxlaw BINARY SEARCH.

      IF sy-subrc EQ 0.

* Formula para tributação final (campo ZRATE1)= (Rate * BASE)/100.
        vg_rate = ( eg_j_1btxic3_85-rate * eg_j_1btxic3_85-base ) / 100.
        vg_rate_4445 = ( eg_j_1btxic3-rate * eg_j_1btxic3-base ) / 100.


        PERFORM: f_atualiza_icms USING eg_j_1btxic3-value(16) " NBMCODE
                                   eg_j_1btxic3-shipfrom  " Shipfrom
                                   eg_j_1btxic3-shipto    " Shipto
                                   eg_j_1btxic3-validfrom " Validfrom
                                   vg_nbmcode             " NBMCODE2
                                   p_letra                " Letra
                                   ''                     " Rate
                                   eg_a382-knumh          " KNUMH1
                                   vg_red1 "'100'                  " Base  - Não tem na IC3
                                   eg_j_1btxic3-rate      " Rate3 - Não tem na IC3
                                   eg_j_1btxic3-base      " RED   - Não tem na IC3
                                   eg_j_1batl1-taxsit     " CST   - Não tem na IC3
                                   vg_rate                " Rate2
                                   '100'                  " Base1
                                   eg_j_1btxic3_85-rate   " Rate4
                                   eg_j_1btxic3_85-base   " Red1
                                   eg_j_1batl1_85-taxsit  " CST1
                                   ' '                    " Knumh
                                   vg_rate_4445           " Rate1
                                   sy-datum               " Udate
                                   sy-uzeit               " Utime
                                   c_i                    " Change_ind
                                   c_1                    " Status
                                   eg_txpca004-status1.   " Status1


      ELSE.
        IF p_letra = c_d.

          IF  eg_j_1btxic3_85-taxlaw IS INITIAL.
            PERFORM: f_atualiza_icms USING eg_j_1btxic3-value(16) " NBMCODE
                                               eg_j_1btxic3-shipfrom  " Shipfrom
                                               eg_j_1btxic3-shipto    " Shipto
                                               eg_j_1btxic3-validfrom " Validfrom
                                               vg_nbmcode             " NBMCODE2
                                               p_letra                " Letra
                                               ''                     " Rate
                                               eg_a382-knumh          " KNUMH1
                                               vg_red1 "'100'                  " Base  - Não tem na IC3
                                               eg_j_1btxic3-rate      " Rate3 - Não tem na IC3
                                               eg_j_1btxic3-base      " RED   - Não tem na IC3
                                               '0'                    " CST   - Não tem na IC3
                                               eg_j_1btxic3_85-rate   " Rate2
                                               '100'                  " Base1
                                               eg_j_1btxic3_85-rate   " Rate4
                                               eg_j_1btxic3_85-base   " Red1
                                               '0'                    " CST1
                                               ' '                    " Knumh
                                               vg_rate                " Rate1
                                               sy-datum               " Udate
                                               sy-uzeit               " Utime
                                               c_i              " Change_ind
                                               c_1                    " Status
                                               eg_txpca004-status1.   " Status1
          ENDIF.

        ENDIF.
*        PERFORM: F_REGRA_BCD_IC3 USING P_LETRA.
      ENDIF.

    ENDLOOP.
    IF sy-subrc NE 0.
      PERFORM: f_regra_bcd_ic1 USING p_letra.
    ENDIF.
    CLEAR: eg_j_1btxic3_85.
  ENDIF.

ENDFORM.                    " F_PROCESSA_BCD
*&---------------------------------------------------------------------*
*&      Form  F_REGRA_D
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_regra_d .

ENDFORM.                    " F_REGRA_D
*&---------------------------------------------------------------------*
*&      Form  F_REPROCESSA_BCD_IC1
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_1BTXIC1  text
*----------------------------------------------------------------------*
FORM f_reprocessa_bcd_ic1 USING p_letra.

  LOOP AT tg_j_1btxic1 INTO eg_j_1btxic1 WHERE land1  =  c_br
                                        AND shipfrom  =  eg_txpca004-shipfrom
                                        AND shipto    =  eg_txpca004-shipto
                                        AND validfrom => eg_txpca004-validfrom.

* Letra 'B', 'C' ou 'D'.
    PERFORM: f_atualiza_icms USING eg_txpca004-nbmcode    " NBMCODE
                                   eg_txpca004-shipfrom   " Shipfrom
                                   eg_txpca004-shipto     " Shipto
                                   eg_txpca004-validfrom  " Validfrom
                                   eg_txpca004-nbmcode2   " NBMCODE2
                                   p_letra                " Letra
                                   ''                     " Rate
                                   ''                     " KNUMH1
                                   '100'                  " Base
                                   eg_txpca004-rate       " Rate3
                                   eg_txpca004-base       " RED
                                   eg_j_1batl1-taxsit     " CST
                                   eg_j_1btxic1-rate      " Rate2
                                   '100'                  " Base1
                                   eg_j_1btxic1-rate      " Rate4
                                   '100'                  " Red1
                                   '0'                    " CST1
                                   ''                     " Knumh
                                   vg_rate                " Rate1
                                   sy-datum               " Udate
                                   sy-uzeit               " Utime
                                   c_a              " Change_ind
                                   c_1                    " Status
                                   ''.                    " Status1

  ENDLOOP.
  IF sy-subrc NE 0.

    CASE p_letra.
      WHEN c_b.
        PERFORM: f_atualiza_icms USING eg_txpca004-nbmcode    " NBMCODE
                                       eg_txpca004-shipfrom   " Shipfrom
                                       eg_txpca004-shipto     " Shipto
                                       eg_txpca004-validfrom  " Validfrom
                                       vg_nbmcode             " NBMCODE2
                                       p_letra                " Letra
                                       ''                     " Rate
                                       ''                     " KNUMH1
                                       '100'                  " Base
                                       eg_j_1btxic3-rate      " Rate3
                                       eg_j_1btxic3-base      " RED
                                       eg_j_1batl1-taxsit     " CST
                                       ''                     " Rate2
                                       ''                     " Base1
                                       ''                     " Rate4
                                       ''                     " Red1
                                       ''                     " CST1
                                       ''                   " Knumh
                                       vg_rate                " Rate1
                                       sy-datum               " Udate
                                       sy-uzeit               " Utime
                                       c_a              " Change_ind
                                       c_5                    " Status
                                       ''.                    " Status1

* Combinação 'xxx' da J_1BTXIC1 não existe
        CONCATENATE c_z11 text-102 eg_txpca004-nbmcode
                                   eg_txpca004-shipfrom
                                   eg_txpca004-shipto
                                   INTO eg_erro-text SEPARATED BY ';'.
        APPEND: eg_erro TO tg_erro.

      WHEN c_c.

        PERFORM: f_atualiza_icms USING eg_txpca004-nbmcode    " NBMCODE
                                       eg_txpca004-shipfrom   " Shipfrom
                                       eg_txpca004-shipto     " Shipto
                                       eg_txpca004-validfrom  " Validfrom
                                       vg_nbmcode             " NBMCODE2
                                       p_letra                " Letra
                                       ''                     " Rate
                                       ''                     " KNUMH1
                                       '100'                  " Base
                                       eg_j_1btxic3-rate      " Rate3
                                       eg_j_1btxic3-base      " RED
                                       eg_j_1batl1-taxsit     " CST
                                       ''                     " Rate2
                                       ''                     " Base1
                                       ''                     " Rate4
                                       ''                     " Red1
                                       ''                     " CST1
                                       ''                   " Knumh
                                       vg_rate                " Rate1
                                       sy-datum               " Udate
                                       sy-uzeit               " Utime
                                       c_a              " Change_ind
                                       c_5                    " Status
                                       ''.                    " Status1

* Combinação 'xxx' da J_1BTXIC1 não existe
        CONCATENATE c_z14 text-102 eg_txpca004-nbmcode
                                   eg_txpca004-shipfrom
                                   eg_txpca004-shipto
                                   INTO eg_erro-text SEPARATED BY ';'.
        APPEND: eg_erro TO tg_erro.

      WHEN c_d.

        PERFORM: f_atualiza_icms USING eg_txpca004-nbmcode    " NBMCODE
                                       eg_txpca004-shipfrom   " Shipfrom
                                       eg_txpca004-shipto     " Shipto
                                       eg_txpca004-validfrom  " Validfrom
                                       vg_nbmcode             " NBMCODE2
                                       p_letra                " Letra
                                       ''                     " Rate
                                       ''                     " KNUMH1
                                       '100'                  " Base
                                       eg_j_1btxic3-rate      " Rate3
                                       eg_j_1btxic3-base      " RED
                                       eg_j_1batl1-taxsit     " CST
                                       ''                     " Rate2
                                       ''                     " Base1
                                       ''                     " Rate4
                                       ''                     " Red1
                                       ''                     " CST1
                                       ''                   " Knumh
                                       vg_rate                " Rate1
                                       sy-datum               " Udate
                                       sy-uzeit               " Utime
                                       c_a              " Change_ind
                                       c_5                    " Status
                                       ''.                    " Status1

* Combinação 'xxx' da J_1BTXIC1 não existe
        CONCATENATE c_z16 text-102 eg_txpca004-nbmcode
                                   eg_txpca004-shipfrom
                                   eg_txpca004-shipto
                                   INTO eg_erro-text SEPARATED BY ';'.
        APPEND: eg_erro TO tg_erro.


      WHEN OTHERS.
    ENDCASE.


  ENDIF.
  CLEAR: eg_j_1btxic1.

ENDFORM.                    " F_REPROCESSA_BCD_IC1
*&---------------------------------------------------------------------*
*&      Form  F_REGRA_BCD_IC3
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_regra_bcd_ic3 USING p_letra.

  PERFORM: f_atualiza_icms USING eg_j_1btxic3-value(16) " NBMCODE
                                 eg_j_1btxic3-shipfrom  " Shipfrom
                                 eg_j_1btxic3-shipto    " Shipto
                                 eg_j_1btxic3-validfrom " Validfrom
                                 vg_nbmcode             " NBMCODE2
                                 p_letra                " Letra
                                 ''                     " Rate
                                 ''                     " KNUMH1
                                 '100'                  " Base  - Não tem na IC3
                                 eg_j_1btxic3-rate      " Rate3 - Não tem na IC3
                                 eg_j_1btxic3-base      " RED   - Não tem na IC3
                                 eg_j_1batl1-taxsit     " CST   - Não tem na IC3
                                 eg_j_1btxic3_85-rate   " Rate2
                                 '100'                  " Base1
                                 eg_j_1btxic3_85-rate   " Rate4
                                 eg_j_1btxic3_85-base   " Red1
                                 eg_j_1batl1_85-taxsit  " CST1
                                 eg_a382-knumh          " Knumh
                                 vg_rate                " Rate1
                                 sy-datum               " Udate
                                 sy-uzeit               " Utime
                                 vg_status              " Change_ind
                                 c_1                    " Status
                                 eg_txpca004-status1.   " Status1

ENDFORM.                    " F_REGRA_BCD_IC3
*&---------------------------------------------------------------------*
*&      Form  F_SEPARA_LETRAS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LETRA_1  text
*      -->P_LETRA_2  text
*      -->P_LETRA_3  text
*----------------------------------------------------------------------*
FORM f_separa_letras  USING    p_letra1
                               p_letra2
                               p_letra3.

  tg_txpca004_tmp[]  = tg_txpca004[] .
  DELETE tg_txpca004_tmp WHERE letra NE p_letra1
                           AND letra NE p_letra2
                           AND letra NE p_letra3.

ENDFORM.                    " F_SEPARA_LETRAS
*&---------------------------------------------------------------------*
*&      Form  F_REPROCESSA_BCD
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_reprocessa_bcd .

  LOOP AT tg_txpca004_tmp INTO eg_txpca004.

    PERFORM: f_conv_nbmcode USING eg_txpca004-nbmcode
                         CHANGING vg_nbmcode.

    LOOP AT tg_j_1btxic3_to INTO eg_j_1btxic3_85 WHERE shipfrom  = eg_txpca004-shipfrom
                                                   AND shipto    = eg_txpca004-shipto
                                                   AND value     = eg_txpca004-nbmcode
                                                   AND gruop     = c_85
                                                   AND validfrom => eg_txpca004-validfrom.
*                                                   AND VALIDTO   =< EG_TXPCA004-VALIDTO.
      READ TABLE tg_j_1batl1 INTO eg_j_1batl1_85
           WITH KEY eg_j_1btxic3_85-taxlaw BINARY SEARCH.
      IF sy-subrc EQ 0.
*        PERFORM: F_REGRA_BCD_IC3 USING EG_TXPCA004-LETRA.

        PERFORM: f_atualiza_icms USING eg_txpca004-nbmcode    " NBMCODE
                                       eg_txpca004-shipfrom   " Shipfrom
                                       eg_txpca004-shipto     " Shipto
                                       eg_txpca004-validfrom  " Validfrom
                                       vg_nbmcode             " NBMCODE2
                                       eg_txpca004-letra      " Letra
                                       eg_txpca004-rate       " Rate
                                       eg_txpca004-knumh1     " KNUMH1
                                       '100'                  " Base
                                       eg_j_1btxic3_85-rate      " Rate3
                                       eg_j_1btxic3_85-base      " RED
                                       eg_j_1batl1-taxsit     " CST
                                       eg_j_1btxic3_85-rate   " Rate2
                                       '100'                  " Base1
                                       eg_j_1btxic3_85-rate   " Rate4
                                       eg_j_1btxic3_85-base   " Red1
                                       eg_j_1batl1_85-taxsit  " CST1
                                       eg_txpca004-knumh      " Knumh
                                       vg_rate                " Rate1
                                       sy-datum               " Udate
                                       sy-uzeit               " Utime
                                       c_a              " Change_ind
                                       c_1                    " Status
                                       eg_txpca004-status1.   " Status1

      ENDIF.

    ENDLOOP.
    IF sy-subrc NE 0.
      PERFORM: f_reprocessa_bcd_ic1 USING eg_txpca004-letra.
    ENDIF.
    CLEAR: eg_j_1btxic3_85.

  ENDLOOP.
  CLEAR: eg_txpca004.

ENDFORM.                    " F_REPROCESSA_BCD

*&---------------------------------------------------------------------*
*&      Form  F_REGRA_BCD_IC1
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_1BTXIC1  text
*----------------------------------------------------------------------*
FORM f_regra_bcd_ic1 USING p_letra.

  LOOP AT tg_j_1btxic1 INTO eg_j_1btxic1 WHERE land1 = eg_a382-aland
                                        AND shipfrom = eg_a382-txreg_sf
                                        AND shipto   = eg_a382-txreg_st
                                        AND validfrom => eg_a382-datbi.

* Letra 'B', 'C' ou 'D'.
    PERFORM: f_atualiza_icms USING eg_j_1btxic3-value(16) " NBMCODE
                                   eg_j_1btxic3-shipfrom  " Shipfrom
                                   eg_j_1btxic3-shipto    " Shipto
                                   eg_j_1btxic3-validfrom " Validfrom
                                   vg_nbmcode             " NBMCODE2
                                   p_letra                " Letra
                                   ''                     " Rate
                                   eg_a382-knumh                     " KNUMH1
                                   vg_red1 "'100'                  " Base  - Não tem na IC3
                                   eg_j_1btxic3-rate      " Rate3 - Não tem na IC3
                                   eg_j_1btxic3-base      " RED   - Não tem na IC3
                                   eg_j_1batl1-taxsit     " CST   - Não tem na IC3
                                   eg_j_1btxic1-rate      " Rate2
                                   '100'                  " Base1
                                   eg_j_1btxic1-rate      " Rate4
                                   '100'                  " Red1
                                   '0'                    " CST1
                                   ' ' "eg_a348-knumh          " Knumh
                                   vg_rate                " Rate1
                                   sy-datum               " Udate
                                   sy-uzeit               " Utime
                                   c_i              " Change_ind
                                   c_1                    " Status
                                   ''.                    " Status1

  ENDLOOP.
  IF sy-subrc NE 0.

    CASE p_letra.
      WHEN c_b.
        PERFORM: f_atualiza_icms USING eg_j_1btxic3-value(16) " NBMCODE
                                       eg_j_1btxic3-shipfrom  " Shipfrom
                                       eg_j_1btxic3-shipto    " Shipto
                                       eg_j_1btxic3-validfrom " Validfrom
                                       vg_nbmcode             " NBMCODE2
                                       p_letra                " Letra
                                           ''                     " Rate
                                           eg_a382-knumh                     " KNUMH1
                                           vg_red1 "'100'                  " Base
                                           eg_j_1btxic3-rate      " Rate3
                                           eg_j_1btxic3-base      " RED
                                           eg_j_1batl1-taxsit     " CST
                                           ''                     " Rate2
                                           ''                     " Base1
                                           ''                     " Rate4
                                           '0'                     " Red1
                                           ' '                     " CST1
                                           ''                   " Knumh
                                           vg_rate                " Rate1
                                           sy-datum               " Udate
                                           sy-uzeit               " Utime
                                           c_i              " Change_ind
                                           c_5                    " Status
                                           ''.                    " Status1

* Combinação 'xxx' da J_1BTXIC1 não existe
        CONCATENATE c_z11 text-102 eg_j_1btxic3-shipfrom
                                   eg_j_1btxic3-shipto
                                   eg_j_1btxic3-gruop
                                   eg_j_1btxic3-value(16)
                                   INTO eg_erro-text SEPARATED BY ';'.

        APPEND: eg_erro TO tg_erro.

      WHEN c_c.

        PERFORM: f_atualiza_icms USING eg_j_1btxic3-value(16) " NBMCODE
                                       eg_j_1btxic3-shipfrom  " Shipfrom
                                       eg_j_1btxic3-shipto    " Shipto
                                       eg_j_1btxic3-validfrom " Validfrom
                                       vg_nbmcode             " NBMCODE2
                                       p_letra                " Letra
                                           ''                     " Rate
                                           eg_a382-knumh                     " KNUMH1
                                           vg_red1 "'100'                  " Base
                                           eg_j_1btxic3-rate      " Rate3
                                           eg_j_1btxic3-base      " RED
                                           eg_j_1batl1-taxsit     " CST
                                           ''                     " Rate2
                                           ''                     " Base1
                                           ''                     " Rate4
                                           ''                     " Red1
                                           ''                     " CST1
                                           ''                   " Knumh
                                           vg_rate                " Rate1
                                           sy-datum               " Udate
                                           sy-uzeit               " Utime
                                           c_i              " Change_ind
                                           c_5                    " Status
                                           ''.                    " Status1

* Combinação 'xxx' da J_1BTXIC1 não existe
        CONCATENATE c_z14 text-102 eg_j_1btxic3-shipfrom
                                   eg_j_1btxic3-shipto
                                   eg_j_1btxic3-gruop
                                   eg_j_1btxic3-value(16)
                                   INTO eg_erro-text SEPARATED BY ';'.
        APPEND: eg_erro TO tg_erro.

      WHEN c_d.

        PERFORM: f_atualiza_icms USING eg_j_1btxic3-value(16) " NBMCODE
                                       eg_j_1btxic3-shipfrom  " Shipfrom
                                       eg_j_1btxic3-shipto    " Shipto
                                       eg_j_1btxic3-validfrom " Validfrom
                                       vg_nbmcode             " NBMCODE2
                                       p_letra                " Letra
                                           ''                     " Rate
                                           eg_a382-knumh                     " KNUMH1
                                           vg_red1 "'100'                  " Base
                                           eg_j_1btxic3-rate      " Rate3
                                           eg_j_1btxic3-base      " RED
                                           eg_j_1batl1-taxsit     " CST
                                           ''                     " Rate2
                                           ''                     " Base1
                                           ''                     " Rate4
                                           ''                     " Red1
                                           ''                     " CST1
                                           ''                   " Knumh
                                           vg_rate                " Rate1
                                           sy-datum               " Udate
                                           sy-uzeit               " Utime
                                           c_i              " Change_ind
                                           c_5                    " Status
                                           ''.                    " Status1

* Combinação 'xxx' da J_1BTXIC1 não existe
        CONCATENATE c_z16 text-102 eg_j_1btxic3-shipfrom
                                   eg_j_1btxic3-shipto
                                   eg_j_1btxic3-gruop
                                   eg_j_1btxic3-value(16)
                                   INTO eg_erro-text SEPARATED BY ';'.
        APPEND: eg_erro TO tg_erro.


      WHEN OTHERS.
    ENDCASE.


  ENDIF.
  CLEAR: eg_j_1btxic1.

ENDFORM.                    " F_REGRA_BCD_IC1
*&---------------------------------------------------------------------*
*&      Form  F_UNIR_A346
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_unir_a346 .

  CLEAR: tg_a346.

* COFINS
  LOOP AT tg_a346_cofins INTO eg_a346.
    APPEND: eg_a346 TO tg_a346.
  ENDLOOP.
  CLEAR: eg_a346.

* PIS
  LOOP AT tg_a346_pis INTO eg_a346.
    APPEND: eg_a346 TO tg_a346.
  ENDLOOP.
  CLEAR: eg_a346.

ENDFORM.                    " F_UNIR_A346
*&---------------------------------------------------------------------*
*&      Form  F_AJUSTA_A346
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_ajusta_a346 .

  LOOP AT tg_a346_cofins INTO eg_a346.
    eg_a346_tmp_cof = eg_a346.
    PERFORM: f_date_to_char CHANGING eg_a346_tmp_cof-datbi.
    PERFORM: f_date_to_char CHANGING eg_a346_tmp_cof-datab.
    APPEND: eg_a346_tmp_cof TO tg_a346_tmp_cof.
  ENDLOOP.
  CLEAR: eg_a346.

ENDFORM.                    " F_AJUSTA_A346
*&---------------------------------------------------------------------*
*&      Form  F_AJUSTA_A346_PIS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_ajusta_a346_pis .

  LOOP AT tg_a346_pis INTO eg_a346.
    eg_a346_tmp_pis = eg_a346.
    PERFORM: f_date_to_char CHANGING eg_a346_tmp_pis-datbi.
    PERFORM: f_date_to_char CHANGING eg_a346_tmp_pis-datab.
    APPEND: eg_a346_tmp_pis TO tg_a346_tmp_pis.
  ENDLOOP.
  CLEAR: eg_a346.


ENDFORM.                    " F_AJUSTA_A346_PIS
*&---------------------------------------------------------------------*
*&      Form  F_PIS_COFINS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_pis_cofins .

  CLEAR: tg_txpca001.

  LOOP AT tg_konh INTO eg_konh WHERE kotabnr = c_346
                                 AND kappl   = c_tx
                                 AND kschl IN rg_mm_tx_000_001_piscofins
                                 AND vakey CP '*87'.
    eg_konh_aux-knumh = eg_konh-knumh.
    APPEND: eg_konh     TO tg_konh_all.  " Formato de OBJECTID
    APPEND: eg_konh_aux TO tg_konh_aux.  " Formato original
  ENDLOOP.
  CLEAR: eg_konh, eg_konh_aux.

  CHECK: NOT tg_konh_all[] IS INITIAL.

  PERFORM: f_busca_modificacao.          " Tabela CDHDR
  CHECK NOT tg_cdhdr[] IS INITIAL.

  SORT: tg_cdhdr BY objectid ASCENDING.

  SELECT country
         gruop
         value
         value2
         value3
         validfrom
         validto
         rate
    FROM j_1btxcof
    INTO TABLE tg_j_1btxcof
      WHERE country   = c_br
        AND gruop     = c_87
        AND value     = space
        AND value2    = space
        AND value3    = space.
*            and VALIDFROM = TG_CDHDR-datAB
*            AND VALIDTO   = TG_CDHDR-datBI.

  IF sy-subrc EQ 0.

    SORT: tg_j_1btxcof BY gruop     ASCENDING
                          value     ASCENDING
                          value2    ASCENDING
                          value3    ASCENDING
                          validfrom ASCENDING
                          validto   ASCENDING.

    SELECT country
           gruop
           value
           value2
           value3
           validfrom
           validto
           rate
      FROM j_1btxpis
        INTO TABLE tg_j_1btxpis
*              FOR ALL ENTRIES IN tg_a346_TMP_PIS
        WHERE country   = c_br
        AND gruop     = c_87
        AND value     = space
        AND value2    = space
        AND value3    = space.
    IF sy-subrc EQ 0.

      DELETE FROM ztsdd_txpca001 WHERE pis NE space
                                    OR cofins NE space.

* Insere registro na tabela 'ZTSDD_TXPCA001' com tipo de modificação 'CHANGE_IND' =  'I'.
      CLEAR: eg_j_1btxpis, eg_a346_tmp_pis.
      LOOP AT tg_j_1btxpis INTO eg_j_1btxpis.
        LOOP AT tg_j_1btxcof INTO eg_j_1btxcof WHERE validto <= eg_j_1btxpis-validfrom
                                                 AND validto => eg_j_1btxpis-validto.
* Sem buscar na A346, ficará sem KNUMH do PIS e do COFINS.
          PERFORM: f_atualiza_pis USING vg_knumh_pis           " PISKNUMH
                                        eg_j_1btxpis-rate      " PIS
                                        vg_knumh_cof           " COFKNUMH
                                        eg_j_1btxcof-rate      " COFINS
                                        eg_j_1btxpis-validfrom " VALIDFROM
*                                      EG_CDHDR-UDATE         " UDATE
*                                      EG_CDHDR-UTIME         " UTIME
                                        sy-datum               " UDATE
                                        sy-uzeit               " UTIME
                                        c_i                    " CHANGE_IND Se não existir
                                        c_1                    " STATUS
                                        eg_txpca001-data       " DATA
                                        eg_txpca001-filename   " FILENAME
                                        eg_txpca001-status1    " STATUS1
                                        eg_txpca001-data1      " DATA1
                                        eg_txpca001-filename1. " FILENAME1
        ENDLOOP.

      ENDLOOP.

      CLEAR: eg_j_1btxpis, eg_j_1btxcof.

    ENDIF.
  ENDIF.

ENDFORM.                    " F_PIS_COFINS
*&---------------------------------------------------------------------*
*&      Form  F_REPROCESSA_GH
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_reprocessa_gh.

  LOOP AT tg_txpca004_tmp INTO eg_txpca004.

    PERFORM: f_conv_nbmcode USING eg_txpca004-nbmcode
                         CHANGING vg_nbmcode.


    LOOP AT tg_j_1btxic3_to INTO eg_j_1btxic3_85 WHERE shipfrom  = eg_txpca004-shipto
                                                   AND shipto    = eg_txpca004-shipto
                                                   AND value     = eg_txpca004-nbmcode
                                                   AND gruop     = c_85
                                                   AND validfrom >= eg_txpca004-validfrom.
*                                                   AND validto   =< eg_txpca004-validfrom.

* LOG de ERRO Z05:
* Se não é ZERO ou não existe o registro na tabela ou o TAXSIT não é ‘60’,
* gravar com status 5 – chave faltante de imposto – gravar no log do JOB
* J_1BTXIC3- SHIPFROM + J_1BTXIC3- SHIPTO + J_1BTXIC3- VALUE + J_1BTXIC3- SHIPTO-GROUP faltante.
      IF eg_j_1btxic3_85-rate IS NOT INITIAL.

        PERFORM: f_atualiza_icms USING eg_txpca004-nbmcode    " NBMCODE
                                       eg_txpca004-shipfrom   " Shipfrom
                                       eg_txpca004-shipto     " Shipto
                                       eg_txpca004-validfrom  " Validfrom
                                       vg_nbmcode             " NBMCODE2
                                       eg_txpca004-letra                    " Letra
                                       eg_txpca004-rate       " Rate
                                       eg_txpca004-knumh1     " KNUMH1
                                       eg_txpca004-base       " Base  - Não tem na IC3
                                       eg_txpca004-rate       " Rate3 - Não tem na IC3
                                       eg_txpca004-base       " RED   - Não tem na IC3
                                       eg_txpca004-cst        " CST   - Não tem na IC3
                                       eg_txpca004-rate2      " Rate2
                                       eg_txpca004-base1      " Base1
                                       eg_txpca004-rate4      " Rate4
                                       eg_txpca004-red1       " Red1
                                       eg_txpca004-cst1       " CST1
                                       eg_txpca004-knumh      " Knumh
                                       vg_rate                " Rate1
                                       sy-datum               " Udate
                                       sy-uzeit               " Utime
                                       vg_status              " Change_ind
                                       c_5                    " Status
                                       ''.                    " Status1

** Chave faltante de imposto 'xxx'..
        CONCATENATE c_z05 text-100 eg_txpca004-shipto
                                   eg_txpca004-shipto
                                   eg_txpca004-nbmcode
                                   c_85
                              INTO eg_erro-text SEPARATED BY ';'.
        APPEND: eg_erro TO tg_erro.

      ELSE.
* Se EG_J_1BTXIC3_85-RATE for '0,00', prosseguir...

        READ TABLE tg_j_1batl1 INTO eg_j_1batl1_85
             WITH KEY eg_j_1btxic3_85-taxlaw BINARY SEARCH.
        IF sy-subrc EQ 0.

          IF eg_j_1batl1_85-taxsit = c_6.

            LOOP AT tg_j_1btxst3 INTO eg_j_1btxst3
                    WHERE land1    = c_br
                      AND shipfrom = eg_txpca004-shipfrom
                      AND shipto   = eg_txpca004-shipto
*                    and GRUOP    = EG_TXPCA004-GRUOP
                      AND value    = eg_txpca004-nbmcode.

              LOOP AT tg_j_1btxic3_to INTO eg_j_1btxic3_44
                   WHERE shipfrom  =  eg_txpca004-shipto
                     AND shipto    =  eg_txpca004-shipto
                     AND gruop     =  c_44
                     AND value     =  eg_txpca004-nbmcode
                     AND validfrom => eg_txpca004-validfrom.

                CASE eg_j_1btxic3_44-base.

                  WHEN '100'.
                    vg_rate = eg_j_1btxic3_44-rate.
                  WHEN OTHERS.
* Se o Rate for <> 100, usar fórmula abaixo:
* Formula para tributação final (campo ZRATE1)= (Rate * BASE)/100.

                    vg_rate = ( eg_j_1btxic3_44-rate * eg_j_1btxic3_44-base ) / 100.

                ENDCASE.

                PERFORM: f_check_reproc_gh USING eg_j_1btxic3_44.

              ENDLOOP.
              IF sy-subrc NE 0.
                LOOP AT tg_j_1btxic3_to INTO eg_j_1btxic3_45
                     WHERE shipfrom = eg_txpca004-shipto
                       AND shipto   = eg_txpca004-shipto
                       AND gruop    = c_45
                       AND value    = eg_txpca004-nbmcode
                       AND validfrom => eg_txpca004-validfrom.

                  CASE eg_j_1btxic3_45-base.

                    WHEN '100'.
                      vg_rate = eg_j_1btxic3_45-rate.
                    WHEN OTHERS.
* Se o Rate for <> 100, usar fórmula abaixo:
* Formula para tributação final (campo ZRATE1)= (Rate * BASE)/100.

                      vg_rate = ( eg_j_1btxic3_45-rate * eg_j_1btxic3_45-base ) / 100.

                  ENDCASE.
                  PERFORM: f_check_reproc_gh USING eg_j_1btxic3_45.
                ENDLOOP.
****COlocar LOG


                IF sy-subrc NE 0.

                  IF eg_txpca004-letra = c_g.

                    PERFORM: f_atualiza_icms USING eg_txpca004-nbmcode    " NBMCODE
                                                   eg_txpca004-shipfrom   " Shipfrom
                                                   eg_txpca004-shipto     " Shipto
                                                   eg_txpca004-validfrom  " Validfrom
                                                   vg_nbmcode             " NBMCODE2
                                                   eg_txpca004-letra                    " Letra
                                                   eg_txpca004-rate       " Rate
                                                   eg_txpca004-knumh1     " KNUMH1
                                                   eg_txpca004-base       " Base  - Não tem na IC3
                                                   eg_txpca004-rate       " Rate3 - Não tem na IC3
                                                   eg_txpca004-base       " RED   - Não tem na IC3
                                                   eg_txpca004-cst        " CST   - Não tem na IC3
                                                   eg_txpca004-rate2      " Rate2
                                                   eg_txpca004-base1      " Base1
                                                   eg_txpca004-rate4      " Rate4
                                                   eg_txpca004-red1       " Red1
                                                   eg_txpca004-cst1       " CST1
                                                   eg_txpca004-knumh      " Knumh
                                                   vg_rate                " Rate1
                                                   sy-datum               " Udate
                                                   sy-uzeit               " Utime
                                                   vg_status              " Change_ind
                                                   c_5                    " Status
                                                   ''.                    " Status1

** Conteúdo 'shipfrom' 'shipto' faltante
                    CONCATENATE c_z04 text-060 eg_txpca004-shipto
                                               eg_txpca004-shipto
                                               eg_txpca004-nbmcode
                                               c_45
                                         text-050 INTO eg_erro-text SEPARATED BY ';'.
                    APPEND: eg_erro TO tg_erro.

                  ELSEIF eg_txpca004-letra = c_h.
                    PERFORM: f_atualiza_icms USING eg_txpca004-nbmcode    " NBMCODE
                                                   eg_txpca004-shipfrom   " Shipfrom
                                                   eg_txpca004-shipto     " Shipto
                                                   eg_txpca004-validfrom  " Validfrom
                                                   vg_nbmcode             " NBMCODE2
                                                   eg_txpca004-letra                    " Letra
                                                   eg_txpca004-rate       " Rate
                                                   eg_txpca004-knumh1     " KNUMH1
                                                   eg_txpca004-base       " Base  - Não tem na IC3
                                                   eg_txpca004-rate       " Rate3 - Não tem na IC3
                                                   eg_txpca004-base       " RED   - Não tem na IC3
                                                   eg_txpca004-cst        " CST   - Não tem na IC3
                                                   eg_txpca004-rate2      " Rate2
                                                   eg_txpca004-base1      " Base1
                                                   eg_txpca004-rate4      " Rate4
                                                   eg_txpca004-red1       " Red1
                                                   eg_txpca004-cst1       " CST1
                                                   eg_txpca004-knumh      " Knumh
                                                   vg_rate                " Rate1
                                                   sy-datum               " Udate
                                                   sy-uzeit               " Utime
                                                   vg_status              " Change_ind
                                                   c_5                    " Status
                                                   ''.                    " Status1

** Conteúdo 'shipfrom' 'shipto' faltante
                    CONCATENATE c_z08 text-060 eg_txpca004-shipto
                                               eg_txpca004-shipto
                                               eg_txpca004-nbmcode
                                               c_45
                                         text-050 INTO eg_erro-text SEPARATED BY ';'.
                    APPEND: eg_erro TO tg_erro.

                  ENDIF.

                ENDIF.
              ENDIF.
            ENDLOOP.

          ELSE.
* Se o TAXSIT não for '60', gravar com status '5'.
            PERFORM: f_atualiza_icms USING eg_txpca004-nbmcode    " NBMCODE
                                           eg_txpca004-shipfrom   " Shipfrom
                                           eg_txpca004-shipto     " Shipto
                                           eg_txpca004-validfrom  " Validfrom
                                           vg_nbmcode             " NBMCODE2
                                           eg_txpca004-letra                    " Letra
                                           eg_txpca004-rate       " Rate
                                           eg_txpca004-knumh1     " KNUMH1
                                           eg_txpca004-base       " Base  - Não tem na IC3
                                           eg_txpca004-rate       " Rate3 - Não tem na IC3
                                           eg_txpca004-base       " RED   - Não tem na IC3
                                           eg_txpca004-cst        " CST   - Não tem na IC3
                                           eg_txpca004-rate2      " Rate2
                                           eg_txpca004-base1      " Base1
                                           eg_txpca004-rate4      " Rate4
                                           eg_txpca004-red1       " Red1
                                           eg_txpca004-cst1       " CST1
                                           eg_txpca004-knumh      " Knumh
                                           vg_rate                " Rate1
                                           sy-datum               " Udate
                                           sy-uzeit               " Utime
                                           vg_status              " Change_ind
                                           c_5                    " Status
                                           ''.                    " Status1

            IF eg_txpca004-letra = c_g.
* Chave faltante de imposto 'XXX' 'YYY'...
              CONCATENATE c_z05 text-100 eg_j_1btxic3_85-shipto
                                         eg_j_1btxic3_85-shipto
                                         eg_j_1btxic3_85-value
                                         eg_j_1btxic3_85-gruop
                                    INTO eg_erro-text SEPARATED BY ';'.
              APPEND: eg_erro TO tg_erro.

            ELSEIF eg_txpca004-letra = c_h.
              CONCATENATE c_z09 text-100 eg_j_1btxic3_85-shipto
                                         eg_j_1btxic3_85-shipto
                                         eg_j_1btxic3_85-gruop
                                         eg_j_1btxic3_85-value

                                    INTO eg_erro-text SEPARATED BY ';'.
              APPEND: eg_erro TO tg_erro.

            ENDIF.

          ENDIF.
        ENDIF.
      ENDIF.

    ENDLOOP.

    IF sy-subrc <> 0.

      IF eg_txpca004-letra = c_g.

        CONCATENATE c_z05 text-100 eg_txpca004-shipto
                                   eg_txpca004-shipto
                                   c_85
                                   eg_txpca004-nbmcode
                    text-040 INTO eg_erro-text SEPARATED BY ';'.
        APPEND: eg_erro TO tg_erro.

      ELSEIF eg_txpca004-letra = c_h.
        CONCATENATE c_z09 text-100 eg_txpca004-shipto
                             eg_txpca004-shipto
                             c_85
                             eg_txpca004-nbmcode
              text-040 INTO eg_erro-text SEPARATED BY ';'.
        APPEND: eg_erro TO tg_erro.

      ENDIF.

    ENDIF.

  ENDLOOP.
  CLEAR: eg_txpca004.

ENDFORM.                    " F_REPROCESSA_GH
*&---------------------------------------------------------------------*
*&      Form  F_CHECK_REPROC_GH
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_1BTXIC3  text
*----------------------------------------------------------------------*
FORM f_check_reproc_gh  USING p_1btxic3 STRUCTURE eg_j_1btxic3_from.

  PERFORM: f_atualiza_icms USING eg_txpca004-nbmcode    " NBMCODE
                                 eg_txpca004-shipfrom   " Shipfrom
                                 eg_txpca004-shipto     " Shipto
                                 eg_txpca004-validfrom  " Validfrom
                                 vg_nbmcode             " NBMCODE2
                                 eg_txpca004-letra      " Letra
                                 eg_j_1btxst3-rate      " Rate
                                 ''                     " KNUMH1
                                 '100'                  " Base
                                 p_1btxic3-rate         " Rate3
                                 p_1btxic3-base         " RED
                                 eg_j_1batl1_85-taxsit  " CST
                                 p_1btxic3-rate         " Rate2
                                 p_1btxic3-base         " Base1
                                 p_1btxic3-rate         " Rate4
                                 p_1btxic3-base         " Red1
                                 eg_j_1batl1_85-taxsit  " CST1
                                 eg_txpca004-knumh      " Knumh
                                 vg_rate                " Rate1
                                 sy-datum               " Udate
                                 sy-uzeit               " Utime
                                 c_a                    " Change_ind
                                 c_1                    " Status
                                 eg_txpca004-status1.   " Status1

ENDFORM.                    " F_CHECK_REPROC_GH
*&---------------------------------------------------------------------*
*&      Form  F_ICMS_VENDA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_icms_venda .

  CLEAR: tg_cdhdr    ,
         tg_cdpos    ,
         tg_konh_all ,
         tg_konh_aux ,
         tg_j_1btxic3,
         tg_j_1btxic1,
         tg_j_1batl1 .

  tg_j_1batl1[] = tg_j_1batl1_aux[].

* Registros de condição válidos para ICMS de venda
  LOOP AT tg_konh INTO eg_konh WHERE kotabnr = c_382
                                 AND kappl   = c_v
                                 AND kschl IN rg_mm_tx_000_013_icms_venda
                                 AND vakey CP '*85'.
    eg_konh_aux-knumh = eg_konh-knumh.
    APPEND: eg_konh     TO tg_konh_all.  " Formato de OBJECTID
    APPEND: eg_konh_aux TO tg_konh_aux.  " Formato original
  ENDLOOP.
  CLEAR: eg_konh.

  CHECK: NOT tg_konh_aux[] IS INITIAL.

  PERFORM: f_busca_modificacao.             " Select CDHDR
  CHECK NOT tg_cdhdr[] IS INITIAL.

  PERFORM: f_busca_modif_itens,            " Select na tabela CDPOS
           f_separa_changenr.               "

  REFRESH tg_txpca004_aux.

  LOOP AT tg_konh_all INTO eg_konh.
    eg_txpca004_aux-shipfrom  = eg_konh-vakey+4(3)  .
    eg_txpca004_aux-shipto    = eg_konh-vakey+7(3)  .
    eg_txpca004_aux-nbmcode   = eg_konh-vakey+12(15).
    PERFORM: f_date_to_char CHANGING eg_konh-datab.
    eg_txpca004_aux-validfrom = eg_konh-datab       .
    eg_txpca004_aux-knumh     = eg_konh-knumh       .
    APPEND: eg_txpca004_aux TO tg_txpca004_aux.
  ENDLOOP.
  CLEAR: eg_konh.

  SORT: tg_txpca004_aux BY shipto    ASCENDING
                           shipfrom  ASCENDING
                           nbmcode   ASCENDING
                           validfrom ASCENDING.

  PERFORM: f_ajusta_cdhdr.

  CHECK: tg_cdhdr_tmp[] IS NOT INITIAL.

  SELECT kappl
         kschl
         aland
         doctyp
         txreg_sf
         txreg_st
         dynkey1
         dynkey2
         dynkey3
         taxgroup
         datbi
         datab
         knumh
      FROM a382
      INTO TABLE tg_a382
      FOR ALL ENTRIES IN tg_cdhdr_tmp
        WHERE   kappl    = c_v
          AND   kschl IN rg_mm_tx_000_013_icms_venda
          AND   aland    = c_br
*          AND   dynkey1  = c_x
          AND   dynkey2  = c_x
          AND   dynkey3  = c_x
          AND   taxgroup = c_85
          AND   knumh    = tg_cdhdr_tmp-knumh.

  PERFORM: f_ajusta_a382    ,
           f_juros_icms_bcd .                  " J_1BTXIC3

  SELECT mandt      nbmcode
         shipfrom   shipto
         validfrom  nbmcode2
         letra      rate
         knumh      rate1
         knumh1     base
         rate3      red
         cst        rate2
         base1      rate4
         red1       cst1
         udate      utime
         change_ind status
         data       filename
         status1    data1
    FROM  ztsdd_txpca004
    INTO TABLE tg_txpca004
      FOR ALL ENTRIES IN tg_txpca004_aux
      WHERE shipto    =  tg_txpca004_aux-shipto
        AND shipfrom  =  tg_txpca004_aux-shipfrom
        AND validfrom >= tg_txpca004_aux-validfrom .

*        AND ( validfrom >= tg_txpca004_aux-validfrom OR
*              validfrom <= tg_txpca004_aux-validfrom ) .

*        AND status1    NE c_5.

  IF sy-subrc EQ 0.

    tg_txpca004_tmp[] = tg_txpca004[].

* Rotina só interessa se o registro não estiver deletado (CHANGE_IND = 'D').
    DELETE tg_txpca004_tmp WHERE change_ind = c_d.
    IF NOT tg_txpca004_tmp[] IS INITIAL.

      SORT: tg_txpca004     BY nbmcode ASCENDING
                              shipfrom ASCENDING
                                shipto ASCENDING
                             validfrom ASCENDING.
      SORT: tg_txpca004_tmp BY nbmcode ASCENDING
                              shipfrom ASCENDING
                                shipto ASCENDING
                             validfrom ASCENDING.

*      LOOP AT tg_cdpos INTO eg_cdpos.
*        READ TABLE tg_konh_all INTO eg_konh WITH KEY knumh = eg_cdpos-objectid BINARY SEARCH.
*        IF sy-subrc EQ 0.
*          PERFORM: f_date_to_char CHANGING eg_konh-datab.
****          READ TABLE tg_txpca004_tmp INTO eg_txpca004
*****               WITH KEY NBMCODE = Eg_konh-VAKEY+12(15)
****               WITH KEY nbmcode = eg_konh-vakey+10(15)
****                       shipfrom = eg_konh-vakey+4(3)
****                       shipto   = eg_konh-vakey+7(3)
****                      validfrom = eg_konh-datab BINARY SEARCH.
****          IF sy-subrc EQ 0.
*
*          LOOP AT tg_txpca004_tmp INTO eg_txpca004
**               WITH KEY NBMCODE = Eg_konh-VAKEY+12(15)
*               WHERE nbmcode = eg_konh-vakey+10(15)
**                 AND shipfrom = eg_konh-vakey+4(3)
*                  AND shipto   = eg_konh-vakey+7(3)
**                  AND validfrom = eg_konh-datab.
*                  AND validfrom <= eg_konh-datab.
*
*
** Atualiza tabela 'ZTSDD_TXPCA004'
*            PERFORM: f_atualiza_icms USING eg_txpca004-nbmcode    " NBMCODE
*                                           eg_txpca004-shipfrom   " Shipfrom
*                                           eg_txpca004-shipto     " Shipto
*                                           eg_txpca004-validfrom  " Validfrom
*                                           eg_txpca004-nbmcode2   " NBMCODE2
*                                           eg_txpca004-letra      " Letra
*                                           eg_txpca004-rate       " Rate
*                                           eg_txpca004-knumh1     " Knumh1
*                                           eg_txpca004-base       " Base
*                                           eg_txpca004-rate3      " RATE3
*                                           eg_txpca004-red        " RED
*                                           eg_txpca004-cst        " CST
*                                           eg_txpca004-rate2      " RATE2
*                                           eg_txpca004-base1      " Base1
*                                           eg_txpca004-rate4      " Rate4
*                                           eg_txpca004-red1       " Red1
*                                           eg_txpca004-cst1        " CST1
*                                           eg_txpca004-knumh      " KNUMH
*                                           eg_txpca004-rate1      " Rate1
*                                           sy-datum               " Udate
*                                           sy-uzeit               " Utime
*                                           c_d                    " Change_ind
*                                           c_5                    " Status
*                                           space.                 " Status1
*
*            CONCATENATE c_z10 text-109 eg_txpca004-shipfrom
*                                       eg_txpca004-shipto
*                                       c_85
*                                       eg_txpca004-nbmcode
*                        text-105 INTO eg_erro-text SEPARATED BY ';'.
*            APPEND: eg_erro TO tg_erro.
*
*          ENDLOOP.
*        ENDIF.
*      ENDLOOP.

      SORT: tg_a382 BY knumh ASCENDING.

      PERFORM f_lei_fiscal_icms.        " J_1BATL1
      PERFORM f_regras_icms_venda.
      PERFORM f_regras_icms_venda_bcd.

      CLEAR: eg_cdpos.
    ENDIF.
  ENDIF.

ENDFORM.                    " F_ICMS_VENDA
*&---------------------------------------------------------------------*
*&      Form  F_REGRAS_ICMS_VENDA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_regras_icms_venda .


  LOOP AT tg_a382_tmp INTO eg_a382.
*    READ TABLE tg_txpca004 INTO eg_txpca004 WITH KEY nbmcode   = eg_a382-dynkey1
*                                                     shipfrom  = eg_a382-txreg_sf
*                                                     shipto    = eg_a382-txreg_st
*                                                     validfrom = eg_a382-datab_aux BINARY SEARCH.
*    IF sy-subrc EQ 0.
    LOOP AT tg_txpca004 INTO eg_txpca004 WHERE nbmcode   = eg_a382-dynkey1
*                                               shipfrom  = eg_a382-txreg_sf
                                            AND shipto    = eg_a382-txreg_st
*                                            AND validfrom = eg_a382-datab_aux.
                                            AND validfrom <= eg_a382-datab_aux.


      LOOP AT tg_j_1btxic3_to INTO eg_j_1btxic3
        WHERE land1     = eg_a382-aland
          AND shipfrom  = eg_a382-txreg_sf
          AND shipto    = eg_a382-txreg_st
          AND gruop     = eg_a382-taxgroup
          AND value     = eg_a382-dynkey1
          AND validfrom = eg_a382-datab_aux.
        CASE eg_txpca004-letra.

          WHEN c_a OR c_e OR c_g OR c_h.
            PERFORM: f_venda_aegh.

          WHEN c_b OR c_c OR c_d.
***            PERFORM: f_venda_bcd. Existe um form só para estas letras

          WHEN OTHERS.

        ENDCASE.

      ENDLOOP.

    ENDLOOP.
*    ENDIF.
  ENDLOOP.
  CLEAR: tg_a382, eg_a382.

ENDFORM.                    " F_REGRAS_ICMS_VENDA

*&---------------------------------------------------------------------*
*&      Form  f_regras_icms_venda_bcd
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_regras_icms_venda_bcd .


*sort tg_a382_tmp by kappl kschl aland doctyp txreg_sf txreg_st dynkey1 datab_aux.

  DELETE ADJACENT DUPLICATES FROM tg_a382_tmp COMPARING kappl kschl aland doctyp txreg_sf txreg_st dynkey1.

  LOOP AT tg_a382_tmp INTO eg_a382.
*    READ TABLE tg_txpca004 INTO eg_txpca004 WITH KEY nbmcode   = eg_a382-dynkey1
*                                                     shipfrom  = eg_a382-txreg_sf
*                                                     shipto    = eg_a382-txreg_st
*                                                     validfrom = eg_a382-datab_aux BINARY SEARCH.
*    IF sy-subrc EQ 0.
    LOOP AT tg_txpca004 INTO eg_txpca004 WHERE nbmcode   = eg_a382-dynkey1
                                            AND shipfrom  = eg_a382-txreg_sf
                                            AND shipto    = eg_a382-txreg_st
                                            AND validfrom >= eg_a382-datab_aux.



      LOOP AT tg_j_1btxic3_to INTO eg_j_1btxic3
        WHERE land1     = eg_a382-aland
          AND shipfrom  = eg_a382-txreg_sf
          AND shipto    = eg_a382-txreg_st
          AND gruop     = eg_a382-taxgroup
          AND value     = eg_a382-dynkey1
          AND validfrom = eg_a382-datab_aux.
        CASE eg_txpca004-letra.

          WHEN c_a OR c_e OR c_g OR c_h.
***            PERFORM: f_venda_aegh. Existe um form só para estas letras

          WHEN c_b OR c_c OR c_d.
            PERFORM: f_venda_bcd.

          WHEN OTHERS.

        ENDCASE.

      ENDLOOP.

    ENDLOOP.
*    ENDIF.
  ENDLOOP.
  CLEAR: tg_a382, eg_a382.

ENDFORM.                    " F_REGRAS_ICMS_VENDA_BCD
*&---------------------------------------------------------------------*
*&      Form  F_VENDA_AEGH
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_venda_aegh .

  IF eg_j_1btxic3-rate IS INITIAL AND
     eg_j_1btxic3-base IS INITIAL.
    READ TABLE tg_j_1batl1 INTO eg_j_1batl1
         WITH KEY eg_j_1btxic3-taxlaw BINARY SEARCH.
    IF sy-subrc EQ 0.
      IF eg_j_1batl1-taxsit = '6'.  " 60 considerando exit de conversão

        PERFORM: f_atualiza_icms USING eg_txpca004-nbmcode    " NBMCODE
                                       eg_txpca004-shipfrom   " Shipfrom
                                       eg_txpca004-shipto     " Shipto
                                       eg_txpca004-validfrom  " Validfrom
                                       eg_txpca004-nbmcode2   " NBMCODE2
                                       eg_txpca004-letra                " Letra
*                                       eg_txpca004-rate       " Rate
                                       eg_j_1btxst3-rate      " Rate
                                       eg_txpca004-knumh1     " Knumh1
                                       eg_txpca004-base       " Base
                                       eg_txpca004-rate3      " RATE3
                                       eg_txpca004-red        " RED
                                       eg_txpca004-cst         " CST
                                       eg_txpca004-rate2   " RATE2
                                       eg_txpca004-base1   " Base1
                                       eg_txpca004-rate4   " Rate4
                                       eg_txpca004-red1  " Red1
                                       eg_j_1batl1-taxsit " CST1
*                                       vg_taxsit1             " CST1
                                       eg_txpca004-knumh      " KNUMH
                                       eg_txpca004-rate1      " Rate1
                                       sy-datum               " Udate
                                       sy-uzeit               " Utime
                                       eg_txpca004-change_ind "c_a                    " Change_ind
                                       eg_txpca004-status1    " Status
                                       eg_txpca004-status1.   " Status1
** Atualiza tabela 'ZTSDD_TXPCA004'
*        PERFORM: f_atualiza_icms USING eg_txpca004-nbmcode    " NBMCODE
*                                       eg_txpca004-shipfrom   " Shipfrom
*                                       eg_txpca004-shipto     " Shipto
*                                       eg_txpca004-validfrom  " Validfrom
*                                       eg_txpca004-nbmcode2   " NBMCODE2
*                                       eg_txpca004-letra      " Letra
*                                       eg_txpca004-rate       " Rate
*                                       eg_txpca004-knumh1     " Knumh1
*                                       eg_txpca004-base       " Base
*                                       eg_txpca004-rate3      " RATE3
*                                       eg_txpca004-red        " RED
*                                       eg_txpca004-cst        " CST
*                                       eg_txpca004-rate2      " RATE2
*                                       eg_txpca004-base1      " Base1
*                                       eg_txpca004-rate4      " Rate4
*                                       eg_txpca004-red1       " Red1
*                                       eg_txpca004-cst        " CST1
*                                       eg_txpca004-knumh      " KNUMH
*                                       eg_txpca004-rate1      " Rate1
*                                       sy-datum               " Udate
*                                       sy-uzeit               " Utime
*                                       c_a                    " Change_ind
*                                       c_1                    " Status
*                                       space.                 " Status1

      ENDIF.

    ENDIF.
  ELSE.
** Atualiza tabela 'ZTSDD_TXPCA004'
*    PERFORM: f_atualiza_icms USING eg_txpca004-nbmcode    " NBMCODE
*                                   eg_txpca004-shipfrom   " Shipfrom
*                                   eg_txpca004-shipto     " Shipto
*                                   eg_txpca004-validfrom  " Validfrom
*                                   eg_txpca004-nbmcode2   " NBMCODE2
*                                   eg_txpca004-letra      " Letra
*                                   eg_txpca004-rate       " Rate
*                                   eg_txpca004-knumh1     " Knumh1
*                                   eg_txpca004-base       " Base
*                                   eg_txpca004-rate3      " RATE3
*                                   eg_txpca004-red        " RED
*                                   eg_txpca004-cst        " CST
*                                   eg_txpca004-rate2      " RATE2
*                                   eg_txpca004-base1      " Base1
*                                   eg_txpca004-rate4      " Rate4
*                                   eg_txpca004-red1       " Red1
*                                   eg_txpca004-cst        " CST1
*                                   eg_txpca004-knumh      " KNUMH
*                                   eg_txpca004-rate1      " Rate1
*                                   sy-datum               " Udate
*                                   sy-uzeit               " Utime
*                                   c_a                    " Change_ind
*                                   c_5                    " Status
*                                   space.                 " Status1

  ENDIF.

ENDFORM.                    " F_VENDA_AEGH
*&---------------------------------------------------------------------*
*&      Form  F_VENDA_BCD
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_venda_bcd .

  CLEAR: eg_j_1batl1.
  READ TABLE tg_j_1batl1 INTO eg_j_1batl1
       WITH KEY eg_j_1btxic3-taxlaw BINARY SEARCH.

  IF sy-subrc <> 0.
    IF eg_txpca004-letra = c_d AND eg_j_1btxic3-taxlaw IS INITIAL.
      eg_j_1batl1-taxsit = '0'.
    ENDIF.
  ENDIF.

  IF eg_j_1btxic3-base = '100'.
    vg_rate = eg_j_1btxic3-rate.
    vg_red1 = eg_j_1btxic3-base.
  ELSE.

* Fórmula de tributação
    vg_rate = ( eg_j_1btxic3-rate * eg_j_1btxic3-base ) / 100.
    vg_red1 = '100'.
  ENDIF.


* Atualiza tabela 'ZTSDD_TXPCA004'
  PERFORM: f_atualiza_icms USING eg_txpca004-nbmcode    " NBMCODE
                                 eg_txpca004-shipfrom   " Shipfrom
                                 eg_txpca004-shipto     " Shipto
                                 eg_txpca004-validfrom  " Validfrom
                                 eg_txpca004-nbmcode2   " NBMCODE2
                                 eg_txpca004-letra      " Letra
                                 eg_txpca004-rate      " Rate
                                 eg_txpca004-knumh1     " Knumh1
                                 eg_txpca004-base       " Base
                                 eg_txpca004-rate3      " RATE3
                                 eg_txpca004-red        " RED
                                 eg_txpca004-cst        " CST
                                 vg_rate                " RATE2
                                 vg_red1                " Base1
                                 eg_j_1btxic3-rate      " Rate4
                                 eg_j_1btxic3-base       " Red1
                                 eg_j_1batl1-taxsit        " CST1
                                 eg_txpca004-knumh      " KNUMH
                                 eg_txpca004-rate1      " Rate1
                                 sy-datum               " Udate
                                 sy-uzeit               " Utime
                                 c_i                    " Change_ind
                                 eg_txpca004-status1     " Status
                                 space.                 " Status1



ENDFORM.                    " F_VENDA_BCD
*&---------------------------------------------------------------------*
*&      Form  F_1BTSTX3
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_1btstx3.

  SELECT land1
         shipfrom
         shipto
         gruop
         value
         value2
         value3
         stgrp
         validfrom
         validto
         rate
    FROM j_1btxst3
    INTO TABLE tg_j_1btxst3
      FOR ALL ENTRIES IN tg_j_1btxic3
      WHERE land1     = tg_j_1btxic3-land1
        AND shipfrom  = tg_j_1btxic3-shipfrom
        AND shipto    = tg_j_1btxic3-shipto
        AND gruop     = tg_j_1btxic3-gruop
        AND value     = tg_j_1btxic3-value
*****        AND validto  <= tg_j_1btxic3-validfrom
****        AND validfrom  = tg_j_1btxic3-validfrom.
        AND ( ( validfrom <= tg_j_1btxic3-validfrom
        AND validto  >= tg_j_1btxic3-validto ) OR
           ( validfrom >= tg_j_1btxic3-validfrom
        AND validto  <= tg_j_1btxic3-validto ) ).


  IF sy-subrc EQ 0.

    SORT: tg_j_1btxst3 BY land1    ASCENDING
                          shipfrom ASCENDING
                          shipto   ASCENDING
                          gruop    ASCENDING
                          value    ASCENDING.
  ENDIF.

*  IF NOT tg_j_1btxst3[] IS INITIAL.
*
*    SELECT land1
*         shipfrom
*         shipto
*         gruop
*         value
*         value2
*         value3
*         validfrom
*         validto
*         rate
*         base
*         taxlaw
*    FROM j_1btxic3
*    INTO TABLE tg_j_1btxic3_to
*      FOR ALL ENTRIES IN tg_j_1btxst3
*        WHERE land1      = c_br
**          AND ( SHIPFROM = TG_J_1BTXST3-SHIPTO
**            AND SHIPTO   = TG_J_1BTXST3-SHIPTO )
*        AND ( ( shipfrom = tg_j_1btxst3-shipfrom AND shipto   = tg_j_1btxst3-shipto ) OR
*               ( shipfrom = tg_j_1btxst3-shipto AND shipto   = tg_j_1btxst3-shipto ) )
*        AND ( gruop      = c_44
*            OR gruop     = c_45
*            OR gruop     = c_85 )
*        AND value        = tg_j_1btxst3-value.
**          AND validto    >= tg_j_1btxst3-validto
**          AND validfrom   <= tg_j_1btxst3-validfrom.
**        AND validto <= tg_j_1btxst3-validfrom
**        AND validfrom  >= tg_j_1btxst3-validto.
*
*  ENDIF.

ENDFORM.                    " F_1BTSTX3
*&---------------------------------------------------------------------*
*&      Form  F_GRAVA_TAB_004
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_grava_tab_004 .

  SORT tg_txpca004_new BY nbmcode shipfrom shipto validfrom udate utime DESCENDING.
*  DELETE ADJACENT DUPLICATES FROM tg_txpca004_new COMPARING nbmcode shipfrom shipto validfrom.

  LOOP AT tg_txpca004_new INTO eg_txpca004.


    IF eg_txpca004-status1 = '1'.

*Verifica se já existe um registro com a mesma chave e com status1 = 2
      SELECT SINGLE * FROM ztsdd_txpca004
        INTO eg_txpca004_old
       WHERE nbmcode   EQ eg_txpca004-nbmcode
         AND shipfrom  EQ eg_txpca004-shipfrom
         AND shipto    EQ eg_txpca004-shipto
         AND validfrom EQ eg_txpca004-validfrom
         AND status1   EQ '2'.

      IF sy-subrc <> 0.
        MODIFY ztsdd_txpca004 FROM eg_txpca004.
        COMMIT WORK.
      ELSE.
*Verifica se os dados são iguais
        IF eg_txpca004-nbmcode  = eg_txpca004_old-nbmcode AND
            eg_txpca004-shipfrom  = eg_txpca004_old-shipfrom  AND
            eg_txpca004-shipto  = eg_txpca004_old-shipto  AND
            eg_txpca004-validfrom	=	eg_txpca004_old-validfrom	AND
            eg_txpca004-nbmcode2  = eg_txpca004_old-nbmcode2  AND
            eg_txpca004-letra	=	eg_txpca004_old-letra	AND
            eg_txpca004-rate  = eg_txpca004_old-rate  AND
            eg_txpca004-knumh	=	eg_txpca004_old-knumh	AND
            eg_txpca004-rate1	=	eg_txpca004_old-rate1	AND
            eg_txpca004-knumh1  = eg_txpca004_old-knumh1  AND
            eg_txpca004-base  = eg_txpca004_old-base  AND
            eg_txpca004-rate3	=	eg_txpca004_old-rate3	AND
            eg_txpca004-red	=	eg_txpca004_old-red	AND
            eg_txpca004-cst	=	eg_txpca004_old-cst	AND
            eg_txpca004-rate2	=	eg_txpca004_old-rate2	AND
            eg_txpca004-base1	=	eg_txpca004_old-base1	AND
            eg_txpca004-rate4	=	eg_txpca004_old-rate4	AND
            eg_txpca004-red1  = eg_txpca004_old-red1  AND
            eg_txpca004-cst1  = eg_txpca004_old-cst1.

*Não gravar o registro novamente
        ELSE.

          MODIFY ztsdd_txpca004 FROM eg_txpca004.
          COMMIT WORK.
        ENDIF.

      ENDIF.
    ELSE.

      MODIFY ztsdd_txpca004 FROM eg_txpca004.
      COMMIT WORK.
    ENDIF.


  ENDLOOP.

  REFRESH tg_txpca004_new.

ENDFORM.                    " F_GRAVA_TAB_004
